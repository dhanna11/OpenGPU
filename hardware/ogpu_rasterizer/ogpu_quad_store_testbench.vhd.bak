library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.ogpu_data_record_pkg.all;

entity ogpu_quad_generator_testbench is
end ogpu_quad_generator_testbench;

architecture ogpu_quad_generator_tb1 of ogpu_quad_generator_testbench is
	constant clock_period : time := 20 ns;
	signal clock,reset	: std_logic :='0';
	--
	signal quad_mask: std_logic_vector(0 to 3);
	signal quad: ogpu_quad;
	signal depth_quad: ogpu_depth_quad;

	signal buffer_ack: std_logic;
	signal addr: std_logic_vector(63 downto 0);

	signal quad_buffer_length: std_logic_vector(23 downto 0);
	signal buffer_address: std_logic_vector(15 downto 0);
	signal buffer_byte_enable: std_logic_vector(7 downto 0);
	signal buffer_write: std_logic;
	signal buffer_write_data: std_logic_vector(63 downto 0);
	
	-- DATAPATH/CONTROL interface signals
	signal start_raster: std_logic;
	signal store_quad: std_logic;
	signal quad_stored: std_logic;
begin
QS1:  entity work.ogpu_quad_store(quad_store_1) port map(
									-- IN
									clock=>clock,reset=>reset,
									d.addr=>addr,
									d.quad_mask=>quad_mask,
									d.quad=>quad,
									d.depth_quad=>depth_quad,
									d.start_raster=>start_raster,
									d.store_quad=>store_quad,
									d.buffer_ack=>buffer_ack,
									-- OUT
									q.quad_stored=>quad_stored,
									q.quad_buffer_length=>quad_buffer_length,
									q.buffer_address=>buffer_address,
									q.buffer_byte_enable=>buffer_byte_enable,
									q.buffer_write=>buffer_write,
									q.buffer_write_data=>buffer_write_data);							

reset_proc: process
	begin
		--reset <= '0';
		--wait for 5*clock_period;
		reset <= '1';
		wait for 5*clock_period;
		reset <= '0';
		wait;
	end process;
	
ext_memory_proc: process
	begin
		wait until buffer_write_data = '1';
		wait until falling_edge(clock) and clock = '0';
		wait for 3*clock_period;
		buffer_ack = '1';
		wait for clock_period;
		buffer_ack = '0';
	end process;
	
stim_proc: process
	begin
		next_quad <= '1';
		wait until quad_ready = '1';
		next_quad <= '0';
		wait for clock_period;
	end process;
								
clock_process: process
	begin
		clock <= not clock;
		wait for clock_period/2;
	end process;
end ogpu_quad_generator_tb1;