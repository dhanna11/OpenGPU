// soc_system_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.0 222

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_1 (
		input  wire [11:0] hps_0_h2f_axi_master_awid,                                                //                                               hps_0_h2f_axi_master.awid
		input  wire [29:0] hps_0_h2f_axi_master_awaddr,                                              //                                                                   .awaddr
		input  wire [3:0]  hps_0_h2f_axi_master_awlen,                                               //                                                                   .awlen
		input  wire [2:0]  hps_0_h2f_axi_master_awsize,                                              //                                                                   .awsize
		input  wire [1:0]  hps_0_h2f_axi_master_awburst,                                             //                                                                   .awburst
		input  wire [1:0]  hps_0_h2f_axi_master_awlock,                                              //                                                                   .awlock
		input  wire [3:0]  hps_0_h2f_axi_master_awcache,                                             //                                                                   .awcache
		input  wire [2:0]  hps_0_h2f_axi_master_awprot,                                              //                                                                   .awprot
		input  wire        hps_0_h2f_axi_master_awvalid,                                             //                                                                   .awvalid
		output wire        hps_0_h2f_axi_master_awready,                                             //                                                                   .awready
		input  wire [11:0] hps_0_h2f_axi_master_wid,                                                 //                                                                   .wid
		input  wire [63:0] hps_0_h2f_axi_master_wdata,                                               //                                                                   .wdata
		input  wire [7:0]  hps_0_h2f_axi_master_wstrb,                                               //                                                                   .wstrb
		input  wire        hps_0_h2f_axi_master_wlast,                                               //                                                                   .wlast
		input  wire        hps_0_h2f_axi_master_wvalid,                                              //                                                                   .wvalid
		output wire        hps_0_h2f_axi_master_wready,                                              //                                                                   .wready
		output wire [11:0] hps_0_h2f_axi_master_bid,                                                 //                                                                   .bid
		output wire [1:0]  hps_0_h2f_axi_master_bresp,                                               //                                                                   .bresp
		output wire        hps_0_h2f_axi_master_bvalid,                                              //                                                                   .bvalid
		input  wire        hps_0_h2f_axi_master_bready,                                              //                                                                   .bready
		input  wire [11:0] hps_0_h2f_axi_master_arid,                                                //                                                                   .arid
		input  wire [29:0] hps_0_h2f_axi_master_araddr,                                              //                                                                   .araddr
		input  wire [3:0]  hps_0_h2f_axi_master_arlen,                                               //                                                                   .arlen
		input  wire [2:0]  hps_0_h2f_axi_master_arsize,                                              //                                                                   .arsize
		input  wire [1:0]  hps_0_h2f_axi_master_arburst,                                             //                                                                   .arburst
		input  wire [1:0]  hps_0_h2f_axi_master_arlock,                                              //                                                                   .arlock
		input  wire [3:0]  hps_0_h2f_axi_master_arcache,                                             //                                                                   .arcache
		input  wire [2:0]  hps_0_h2f_axi_master_arprot,                                              //                                                                   .arprot
		input  wire        hps_0_h2f_axi_master_arvalid,                                             //                                                                   .arvalid
		output wire        hps_0_h2f_axi_master_arready,                                             //                                                                   .arready
		output wire [11:0] hps_0_h2f_axi_master_rid,                                                 //                                                                   .rid
		output wire [63:0] hps_0_h2f_axi_master_rdata,                                               //                                                                   .rdata
		output wire [1:0]  hps_0_h2f_axi_master_rresp,                                               //                                                                   .rresp
		output wire        hps_0_h2f_axi_master_rlast,                                               //                                                                   .rlast
		output wire        hps_0_h2f_axi_master_rvalid,                                              //                                                                   .rvalid
		input  wire        hps_0_h2f_axi_master_rready,                                              //                                                                   .rready
		input  wire        clk_0_clk_clk,                                                            //                                                          clk_0_clk.clk
		input  wire        hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset,         //         hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset, // ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset.reset
		output wire [1:0]  ogpu_quad_store_ack_s1_address,                                           //                                             ogpu_quad_store_ack_s1.address
		output wire        ogpu_quad_store_ack_s1_write,                                             //                                                                   .write
		input  wire [31:0] ogpu_quad_store_ack_s1_readdata,                                          //                                                                   .readdata
		output wire [31:0] ogpu_quad_store_ack_s1_writedata,                                         //                                                                   .writedata
		output wire        ogpu_quad_store_ack_s1_chipselect,                                        //                                                                   .chipselect
		output wire [1:0]  ogpu_quad_store_data_high_s1_address,                                     //                                       ogpu_quad_store_data_high_s1.address
		input  wire [31:0] ogpu_quad_store_data_high_s1_readdata,                                    //                                                                   .readdata
		output wire [1:0]  ogpu_quad_store_data_low_s1_address,                                      //                                        ogpu_quad_store_data_low_s1.address
		input  wire [31:0] ogpu_quad_store_data_low_s1_readdata,                                     //                                                                   .readdata
		output wire [1:0]  ogpu_quad_store_req_s1_address,                                           //                                             ogpu_quad_store_req_s1.address
		input  wire [31:0] ogpu_quad_store_req_s1_readdata,                                          //                                                                   .readdata
		output wire [1:0]  ogpu_raster_unit_clip_rect0_s1_address,                                   //                                     ogpu_raster_unit_clip_rect0_s1.address
		output wire        ogpu_raster_unit_clip_rect0_s1_write,                                     //                                                                   .write
		input  wire [31:0] ogpu_raster_unit_clip_rect0_s1_readdata,                                  //                                                                   .readdata
		output wire [31:0] ogpu_raster_unit_clip_rect0_s1_writedata,                                 //                                                                   .writedata
		output wire        ogpu_raster_unit_clip_rect0_s1_chipselect,                                //                                                                   .chipselect
		output wire [1:0]  ogpu_raster_unit_clip_rect1_s1_address,                                   //                                     ogpu_raster_unit_clip_rect1_s1.address
		output wire        ogpu_raster_unit_clip_rect1_s1_write,                                     //                                                                   .write
		input  wire [31:0] ogpu_raster_unit_clip_rect1_s1_readdata,                                  //                                                                   .readdata
		output wire [31:0] ogpu_raster_unit_clip_rect1_s1_writedata,                                 //                                                                   .writedata
		output wire        ogpu_raster_unit_clip_rect1_s1_chipselect,                                //                                                                   .chipselect
		output wire [1:0]  ogpu_raster_unit_command_s1_address,                                      //                                        ogpu_raster_unit_command_s1.address
		output wire        ogpu_raster_unit_command_s1_write,                                        //                                                                   .write
		input  wire [31:0] ogpu_raster_unit_command_s1_readdata,                                     //                                                                   .readdata
		output wire [31:0] ogpu_raster_unit_command_s1_writedata,                                    //                                                                   .writedata
		output wire        ogpu_raster_unit_command_s1_chipselect,                                   //                                                                   .chipselect
		output wire [1:0]  ogpu_raster_unit_depth_coef_a_s1_address,                                 //                                   ogpu_raster_unit_depth_coef_a_s1.address
		output wire        ogpu_raster_unit_depth_coef_a_s1_write,                                   //                                                                   .write
		input  wire [31:0] ogpu_raster_unit_depth_coef_a_s1_readdata,                                //                                                                   .readdata
		output wire [31:0] ogpu_raster_unit_depth_coef_a_s1_writedata,                               //                                                                   .writedata
		output wire        ogpu_raster_unit_depth_coef_a_s1_chipselect,                              //                                                                   .chipselect
		output wire [1:0]  ogpu_raster_unit_depth_coef_b_s1_address,                                 //                                   ogpu_raster_unit_depth_coef_b_s1.address
		output wire        ogpu_raster_unit_depth_coef_b_s1_write,                                   //                                                                   .write
		input  wire [31:0] ogpu_raster_unit_depth_coef_b_s1_readdata,                                //                                                                   .readdata
		output wire [31:0] ogpu_raster_unit_depth_coef_b_s1_writedata,                               //                                                                   .writedata
		output wire        ogpu_raster_unit_depth_coef_b_s1_chipselect,                              //                                                                   .chipselect
		output wire [1:0]  ogpu_raster_unit_depth_coef_c_s1_address,                                 //                                   ogpu_raster_unit_depth_coef_c_s1.address
		output wire        ogpu_raster_unit_depth_coef_c_s1_write,                                   //                                                                   .write
		input  wire [31:0] ogpu_raster_unit_depth_coef_c_s1_readdata,                                //                                                                   .readdata
		output wire [31:0] ogpu_raster_unit_depth_coef_c_s1_writedata,                               //                                                                   .writedata
		output wire        ogpu_raster_unit_depth_coef_c_s1_chipselect,                              //                                                                   .chipselect
		output wire [1:0]  ogpu_raster_unit_quad_buffer_addr_high_s1_address,                        //                          ogpu_raster_unit_quad_buffer_addr_high_s1.address
		output wire        ogpu_raster_unit_quad_buffer_addr_high_s1_write,                          //                                                                   .write
		input  wire [31:0] ogpu_raster_unit_quad_buffer_addr_high_s1_readdata,                       //                                                                   .readdata
		output wire [31:0] ogpu_raster_unit_quad_buffer_addr_high_s1_writedata,                      //                                                                   .writedata
		output wire        ogpu_raster_unit_quad_buffer_addr_high_s1_chipselect,                     //                                                                   .chipselect
		output wire [1:0]  ogpu_raster_unit_quad_buffer_addr_low_s1_address,                         //                           ogpu_raster_unit_quad_buffer_addr_low_s1.address
		output wire        ogpu_raster_unit_quad_buffer_addr_low_s1_write,                           //                                                                   .write
		input  wire [31:0] ogpu_raster_unit_quad_buffer_addr_low_s1_readdata,                        //                                                                   .readdata
		output wire [31:0] ogpu_raster_unit_quad_buffer_addr_low_s1_writedata,                       //                                                                   .writedata
		output wire        ogpu_raster_unit_quad_buffer_addr_low_s1_chipselect,                      //                                                                   .chipselect
		output wire [1:0]  ogpu_raster_unit_status_s1_address,                                       //                                         ogpu_raster_unit_status_s1.address
		input  wire [31:0] ogpu_raster_unit_status_s1_readdata,                                      //                                                                   .readdata
		output wire [1:0]  ogpu_raster_unit_tile0_s1_address,                                        //                                          ogpu_raster_unit_tile0_s1.address
		output wire        ogpu_raster_unit_tile0_s1_write,                                          //                                                                   .write
		input  wire [31:0] ogpu_raster_unit_tile0_s1_readdata,                                       //                                                                   .readdata
		output wire [31:0] ogpu_raster_unit_tile0_s1_writedata,                                      //                                                                   .writedata
		output wire        ogpu_raster_unit_tile0_s1_chipselect,                                     //                                                                   .chipselect
		output wire [1:0]  ogpu_raster_unit_tile1_s1_address,                                        //                                          ogpu_raster_unit_tile1_s1.address
		output wire        ogpu_raster_unit_tile1_s1_write,                                          //                                                                   .write
		input  wire [31:0] ogpu_raster_unit_tile1_s1_readdata,                                       //                                                                   .readdata
		output wire [31:0] ogpu_raster_unit_tile1_s1_writedata,                                      //                                                                   .writedata
		output wire        ogpu_raster_unit_tile1_s1_chipselect,                                     //                                                                   .chipselect
		output wire [1:0]  ogpu_raster_unit_v0x_s1_address,                                          //                                            ogpu_raster_unit_v0x_s1.address
		output wire        ogpu_raster_unit_v0x_s1_write,                                            //                                                                   .write
		input  wire [31:0] ogpu_raster_unit_v0x_s1_readdata,                                         //                                                                   .readdata
		output wire [31:0] ogpu_raster_unit_v0x_s1_writedata,                                        //                                                                   .writedata
		output wire        ogpu_raster_unit_v0x_s1_chipselect,                                       //                                                                   .chipselect
		output wire [1:0]  ogpu_raster_unit_v0y_s1_address,                                          //                                            ogpu_raster_unit_v0y_s1.address
		output wire        ogpu_raster_unit_v0y_s1_write,                                            //                                                                   .write
		input  wire [31:0] ogpu_raster_unit_v0y_s1_readdata,                                         //                                                                   .readdata
		output wire [31:0] ogpu_raster_unit_v0y_s1_writedata,                                        //                                                                   .writedata
		output wire        ogpu_raster_unit_v0y_s1_chipselect,                                       //                                                                   .chipselect
		output wire [1:0]  ogpu_raster_unit_v0z_s1_address,                                          //                                            ogpu_raster_unit_v0z_s1.address
		output wire        ogpu_raster_unit_v0z_s1_write,                                            //                                                                   .write
		input  wire [31:0] ogpu_raster_unit_v0z_s1_readdata,                                         //                                                                   .readdata
		output wire [31:0] ogpu_raster_unit_v0z_s1_writedata,                                        //                                                                   .writedata
		output wire        ogpu_raster_unit_v0z_s1_chipselect,                                       //                                                                   .chipselect
		output wire [1:0]  ogpu_raster_unit_v1x_s1_address,                                          //                                            ogpu_raster_unit_v1x_s1.address
		output wire        ogpu_raster_unit_v1x_s1_write,                                            //                                                                   .write
		input  wire [31:0] ogpu_raster_unit_v1x_s1_readdata,                                         //                                                                   .readdata
		output wire [31:0] ogpu_raster_unit_v1x_s1_writedata,                                        //                                                                   .writedata
		output wire        ogpu_raster_unit_v1x_s1_chipselect,                                       //                                                                   .chipselect
		output wire [1:0]  ogpu_raster_unit_v1y_s1_address,                                          //                                            ogpu_raster_unit_v1y_s1.address
		output wire        ogpu_raster_unit_v1y_s1_write,                                            //                                                                   .write
		input  wire [31:0] ogpu_raster_unit_v1y_s1_readdata,                                         //                                                                   .readdata
		output wire [31:0] ogpu_raster_unit_v1y_s1_writedata,                                        //                                                                   .writedata
		output wire        ogpu_raster_unit_v1y_s1_chipselect,                                       //                                                                   .chipselect
		output wire [1:0]  ogpu_raster_unit_v1z_s1_address,                                          //                                            ogpu_raster_unit_v1z_s1.address
		output wire        ogpu_raster_unit_v1z_s1_write,                                            //                                                                   .write
		input  wire [31:0] ogpu_raster_unit_v1z_s1_readdata,                                         //                                                                   .readdata
		output wire [31:0] ogpu_raster_unit_v1z_s1_writedata,                                        //                                                                   .writedata
		output wire        ogpu_raster_unit_v1z_s1_chipselect,                                       //                                                                   .chipselect
		output wire [1:0]  ogpu_raster_unit_v2x_s1_address,                                          //                                            ogpu_raster_unit_v2x_s1.address
		output wire        ogpu_raster_unit_v2x_s1_write,                                            //                                                                   .write
		input  wire [31:0] ogpu_raster_unit_v2x_s1_readdata,                                         //                                                                   .readdata
		output wire [31:0] ogpu_raster_unit_v2x_s1_writedata,                                        //                                                                   .writedata
		output wire        ogpu_raster_unit_v2x_s1_chipselect,                                       //                                                                   .chipselect
		output wire [1:0]  ogpu_raster_unit_v2y_s1_address,                                          //                                            ogpu_raster_unit_v2y_s1.address
		output wire        ogpu_raster_unit_v2y_s1_write,                                            //                                                                   .write
		input  wire [31:0] ogpu_raster_unit_v2y_s1_readdata,                                         //                                                                   .readdata
		output wire [31:0] ogpu_raster_unit_v2y_s1_writedata,                                        //                                                                   .writedata
		output wire        ogpu_raster_unit_v2y_s1_chipselect,                                       //                                                                   .chipselect
		output wire [1:0]  ogpu_raster_unit_v2z_s1_address,                                          //                                            ogpu_raster_unit_v2z_s1.address
		output wire        ogpu_raster_unit_v2z_s1_write,                                            //                                                                   .write
		input  wire [31:0] ogpu_raster_unit_v2z_s1_readdata,                                         //                                                                   .readdata
		output wire [31:0] ogpu_raster_unit_v2z_s1_writedata,                                        //                                                                   .writedata
		output wire        ogpu_raster_unit_v2z_s1_chipselect,                                       //                                                                   .chipselect
		output wire [1:0]  ogpu_reset_s1_address,                                                    //                                                      ogpu_reset_s1.address
		output wire        ogpu_reset_s1_write,                                                      //                                                                   .write
		input  wire [31:0] ogpu_reset_s1_readdata,                                                   //                                                                   .readdata
		output wire [31:0] ogpu_reset_s1_writedata,                                                  //                                                                   .writedata
		output wire        ogpu_reset_s1_chipselect                                                  //                                                                   .chipselect
	);

	wire   [31:0] ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_readdata;                   // ogpu_raster_unit_quad_buffer_addr_high_s1_translator:uav_readdata -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent:m0_readdata
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_waitrequest;                // ogpu_raster_unit_quad_buffer_addr_high_s1_translator:uav_waitrequest -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent:m0_waitrequest
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_debugaccess;                // ogpu_raster_unit_quad_buffer_addr_high_s1_agent:m0_debugaccess -> ogpu_raster_unit_quad_buffer_addr_high_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_address;                    // ogpu_raster_unit_quad_buffer_addr_high_s1_agent:m0_address -> ogpu_raster_unit_quad_buffer_addr_high_s1_translator:uav_address
	wire    [3:0] ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_byteenable;                 // ogpu_raster_unit_quad_buffer_addr_high_s1_agent:m0_byteenable -> ogpu_raster_unit_quad_buffer_addr_high_s1_translator:uav_byteenable
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_read;                       // ogpu_raster_unit_quad_buffer_addr_high_s1_agent:m0_read -> ogpu_raster_unit_quad_buffer_addr_high_s1_translator:uav_read
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_readdatavalid;              // ogpu_raster_unit_quad_buffer_addr_high_s1_translator:uav_readdatavalid -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent:m0_readdatavalid
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_lock;                       // ogpu_raster_unit_quad_buffer_addr_high_s1_agent:m0_lock -> ogpu_raster_unit_quad_buffer_addr_high_s1_translator:uav_lock
	wire   [31:0] ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_writedata;                  // ogpu_raster_unit_quad_buffer_addr_high_s1_agent:m0_writedata -> ogpu_raster_unit_quad_buffer_addr_high_s1_translator:uav_writedata
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_write;                      // ogpu_raster_unit_quad_buffer_addr_high_s1_agent:m0_write -> ogpu_raster_unit_quad_buffer_addr_high_s1_translator:uav_write
	wire    [2:0] ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_burstcount;                 // ogpu_raster_unit_quad_buffer_addr_high_s1_agent:m0_burstcount -> ogpu_raster_unit_quad_buffer_addr_high_s1_translator:uav_burstcount
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rf_source_valid;               // ogpu_raster_unit_quad_buffer_addr_high_s1_agent:rf_source_valid -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rf_source_data;                // ogpu_raster_unit_quad_buffer_addr_high_s1_agent:rf_source_data -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo:in_data
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rf_source_ready;               // ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo:in_ready -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent:rf_source_ready
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rf_source_startofpacket;       // ogpu_raster_unit_quad_buffer_addr_high_s1_agent:rf_source_startofpacket -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rf_source_endofpacket;         // ogpu_raster_unit_quad_buffer_addr_high_s1_agent:rf_source_endofpacket -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo_out_valid;            // ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo:out_valid -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo_out_data;             // ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo:out_data -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent:rf_sink_data
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo_out_ready;            // ogpu_raster_unit_quad_buffer_addr_high_s1_agent:rf_sink_ready -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo:out_ready
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo_out_startofpacket;    // ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo:out_startofpacket -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent:rf_sink_startofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo_out_endofpacket;      // ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo:out_endofpacket -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent:rf_sink_endofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo_src_valid;          // ogpu_raster_unit_quad_buffer_addr_high_s1_agent:rdata_fifo_src_valid -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo_src_data;           // ogpu_raster_unit_quad_buffer_addr_high_s1_agent:rdata_fifo_src_data -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo:in_data
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo_src_ready;          // ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo:in_ready -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_readdata;                    // ogpu_raster_unit_quad_buffer_addr_low_s1_translator:uav_readdata -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent:m0_readdata
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_waitrequest;                 // ogpu_raster_unit_quad_buffer_addr_low_s1_translator:uav_waitrequest -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent:m0_waitrequest
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_debugaccess;                 // ogpu_raster_unit_quad_buffer_addr_low_s1_agent:m0_debugaccess -> ogpu_raster_unit_quad_buffer_addr_low_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_address;                     // ogpu_raster_unit_quad_buffer_addr_low_s1_agent:m0_address -> ogpu_raster_unit_quad_buffer_addr_low_s1_translator:uav_address
	wire    [3:0] ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_byteenable;                  // ogpu_raster_unit_quad_buffer_addr_low_s1_agent:m0_byteenable -> ogpu_raster_unit_quad_buffer_addr_low_s1_translator:uav_byteenable
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_read;                        // ogpu_raster_unit_quad_buffer_addr_low_s1_agent:m0_read -> ogpu_raster_unit_quad_buffer_addr_low_s1_translator:uav_read
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_readdatavalid;               // ogpu_raster_unit_quad_buffer_addr_low_s1_translator:uav_readdatavalid -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent:m0_readdatavalid
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_lock;                        // ogpu_raster_unit_quad_buffer_addr_low_s1_agent:m0_lock -> ogpu_raster_unit_quad_buffer_addr_low_s1_translator:uav_lock
	wire   [31:0] ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_writedata;                   // ogpu_raster_unit_quad_buffer_addr_low_s1_agent:m0_writedata -> ogpu_raster_unit_quad_buffer_addr_low_s1_translator:uav_writedata
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_write;                       // ogpu_raster_unit_quad_buffer_addr_low_s1_agent:m0_write -> ogpu_raster_unit_quad_buffer_addr_low_s1_translator:uav_write
	wire    [2:0] ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_burstcount;                  // ogpu_raster_unit_quad_buffer_addr_low_s1_agent:m0_burstcount -> ogpu_raster_unit_quad_buffer_addr_low_s1_translator:uav_burstcount
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rf_source_valid;                // ogpu_raster_unit_quad_buffer_addr_low_s1_agent:rf_source_valid -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rf_source_data;                 // ogpu_raster_unit_quad_buffer_addr_low_s1_agent:rf_source_data -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo:in_data
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rf_source_ready;                // ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo:in_ready -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent:rf_source_ready
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rf_source_startofpacket;        // ogpu_raster_unit_quad_buffer_addr_low_s1_agent:rf_source_startofpacket -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rf_source_endofpacket;          // ogpu_raster_unit_quad_buffer_addr_low_s1_agent:rf_source_endofpacket -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo_out_valid;             // ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo:out_valid -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo_out_data;              // ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo:out_data -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent:rf_sink_data
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo_out_ready;             // ogpu_raster_unit_quad_buffer_addr_low_s1_agent:rf_sink_ready -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo:out_ready
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo_out_startofpacket;     // ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo:out_startofpacket -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent:rf_sink_startofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo_out_endofpacket;       // ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo:out_endofpacket -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent:rf_sink_endofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo_src_valid;           // ogpu_raster_unit_quad_buffer_addr_low_s1_agent:rdata_fifo_src_valid -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo_src_data;            // ogpu_raster_unit_quad_buffer_addr_low_s1_agent:rdata_fifo_src_data -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo:in_data
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo_src_ready;           // ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo:in_ready -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_raster_unit_depth_coef_c_s1_agent_m0_readdata;                            // ogpu_raster_unit_depth_coef_c_s1_translator:uav_readdata -> ogpu_raster_unit_depth_coef_c_s1_agent:m0_readdata
	wire          ogpu_raster_unit_depth_coef_c_s1_agent_m0_waitrequest;                         // ogpu_raster_unit_depth_coef_c_s1_translator:uav_waitrequest -> ogpu_raster_unit_depth_coef_c_s1_agent:m0_waitrequest
	wire          ogpu_raster_unit_depth_coef_c_s1_agent_m0_debugaccess;                         // ogpu_raster_unit_depth_coef_c_s1_agent:m0_debugaccess -> ogpu_raster_unit_depth_coef_c_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_raster_unit_depth_coef_c_s1_agent_m0_address;                             // ogpu_raster_unit_depth_coef_c_s1_agent:m0_address -> ogpu_raster_unit_depth_coef_c_s1_translator:uav_address
	wire    [3:0] ogpu_raster_unit_depth_coef_c_s1_agent_m0_byteenable;                          // ogpu_raster_unit_depth_coef_c_s1_agent:m0_byteenable -> ogpu_raster_unit_depth_coef_c_s1_translator:uav_byteenable
	wire          ogpu_raster_unit_depth_coef_c_s1_agent_m0_read;                                // ogpu_raster_unit_depth_coef_c_s1_agent:m0_read -> ogpu_raster_unit_depth_coef_c_s1_translator:uav_read
	wire          ogpu_raster_unit_depth_coef_c_s1_agent_m0_readdatavalid;                       // ogpu_raster_unit_depth_coef_c_s1_translator:uav_readdatavalid -> ogpu_raster_unit_depth_coef_c_s1_agent:m0_readdatavalid
	wire          ogpu_raster_unit_depth_coef_c_s1_agent_m0_lock;                                // ogpu_raster_unit_depth_coef_c_s1_agent:m0_lock -> ogpu_raster_unit_depth_coef_c_s1_translator:uav_lock
	wire   [31:0] ogpu_raster_unit_depth_coef_c_s1_agent_m0_writedata;                           // ogpu_raster_unit_depth_coef_c_s1_agent:m0_writedata -> ogpu_raster_unit_depth_coef_c_s1_translator:uav_writedata
	wire          ogpu_raster_unit_depth_coef_c_s1_agent_m0_write;                               // ogpu_raster_unit_depth_coef_c_s1_agent:m0_write -> ogpu_raster_unit_depth_coef_c_s1_translator:uav_write
	wire    [2:0] ogpu_raster_unit_depth_coef_c_s1_agent_m0_burstcount;                          // ogpu_raster_unit_depth_coef_c_s1_agent:m0_burstcount -> ogpu_raster_unit_depth_coef_c_s1_translator:uav_burstcount
	wire          ogpu_raster_unit_depth_coef_c_s1_agent_rf_source_valid;                        // ogpu_raster_unit_depth_coef_c_s1_agent:rf_source_valid -> ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_raster_unit_depth_coef_c_s1_agent_rf_source_data;                         // ogpu_raster_unit_depth_coef_c_s1_agent:rf_source_data -> ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo:in_data
	wire          ogpu_raster_unit_depth_coef_c_s1_agent_rf_source_ready;                        // ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo:in_ready -> ogpu_raster_unit_depth_coef_c_s1_agent:rf_source_ready
	wire          ogpu_raster_unit_depth_coef_c_s1_agent_rf_source_startofpacket;                // ogpu_raster_unit_depth_coef_c_s1_agent:rf_source_startofpacket -> ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_raster_unit_depth_coef_c_s1_agent_rf_source_endofpacket;                  // ogpu_raster_unit_depth_coef_c_s1_agent:rf_source_endofpacket -> ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo_out_valid;                     // ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo:out_valid -> ogpu_raster_unit_depth_coef_c_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo_out_data;                      // ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo:out_data -> ogpu_raster_unit_depth_coef_c_s1_agent:rf_sink_data
	wire          ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo_out_ready;                     // ogpu_raster_unit_depth_coef_c_s1_agent:rf_sink_ready -> ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo:out_ready
	wire          ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo_out_startofpacket;             // ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo:out_startofpacket -> ogpu_raster_unit_depth_coef_c_s1_agent:rf_sink_startofpacket
	wire          ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo_out_endofpacket;               // ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo:out_endofpacket -> ogpu_raster_unit_depth_coef_c_s1_agent:rf_sink_endofpacket
	wire          ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo_src_valid;                   // ogpu_raster_unit_depth_coef_c_s1_agent:rdata_fifo_src_valid -> ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo_src_data;                    // ogpu_raster_unit_depth_coef_c_s1_agent:rdata_fifo_src_data -> ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo:in_data
	wire          ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo_src_ready;                   // ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo:in_ready -> ogpu_raster_unit_depth_coef_c_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_raster_unit_depth_coef_b_s1_agent_m0_readdata;                            // ogpu_raster_unit_depth_coef_b_s1_translator:uav_readdata -> ogpu_raster_unit_depth_coef_b_s1_agent:m0_readdata
	wire          ogpu_raster_unit_depth_coef_b_s1_agent_m0_waitrequest;                         // ogpu_raster_unit_depth_coef_b_s1_translator:uav_waitrequest -> ogpu_raster_unit_depth_coef_b_s1_agent:m0_waitrequest
	wire          ogpu_raster_unit_depth_coef_b_s1_agent_m0_debugaccess;                         // ogpu_raster_unit_depth_coef_b_s1_agent:m0_debugaccess -> ogpu_raster_unit_depth_coef_b_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_raster_unit_depth_coef_b_s1_agent_m0_address;                             // ogpu_raster_unit_depth_coef_b_s1_agent:m0_address -> ogpu_raster_unit_depth_coef_b_s1_translator:uav_address
	wire    [3:0] ogpu_raster_unit_depth_coef_b_s1_agent_m0_byteenable;                          // ogpu_raster_unit_depth_coef_b_s1_agent:m0_byteenable -> ogpu_raster_unit_depth_coef_b_s1_translator:uav_byteenable
	wire          ogpu_raster_unit_depth_coef_b_s1_agent_m0_read;                                // ogpu_raster_unit_depth_coef_b_s1_agent:m0_read -> ogpu_raster_unit_depth_coef_b_s1_translator:uav_read
	wire          ogpu_raster_unit_depth_coef_b_s1_agent_m0_readdatavalid;                       // ogpu_raster_unit_depth_coef_b_s1_translator:uav_readdatavalid -> ogpu_raster_unit_depth_coef_b_s1_agent:m0_readdatavalid
	wire          ogpu_raster_unit_depth_coef_b_s1_agent_m0_lock;                                // ogpu_raster_unit_depth_coef_b_s1_agent:m0_lock -> ogpu_raster_unit_depth_coef_b_s1_translator:uav_lock
	wire   [31:0] ogpu_raster_unit_depth_coef_b_s1_agent_m0_writedata;                           // ogpu_raster_unit_depth_coef_b_s1_agent:m0_writedata -> ogpu_raster_unit_depth_coef_b_s1_translator:uav_writedata
	wire          ogpu_raster_unit_depth_coef_b_s1_agent_m0_write;                               // ogpu_raster_unit_depth_coef_b_s1_agent:m0_write -> ogpu_raster_unit_depth_coef_b_s1_translator:uav_write
	wire    [2:0] ogpu_raster_unit_depth_coef_b_s1_agent_m0_burstcount;                          // ogpu_raster_unit_depth_coef_b_s1_agent:m0_burstcount -> ogpu_raster_unit_depth_coef_b_s1_translator:uav_burstcount
	wire          ogpu_raster_unit_depth_coef_b_s1_agent_rf_source_valid;                        // ogpu_raster_unit_depth_coef_b_s1_agent:rf_source_valid -> ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_raster_unit_depth_coef_b_s1_agent_rf_source_data;                         // ogpu_raster_unit_depth_coef_b_s1_agent:rf_source_data -> ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo:in_data
	wire          ogpu_raster_unit_depth_coef_b_s1_agent_rf_source_ready;                        // ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo:in_ready -> ogpu_raster_unit_depth_coef_b_s1_agent:rf_source_ready
	wire          ogpu_raster_unit_depth_coef_b_s1_agent_rf_source_startofpacket;                // ogpu_raster_unit_depth_coef_b_s1_agent:rf_source_startofpacket -> ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_raster_unit_depth_coef_b_s1_agent_rf_source_endofpacket;                  // ogpu_raster_unit_depth_coef_b_s1_agent:rf_source_endofpacket -> ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo_out_valid;                     // ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo:out_valid -> ogpu_raster_unit_depth_coef_b_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo_out_data;                      // ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo:out_data -> ogpu_raster_unit_depth_coef_b_s1_agent:rf_sink_data
	wire          ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo_out_ready;                     // ogpu_raster_unit_depth_coef_b_s1_agent:rf_sink_ready -> ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo:out_ready
	wire          ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo_out_startofpacket;             // ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo:out_startofpacket -> ogpu_raster_unit_depth_coef_b_s1_agent:rf_sink_startofpacket
	wire          ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo_out_endofpacket;               // ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo:out_endofpacket -> ogpu_raster_unit_depth_coef_b_s1_agent:rf_sink_endofpacket
	wire          ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo_src_valid;                   // ogpu_raster_unit_depth_coef_b_s1_agent:rdata_fifo_src_valid -> ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo_src_data;                    // ogpu_raster_unit_depth_coef_b_s1_agent:rdata_fifo_src_data -> ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo:in_data
	wire          ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo_src_ready;                   // ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo:in_ready -> ogpu_raster_unit_depth_coef_b_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_raster_unit_depth_coef_a_s1_agent_m0_readdata;                            // ogpu_raster_unit_depth_coef_a_s1_translator:uav_readdata -> ogpu_raster_unit_depth_coef_a_s1_agent:m0_readdata
	wire          ogpu_raster_unit_depth_coef_a_s1_agent_m0_waitrequest;                         // ogpu_raster_unit_depth_coef_a_s1_translator:uav_waitrequest -> ogpu_raster_unit_depth_coef_a_s1_agent:m0_waitrequest
	wire          ogpu_raster_unit_depth_coef_a_s1_agent_m0_debugaccess;                         // ogpu_raster_unit_depth_coef_a_s1_agent:m0_debugaccess -> ogpu_raster_unit_depth_coef_a_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_raster_unit_depth_coef_a_s1_agent_m0_address;                             // ogpu_raster_unit_depth_coef_a_s1_agent:m0_address -> ogpu_raster_unit_depth_coef_a_s1_translator:uav_address
	wire    [3:0] ogpu_raster_unit_depth_coef_a_s1_agent_m0_byteenable;                          // ogpu_raster_unit_depth_coef_a_s1_agent:m0_byteenable -> ogpu_raster_unit_depth_coef_a_s1_translator:uav_byteenable
	wire          ogpu_raster_unit_depth_coef_a_s1_agent_m0_read;                                // ogpu_raster_unit_depth_coef_a_s1_agent:m0_read -> ogpu_raster_unit_depth_coef_a_s1_translator:uav_read
	wire          ogpu_raster_unit_depth_coef_a_s1_agent_m0_readdatavalid;                       // ogpu_raster_unit_depth_coef_a_s1_translator:uav_readdatavalid -> ogpu_raster_unit_depth_coef_a_s1_agent:m0_readdatavalid
	wire          ogpu_raster_unit_depth_coef_a_s1_agent_m0_lock;                                // ogpu_raster_unit_depth_coef_a_s1_agent:m0_lock -> ogpu_raster_unit_depth_coef_a_s1_translator:uav_lock
	wire   [31:0] ogpu_raster_unit_depth_coef_a_s1_agent_m0_writedata;                           // ogpu_raster_unit_depth_coef_a_s1_agent:m0_writedata -> ogpu_raster_unit_depth_coef_a_s1_translator:uav_writedata
	wire          ogpu_raster_unit_depth_coef_a_s1_agent_m0_write;                               // ogpu_raster_unit_depth_coef_a_s1_agent:m0_write -> ogpu_raster_unit_depth_coef_a_s1_translator:uav_write
	wire    [2:0] ogpu_raster_unit_depth_coef_a_s1_agent_m0_burstcount;                          // ogpu_raster_unit_depth_coef_a_s1_agent:m0_burstcount -> ogpu_raster_unit_depth_coef_a_s1_translator:uav_burstcount
	wire          ogpu_raster_unit_depth_coef_a_s1_agent_rf_source_valid;                        // ogpu_raster_unit_depth_coef_a_s1_agent:rf_source_valid -> ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_raster_unit_depth_coef_a_s1_agent_rf_source_data;                         // ogpu_raster_unit_depth_coef_a_s1_agent:rf_source_data -> ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo:in_data
	wire          ogpu_raster_unit_depth_coef_a_s1_agent_rf_source_ready;                        // ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo:in_ready -> ogpu_raster_unit_depth_coef_a_s1_agent:rf_source_ready
	wire          ogpu_raster_unit_depth_coef_a_s1_agent_rf_source_startofpacket;                // ogpu_raster_unit_depth_coef_a_s1_agent:rf_source_startofpacket -> ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_raster_unit_depth_coef_a_s1_agent_rf_source_endofpacket;                  // ogpu_raster_unit_depth_coef_a_s1_agent:rf_source_endofpacket -> ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo_out_valid;                     // ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo:out_valid -> ogpu_raster_unit_depth_coef_a_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo_out_data;                      // ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo:out_data -> ogpu_raster_unit_depth_coef_a_s1_agent:rf_sink_data
	wire          ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo_out_ready;                     // ogpu_raster_unit_depth_coef_a_s1_agent:rf_sink_ready -> ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo:out_ready
	wire          ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo_out_startofpacket;             // ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo:out_startofpacket -> ogpu_raster_unit_depth_coef_a_s1_agent:rf_sink_startofpacket
	wire          ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo_out_endofpacket;               // ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo:out_endofpacket -> ogpu_raster_unit_depth_coef_a_s1_agent:rf_sink_endofpacket
	wire          ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo_src_valid;                   // ogpu_raster_unit_depth_coef_a_s1_agent:rdata_fifo_src_valid -> ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo_src_data;                    // ogpu_raster_unit_depth_coef_a_s1_agent:rdata_fifo_src_data -> ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo:in_data
	wire          ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo_src_ready;                   // ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo:in_ready -> ogpu_raster_unit_depth_coef_a_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_raster_unit_tile1_s1_agent_m0_readdata;                                   // ogpu_raster_unit_tile1_s1_translator:uav_readdata -> ogpu_raster_unit_tile1_s1_agent:m0_readdata
	wire          ogpu_raster_unit_tile1_s1_agent_m0_waitrequest;                                // ogpu_raster_unit_tile1_s1_translator:uav_waitrequest -> ogpu_raster_unit_tile1_s1_agent:m0_waitrequest
	wire          ogpu_raster_unit_tile1_s1_agent_m0_debugaccess;                                // ogpu_raster_unit_tile1_s1_agent:m0_debugaccess -> ogpu_raster_unit_tile1_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_raster_unit_tile1_s1_agent_m0_address;                                    // ogpu_raster_unit_tile1_s1_agent:m0_address -> ogpu_raster_unit_tile1_s1_translator:uav_address
	wire    [3:0] ogpu_raster_unit_tile1_s1_agent_m0_byteenable;                                 // ogpu_raster_unit_tile1_s1_agent:m0_byteenable -> ogpu_raster_unit_tile1_s1_translator:uav_byteenable
	wire          ogpu_raster_unit_tile1_s1_agent_m0_read;                                       // ogpu_raster_unit_tile1_s1_agent:m0_read -> ogpu_raster_unit_tile1_s1_translator:uav_read
	wire          ogpu_raster_unit_tile1_s1_agent_m0_readdatavalid;                              // ogpu_raster_unit_tile1_s1_translator:uav_readdatavalid -> ogpu_raster_unit_tile1_s1_agent:m0_readdatavalid
	wire          ogpu_raster_unit_tile1_s1_agent_m0_lock;                                       // ogpu_raster_unit_tile1_s1_agent:m0_lock -> ogpu_raster_unit_tile1_s1_translator:uav_lock
	wire   [31:0] ogpu_raster_unit_tile1_s1_agent_m0_writedata;                                  // ogpu_raster_unit_tile1_s1_agent:m0_writedata -> ogpu_raster_unit_tile1_s1_translator:uav_writedata
	wire          ogpu_raster_unit_tile1_s1_agent_m0_write;                                      // ogpu_raster_unit_tile1_s1_agent:m0_write -> ogpu_raster_unit_tile1_s1_translator:uav_write
	wire    [2:0] ogpu_raster_unit_tile1_s1_agent_m0_burstcount;                                 // ogpu_raster_unit_tile1_s1_agent:m0_burstcount -> ogpu_raster_unit_tile1_s1_translator:uav_burstcount
	wire          ogpu_raster_unit_tile1_s1_agent_rf_source_valid;                               // ogpu_raster_unit_tile1_s1_agent:rf_source_valid -> ogpu_raster_unit_tile1_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_raster_unit_tile1_s1_agent_rf_source_data;                                // ogpu_raster_unit_tile1_s1_agent:rf_source_data -> ogpu_raster_unit_tile1_s1_agent_rsp_fifo:in_data
	wire          ogpu_raster_unit_tile1_s1_agent_rf_source_ready;                               // ogpu_raster_unit_tile1_s1_agent_rsp_fifo:in_ready -> ogpu_raster_unit_tile1_s1_agent:rf_source_ready
	wire          ogpu_raster_unit_tile1_s1_agent_rf_source_startofpacket;                       // ogpu_raster_unit_tile1_s1_agent:rf_source_startofpacket -> ogpu_raster_unit_tile1_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_raster_unit_tile1_s1_agent_rf_source_endofpacket;                         // ogpu_raster_unit_tile1_s1_agent:rf_source_endofpacket -> ogpu_raster_unit_tile1_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_raster_unit_tile1_s1_agent_rsp_fifo_out_valid;                            // ogpu_raster_unit_tile1_s1_agent_rsp_fifo:out_valid -> ogpu_raster_unit_tile1_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_raster_unit_tile1_s1_agent_rsp_fifo_out_data;                             // ogpu_raster_unit_tile1_s1_agent_rsp_fifo:out_data -> ogpu_raster_unit_tile1_s1_agent:rf_sink_data
	wire          ogpu_raster_unit_tile1_s1_agent_rsp_fifo_out_ready;                            // ogpu_raster_unit_tile1_s1_agent:rf_sink_ready -> ogpu_raster_unit_tile1_s1_agent_rsp_fifo:out_ready
	wire          ogpu_raster_unit_tile1_s1_agent_rsp_fifo_out_startofpacket;                    // ogpu_raster_unit_tile1_s1_agent_rsp_fifo:out_startofpacket -> ogpu_raster_unit_tile1_s1_agent:rf_sink_startofpacket
	wire          ogpu_raster_unit_tile1_s1_agent_rsp_fifo_out_endofpacket;                      // ogpu_raster_unit_tile1_s1_agent_rsp_fifo:out_endofpacket -> ogpu_raster_unit_tile1_s1_agent:rf_sink_endofpacket
	wire          ogpu_raster_unit_tile1_s1_agent_rdata_fifo_src_valid;                          // ogpu_raster_unit_tile1_s1_agent:rdata_fifo_src_valid -> ogpu_raster_unit_tile1_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_raster_unit_tile1_s1_agent_rdata_fifo_src_data;                           // ogpu_raster_unit_tile1_s1_agent:rdata_fifo_src_data -> ogpu_raster_unit_tile1_s1_agent_rdata_fifo:in_data
	wire          ogpu_raster_unit_tile1_s1_agent_rdata_fifo_src_ready;                          // ogpu_raster_unit_tile1_s1_agent_rdata_fifo:in_ready -> ogpu_raster_unit_tile1_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_raster_unit_tile0_s1_agent_m0_readdata;                                   // ogpu_raster_unit_tile0_s1_translator:uav_readdata -> ogpu_raster_unit_tile0_s1_agent:m0_readdata
	wire          ogpu_raster_unit_tile0_s1_agent_m0_waitrequest;                                // ogpu_raster_unit_tile0_s1_translator:uav_waitrequest -> ogpu_raster_unit_tile0_s1_agent:m0_waitrequest
	wire          ogpu_raster_unit_tile0_s1_agent_m0_debugaccess;                                // ogpu_raster_unit_tile0_s1_agent:m0_debugaccess -> ogpu_raster_unit_tile0_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_raster_unit_tile0_s1_agent_m0_address;                                    // ogpu_raster_unit_tile0_s1_agent:m0_address -> ogpu_raster_unit_tile0_s1_translator:uav_address
	wire    [3:0] ogpu_raster_unit_tile0_s1_agent_m0_byteenable;                                 // ogpu_raster_unit_tile0_s1_agent:m0_byteenable -> ogpu_raster_unit_tile0_s1_translator:uav_byteenable
	wire          ogpu_raster_unit_tile0_s1_agent_m0_read;                                       // ogpu_raster_unit_tile0_s1_agent:m0_read -> ogpu_raster_unit_tile0_s1_translator:uav_read
	wire          ogpu_raster_unit_tile0_s1_agent_m0_readdatavalid;                              // ogpu_raster_unit_tile0_s1_translator:uav_readdatavalid -> ogpu_raster_unit_tile0_s1_agent:m0_readdatavalid
	wire          ogpu_raster_unit_tile0_s1_agent_m0_lock;                                       // ogpu_raster_unit_tile0_s1_agent:m0_lock -> ogpu_raster_unit_tile0_s1_translator:uav_lock
	wire   [31:0] ogpu_raster_unit_tile0_s1_agent_m0_writedata;                                  // ogpu_raster_unit_tile0_s1_agent:m0_writedata -> ogpu_raster_unit_tile0_s1_translator:uav_writedata
	wire          ogpu_raster_unit_tile0_s1_agent_m0_write;                                      // ogpu_raster_unit_tile0_s1_agent:m0_write -> ogpu_raster_unit_tile0_s1_translator:uav_write
	wire    [2:0] ogpu_raster_unit_tile0_s1_agent_m0_burstcount;                                 // ogpu_raster_unit_tile0_s1_agent:m0_burstcount -> ogpu_raster_unit_tile0_s1_translator:uav_burstcount
	wire          ogpu_raster_unit_tile0_s1_agent_rf_source_valid;                               // ogpu_raster_unit_tile0_s1_agent:rf_source_valid -> ogpu_raster_unit_tile0_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_raster_unit_tile0_s1_agent_rf_source_data;                                // ogpu_raster_unit_tile0_s1_agent:rf_source_data -> ogpu_raster_unit_tile0_s1_agent_rsp_fifo:in_data
	wire          ogpu_raster_unit_tile0_s1_agent_rf_source_ready;                               // ogpu_raster_unit_tile0_s1_agent_rsp_fifo:in_ready -> ogpu_raster_unit_tile0_s1_agent:rf_source_ready
	wire          ogpu_raster_unit_tile0_s1_agent_rf_source_startofpacket;                       // ogpu_raster_unit_tile0_s1_agent:rf_source_startofpacket -> ogpu_raster_unit_tile0_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_raster_unit_tile0_s1_agent_rf_source_endofpacket;                         // ogpu_raster_unit_tile0_s1_agent:rf_source_endofpacket -> ogpu_raster_unit_tile0_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_raster_unit_tile0_s1_agent_rsp_fifo_out_valid;                            // ogpu_raster_unit_tile0_s1_agent_rsp_fifo:out_valid -> ogpu_raster_unit_tile0_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_raster_unit_tile0_s1_agent_rsp_fifo_out_data;                             // ogpu_raster_unit_tile0_s1_agent_rsp_fifo:out_data -> ogpu_raster_unit_tile0_s1_agent:rf_sink_data
	wire          ogpu_raster_unit_tile0_s1_agent_rsp_fifo_out_ready;                            // ogpu_raster_unit_tile0_s1_agent:rf_sink_ready -> ogpu_raster_unit_tile0_s1_agent_rsp_fifo:out_ready
	wire          ogpu_raster_unit_tile0_s1_agent_rsp_fifo_out_startofpacket;                    // ogpu_raster_unit_tile0_s1_agent_rsp_fifo:out_startofpacket -> ogpu_raster_unit_tile0_s1_agent:rf_sink_startofpacket
	wire          ogpu_raster_unit_tile0_s1_agent_rsp_fifo_out_endofpacket;                      // ogpu_raster_unit_tile0_s1_agent_rsp_fifo:out_endofpacket -> ogpu_raster_unit_tile0_s1_agent:rf_sink_endofpacket
	wire          ogpu_raster_unit_tile0_s1_agent_rdata_fifo_src_valid;                          // ogpu_raster_unit_tile0_s1_agent:rdata_fifo_src_valid -> ogpu_raster_unit_tile0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_raster_unit_tile0_s1_agent_rdata_fifo_src_data;                           // ogpu_raster_unit_tile0_s1_agent:rdata_fifo_src_data -> ogpu_raster_unit_tile0_s1_agent_rdata_fifo:in_data
	wire          ogpu_raster_unit_tile0_s1_agent_rdata_fifo_src_ready;                          // ogpu_raster_unit_tile0_s1_agent_rdata_fifo:in_ready -> ogpu_raster_unit_tile0_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_raster_unit_clip_rect1_s1_agent_m0_readdata;                              // ogpu_raster_unit_clip_rect1_s1_translator:uav_readdata -> ogpu_raster_unit_clip_rect1_s1_agent:m0_readdata
	wire          ogpu_raster_unit_clip_rect1_s1_agent_m0_waitrequest;                           // ogpu_raster_unit_clip_rect1_s1_translator:uav_waitrequest -> ogpu_raster_unit_clip_rect1_s1_agent:m0_waitrequest
	wire          ogpu_raster_unit_clip_rect1_s1_agent_m0_debugaccess;                           // ogpu_raster_unit_clip_rect1_s1_agent:m0_debugaccess -> ogpu_raster_unit_clip_rect1_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_raster_unit_clip_rect1_s1_agent_m0_address;                               // ogpu_raster_unit_clip_rect1_s1_agent:m0_address -> ogpu_raster_unit_clip_rect1_s1_translator:uav_address
	wire    [3:0] ogpu_raster_unit_clip_rect1_s1_agent_m0_byteenable;                            // ogpu_raster_unit_clip_rect1_s1_agent:m0_byteenable -> ogpu_raster_unit_clip_rect1_s1_translator:uav_byteenable
	wire          ogpu_raster_unit_clip_rect1_s1_agent_m0_read;                                  // ogpu_raster_unit_clip_rect1_s1_agent:m0_read -> ogpu_raster_unit_clip_rect1_s1_translator:uav_read
	wire          ogpu_raster_unit_clip_rect1_s1_agent_m0_readdatavalid;                         // ogpu_raster_unit_clip_rect1_s1_translator:uav_readdatavalid -> ogpu_raster_unit_clip_rect1_s1_agent:m0_readdatavalid
	wire          ogpu_raster_unit_clip_rect1_s1_agent_m0_lock;                                  // ogpu_raster_unit_clip_rect1_s1_agent:m0_lock -> ogpu_raster_unit_clip_rect1_s1_translator:uav_lock
	wire   [31:0] ogpu_raster_unit_clip_rect1_s1_agent_m0_writedata;                             // ogpu_raster_unit_clip_rect1_s1_agent:m0_writedata -> ogpu_raster_unit_clip_rect1_s1_translator:uav_writedata
	wire          ogpu_raster_unit_clip_rect1_s1_agent_m0_write;                                 // ogpu_raster_unit_clip_rect1_s1_agent:m0_write -> ogpu_raster_unit_clip_rect1_s1_translator:uav_write
	wire    [2:0] ogpu_raster_unit_clip_rect1_s1_agent_m0_burstcount;                            // ogpu_raster_unit_clip_rect1_s1_agent:m0_burstcount -> ogpu_raster_unit_clip_rect1_s1_translator:uav_burstcount
	wire          ogpu_raster_unit_clip_rect1_s1_agent_rf_source_valid;                          // ogpu_raster_unit_clip_rect1_s1_agent:rf_source_valid -> ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_raster_unit_clip_rect1_s1_agent_rf_source_data;                           // ogpu_raster_unit_clip_rect1_s1_agent:rf_source_data -> ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo:in_data
	wire          ogpu_raster_unit_clip_rect1_s1_agent_rf_source_ready;                          // ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo:in_ready -> ogpu_raster_unit_clip_rect1_s1_agent:rf_source_ready
	wire          ogpu_raster_unit_clip_rect1_s1_agent_rf_source_startofpacket;                  // ogpu_raster_unit_clip_rect1_s1_agent:rf_source_startofpacket -> ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_raster_unit_clip_rect1_s1_agent_rf_source_endofpacket;                    // ogpu_raster_unit_clip_rect1_s1_agent:rf_source_endofpacket -> ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo_out_valid;                       // ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo:out_valid -> ogpu_raster_unit_clip_rect1_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo_out_data;                        // ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo:out_data -> ogpu_raster_unit_clip_rect1_s1_agent:rf_sink_data
	wire          ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo_out_ready;                       // ogpu_raster_unit_clip_rect1_s1_agent:rf_sink_ready -> ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo:out_ready
	wire          ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo_out_startofpacket;               // ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo:out_startofpacket -> ogpu_raster_unit_clip_rect1_s1_agent:rf_sink_startofpacket
	wire          ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo_out_endofpacket;                 // ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo:out_endofpacket -> ogpu_raster_unit_clip_rect1_s1_agent:rf_sink_endofpacket
	wire          ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo_src_valid;                     // ogpu_raster_unit_clip_rect1_s1_agent:rdata_fifo_src_valid -> ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo_src_data;                      // ogpu_raster_unit_clip_rect1_s1_agent:rdata_fifo_src_data -> ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo:in_data
	wire          ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo_src_ready;                     // ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo:in_ready -> ogpu_raster_unit_clip_rect1_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_raster_unit_clip_rect0_s1_agent_m0_readdata;                              // ogpu_raster_unit_clip_rect0_s1_translator:uav_readdata -> ogpu_raster_unit_clip_rect0_s1_agent:m0_readdata
	wire          ogpu_raster_unit_clip_rect0_s1_agent_m0_waitrequest;                           // ogpu_raster_unit_clip_rect0_s1_translator:uav_waitrequest -> ogpu_raster_unit_clip_rect0_s1_agent:m0_waitrequest
	wire          ogpu_raster_unit_clip_rect0_s1_agent_m0_debugaccess;                           // ogpu_raster_unit_clip_rect0_s1_agent:m0_debugaccess -> ogpu_raster_unit_clip_rect0_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_raster_unit_clip_rect0_s1_agent_m0_address;                               // ogpu_raster_unit_clip_rect0_s1_agent:m0_address -> ogpu_raster_unit_clip_rect0_s1_translator:uav_address
	wire    [3:0] ogpu_raster_unit_clip_rect0_s1_agent_m0_byteenable;                            // ogpu_raster_unit_clip_rect0_s1_agent:m0_byteenable -> ogpu_raster_unit_clip_rect0_s1_translator:uav_byteenable
	wire          ogpu_raster_unit_clip_rect0_s1_agent_m0_read;                                  // ogpu_raster_unit_clip_rect0_s1_agent:m0_read -> ogpu_raster_unit_clip_rect0_s1_translator:uav_read
	wire          ogpu_raster_unit_clip_rect0_s1_agent_m0_readdatavalid;                         // ogpu_raster_unit_clip_rect0_s1_translator:uav_readdatavalid -> ogpu_raster_unit_clip_rect0_s1_agent:m0_readdatavalid
	wire          ogpu_raster_unit_clip_rect0_s1_agent_m0_lock;                                  // ogpu_raster_unit_clip_rect0_s1_agent:m0_lock -> ogpu_raster_unit_clip_rect0_s1_translator:uav_lock
	wire   [31:0] ogpu_raster_unit_clip_rect0_s1_agent_m0_writedata;                             // ogpu_raster_unit_clip_rect0_s1_agent:m0_writedata -> ogpu_raster_unit_clip_rect0_s1_translator:uav_writedata
	wire          ogpu_raster_unit_clip_rect0_s1_agent_m0_write;                                 // ogpu_raster_unit_clip_rect0_s1_agent:m0_write -> ogpu_raster_unit_clip_rect0_s1_translator:uav_write
	wire    [2:0] ogpu_raster_unit_clip_rect0_s1_agent_m0_burstcount;                            // ogpu_raster_unit_clip_rect0_s1_agent:m0_burstcount -> ogpu_raster_unit_clip_rect0_s1_translator:uav_burstcount
	wire          ogpu_raster_unit_clip_rect0_s1_agent_rf_source_valid;                          // ogpu_raster_unit_clip_rect0_s1_agent:rf_source_valid -> ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_raster_unit_clip_rect0_s1_agent_rf_source_data;                           // ogpu_raster_unit_clip_rect0_s1_agent:rf_source_data -> ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo:in_data
	wire          ogpu_raster_unit_clip_rect0_s1_agent_rf_source_ready;                          // ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo:in_ready -> ogpu_raster_unit_clip_rect0_s1_agent:rf_source_ready
	wire          ogpu_raster_unit_clip_rect0_s1_agent_rf_source_startofpacket;                  // ogpu_raster_unit_clip_rect0_s1_agent:rf_source_startofpacket -> ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_raster_unit_clip_rect0_s1_agent_rf_source_endofpacket;                    // ogpu_raster_unit_clip_rect0_s1_agent:rf_source_endofpacket -> ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo_out_valid;                       // ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo:out_valid -> ogpu_raster_unit_clip_rect0_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo_out_data;                        // ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo:out_data -> ogpu_raster_unit_clip_rect0_s1_agent:rf_sink_data
	wire          ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo_out_ready;                       // ogpu_raster_unit_clip_rect0_s1_agent:rf_sink_ready -> ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo:out_ready
	wire          ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo_out_startofpacket;               // ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo:out_startofpacket -> ogpu_raster_unit_clip_rect0_s1_agent:rf_sink_startofpacket
	wire          ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo_out_endofpacket;                 // ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo:out_endofpacket -> ogpu_raster_unit_clip_rect0_s1_agent:rf_sink_endofpacket
	wire          ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo_src_valid;                     // ogpu_raster_unit_clip_rect0_s1_agent:rdata_fifo_src_valid -> ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo_src_data;                      // ogpu_raster_unit_clip_rect0_s1_agent:rdata_fifo_src_data -> ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo:in_data
	wire          ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo_src_ready;                     // ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo:in_ready -> ogpu_raster_unit_clip_rect0_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_raster_unit_command_s1_agent_m0_readdata;                                 // ogpu_raster_unit_command_s1_translator:uav_readdata -> ogpu_raster_unit_command_s1_agent:m0_readdata
	wire          ogpu_raster_unit_command_s1_agent_m0_waitrequest;                              // ogpu_raster_unit_command_s1_translator:uav_waitrequest -> ogpu_raster_unit_command_s1_agent:m0_waitrequest
	wire          ogpu_raster_unit_command_s1_agent_m0_debugaccess;                              // ogpu_raster_unit_command_s1_agent:m0_debugaccess -> ogpu_raster_unit_command_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_raster_unit_command_s1_agent_m0_address;                                  // ogpu_raster_unit_command_s1_agent:m0_address -> ogpu_raster_unit_command_s1_translator:uav_address
	wire    [3:0] ogpu_raster_unit_command_s1_agent_m0_byteenable;                               // ogpu_raster_unit_command_s1_agent:m0_byteenable -> ogpu_raster_unit_command_s1_translator:uav_byteenable
	wire          ogpu_raster_unit_command_s1_agent_m0_read;                                     // ogpu_raster_unit_command_s1_agent:m0_read -> ogpu_raster_unit_command_s1_translator:uav_read
	wire          ogpu_raster_unit_command_s1_agent_m0_readdatavalid;                            // ogpu_raster_unit_command_s1_translator:uav_readdatavalid -> ogpu_raster_unit_command_s1_agent:m0_readdatavalid
	wire          ogpu_raster_unit_command_s1_agent_m0_lock;                                     // ogpu_raster_unit_command_s1_agent:m0_lock -> ogpu_raster_unit_command_s1_translator:uav_lock
	wire   [31:0] ogpu_raster_unit_command_s1_agent_m0_writedata;                                // ogpu_raster_unit_command_s1_agent:m0_writedata -> ogpu_raster_unit_command_s1_translator:uav_writedata
	wire          ogpu_raster_unit_command_s1_agent_m0_write;                                    // ogpu_raster_unit_command_s1_agent:m0_write -> ogpu_raster_unit_command_s1_translator:uav_write
	wire    [2:0] ogpu_raster_unit_command_s1_agent_m0_burstcount;                               // ogpu_raster_unit_command_s1_agent:m0_burstcount -> ogpu_raster_unit_command_s1_translator:uav_burstcount
	wire          ogpu_raster_unit_command_s1_agent_rf_source_valid;                             // ogpu_raster_unit_command_s1_agent:rf_source_valid -> ogpu_raster_unit_command_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_raster_unit_command_s1_agent_rf_source_data;                              // ogpu_raster_unit_command_s1_agent:rf_source_data -> ogpu_raster_unit_command_s1_agent_rsp_fifo:in_data
	wire          ogpu_raster_unit_command_s1_agent_rf_source_ready;                             // ogpu_raster_unit_command_s1_agent_rsp_fifo:in_ready -> ogpu_raster_unit_command_s1_agent:rf_source_ready
	wire          ogpu_raster_unit_command_s1_agent_rf_source_startofpacket;                     // ogpu_raster_unit_command_s1_agent:rf_source_startofpacket -> ogpu_raster_unit_command_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_raster_unit_command_s1_agent_rf_source_endofpacket;                       // ogpu_raster_unit_command_s1_agent:rf_source_endofpacket -> ogpu_raster_unit_command_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_raster_unit_command_s1_agent_rsp_fifo_out_valid;                          // ogpu_raster_unit_command_s1_agent_rsp_fifo:out_valid -> ogpu_raster_unit_command_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_raster_unit_command_s1_agent_rsp_fifo_out_data;                           // ogpu_raster_unit_command_s1_agent_rsp_fifo:out_data -> ogpu_raster_unit_command_s1_agent:rf_sink_data
	wire          ogpu_raster_unit_command_s1_agent_rsp_fifo_out_ready;                          // ogpu_raster_unit_command_s1_agent:rf_sink_ready -> ogpu_raster_unit_command_s1_agent_rsp_fifo:out_ready
	wire          ogpu_raster_unit_command_s1_agent_rsp_fifo_out_startofpacket;                  // ogpu_raster_unit_command_s1_agent_rsp_fifo:out_startofpacket -> ogpu_raster_unit_command_s1_agent:rf_sink_startofpacket
	wire          ogpu_raster_unit_command_s1_agent_rsp_fifo_out_endofpacket;                    // ogpu_raster_unit_command_s1_agent_rsp_fifo:out_endofpacket -> ogpu_raster_unit_command_s1_agent:rf_sink_endofpacket
	wire          ogpu_raster_unit_command_s1_agent_rdata_fifo_src_valid;                        // ogpu_raster_unit_command_s1_agent:rdata_fifo_src_valid -> ogpu_raster_unit_command_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_raster_unit_command_s1_agent_rdata_fifo_src_data;                         // ogpu_raster_unit_command_s1_agent:rdata_fifo_src_data -> ogpu_raster_unit_command_s1_agent_rdata_fifo:in_data
	wire          ogpu_raster_unit_command_s1_agent_rdata_fifo_src_ready;                        // ogpu_raster_unit_command_s1_agent_rdata_fifo:in_ready -> ogpu_raster_unit_command_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_raster_unit_status_s1_agent_m0_readdata;                                  // ogpu_raster_unit_status_s1_translator:uav_readdata -> ogpu_raster_unit_status_s1_agent:m0_readdata
	wire          ogpu_raster_unit_status_s1_agent_m0_waitrequest;                               // ogpu_raster_unit_status_s1_translator:uav_waitrequest -> ogpu_raster_unit_status_s1_agent:m0_waitrequest
	wire          ogpu_raster_unit_status_s1_agent_m0_debugaccess;                               // ogpu_raster_unit_status_s1_agent:m0_debugaccess -> ogpu_raster_unit_status_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_raster_unit_status_s1_agent_m0_address;                                   // ogpu_raster_unit_status_s1_agent:m0_address -> ogpu_raster_unit_status_s1_translator:uav_address
	wire    [3:0] ogpu_raster_unit_status_s1_agent_m0_byteenable;                                // ogpu_raster_unit_status_s1_agent:m0_byteenable -> ogpu_raster_unit_status_s1_translator:uav_byteenable
	wire          ogpu_raster_unit_status_s1_agent_m0_read;                                      // ogpu_raster_unit_status_s1_agent:m0_read -> ogpu_raster_unit_status_s1_translator:uav_read
	wire          ogpu_raster_unit_status_s1_agent_m0_readdatavalid;                             // ogpu_raster_unit_status_s1_translator:uav_readdatavalid -> ogpu_raster_unit_status_s1_agent:m0_readdatavalid
	wire          ogpu_raster_unit_status_s1_agent_m0_lock;                                      // ogpu_raster_unit_status_s1_agent:m0_lock -> ogpu_raster_unit_status_s1_translator:uav_lock
	wire   [31:0] ogpu_raster_unit_status_s1_agent_m0_writedata;                                 // ogpu_raster_unit_status_s1_agent:m0_writedata -> ogpu_raster_unit_status_s1_translator:uav_writedata
	wire          ogpu_raster_unit_status_s1_agent_m0_write;                                     // ogpu_raster_unit_status_s1_agent:m0_write -> ogpu_raster_unit_status_s1_translator:uav_write
	wire    [2:0] ogpu_raster_unit_status_s1_agent_m0_burstcount;                                // ogpu_raster_unit_status_s1_agent:m0_burstcount -> ogpu_raster_unit_status_s1_translator:uav_burstcount
	wire          ogpu_raster_unit_status_s1_agent_rf_source_valid;                              // ogpu_raster_unit_status_s1_agent:rf_source_valid -> ogpu_raster_unit_status_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_raster_unit_status_s1_agent_rf_source_data;                               // ogpu_raster_unit_status_s1_agent:rf_source_data -> ogpu_raster_unit_status_s1_agent_rsp_fifo:in_data
	wire          ogpu_raster_unit_status_s1_agent_rf_source_ready;                              // ogpu_raster_unit_status_s1_agent_rsp_fifo:in_ready -> ogpu_raster_unit_status_s1_agent:rf_source_ready
	wire          ogpu_raster_unit_status_s1_agent_rf_source_startofpacket;                      // ogpu_raster_unit_status_s1_agent:rf_source_startofpacket -> ogpu_raster_unit_status_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_raster_unit_status_s1_agent_rf_source_endofpacket;                        // ogpu_raster_unit_status_s1_agent:rf_source_endofpacket -> ogpu_raster_unit_status_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_raster_unit_status_s1_agent_rsp_fifo_out_valid;                           // ogpu_raster_unit_status_s1_agent_rsp_fifo:out_valid -> ogpu_raster_unit_status_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_raster_unit_status_s1_agent_rsp_fifo_out_data;                            // ogpu_raster_unit_status_s1_agent_rsp_fifo:out_data -> ogpu_raster_unit_status_s1_agent:rf_sink_data
	wire          ogpu_raster_unit_status_s1_agent_rsp_fifo_out_ready;                           // ogpu_raster_unit_status_s1_agent:rf_sink_ready -> ogpu_raster_unit_status_s1_agent_rsp_fifo:out_ready
	wire          ogpu_raster_unit_status_s1_agent_rsp_fifo_out_startofpacket;                   // ogpu_raster_unit_status_s1_agent_rsp_fifo:out_startofpacket -> ogpu_raster_unit_status_s1_agent:rf_sink_startofpacket
	wire          ogpu_raster_unit_status_s1_agent_rsp_fifo_out_endofpacket;                     // ogpu_raster_unit_status_s1_agent_rsp_fifo:out_endofpacket -> ogpu_raster_unit_status_s1_agent:rf_sink_endofpacket
	wire          ogpu_raster_unit_status_s1_agent_rdata_fifo_src_valid;                         // ogpu_raster_unit_status_s1_agent:rdata_fifo_src_valid -> ogpu_raster_unit_status_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_raster_unit_status_s1_agent_rdata_fifo_src_data;                          // ogpu_raster_unit_status_s1_agent:rdata_fifo_src_data -> ogpu_raster_unit_status_s1_agent_rdata_fifo:in_data
	wire          ogpu_raster_unit_status_s1_agent_rdata_fifo_src_ready;                         // ogpu_raster_unit_status_s1_agent_rdata_fifo:in_ready -> ogpu_raster_unit_status_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_raster_unit_v2z_s1_agent_m0_readdata;                                     // ogpu_raster_unit_v2z_s1_translator:uav_readdata -> ogpu_raster_unit_v2z_s1_agent:m0_readdata
	wire          ogpu_raster_unit_v2z_s1_agent_m0_waitrequest;                                  // ogpu_raster_unit_v2z_s1_translator:uav_waitrequest -> ogpu_raster_unit_v2z_s1_agent:m0_waitrequest
	wire          ogpu_raster_unit_v2z_s1_agent_m0_debugaccess;                                  // ogpu_raster_unit_v2z_s1_agent:m0_debugaccess -> ogpu_raster_unit_v2z_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_raster_unit_v2z_s1_agent_m0_address;                                      // ogpu_raster_unit_v2z_s1_agent:m0_address -> ogpu_raster_unit_v2z_s1_translator:uav_address
	wire    [3:0] ogpu_raster_unit_v2z_s1_agent_m0_byteenable;                                   // ogpu_raster_unit_v2z_s1_agent:m0_byteenable -> ogpu_raster_unit_v2z_s1_translator:uav_byteenable
	wire          ogpu_raster_unit_v2z_s1_agent_m0_read;                                         // ogpu_raster_unit_v2z_s1_agent:m0_read -> ogpu_raster_unit_v2z_s1_translator:uav_read
	wire          ogpu_raster_unit_v2z_s1_agent_m0_readdatavalid;                                // ogpu_raster_unit_v2z_s1_translator:uav_readdatavalid -> ogpu_raster_unit_v2z_s1_agent:m0_readdatavalid
	wire          ogpu_raster_unit_v2z_s1_agent_m0_lock;                                         // ogpu_raster_unit_v2z_s1_agent:m0_lock -> ogpu_raster_unit_v2z_s1_translator:uav_lock
	wire   [31:0] ogpu_raster_unit_v2z_s1_agent_m0_writedata;                                    // ogpu_raster_unit_v2z_s1_agent:m0_writedata -> ogpu_raster_unit_v2z_s1_translator:uav_writedata
	wire          ogpu_raster_unit_v2z_s1_agent_m0_write;                                        // ogpu_raster_unit_v2z_s1_agent:m0_write -> ogpu_raster_unit_v2z_s1_translator:uav_write
	wire    [2:0] ogpu_raster_unit_v2z_s1_agent_m0_burstcount;                                   // ogpu_raster_unit_v2z_s1_agent:m0_burstcount -> ogpu_raster_unit_v2z_s1_translator:uav_burstcount
	wire          ogpu_raster_unit_v2z_s1_agent_rf_source_valid;                                 // ogpu_raster_unit_v2z_s1_agent:rf_source_valid -> ogpu_raster_unit_v2z_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_raster_unit_v2z_s1_agent_rf_source_data;                                  // ogpu_raster_unit_v2z_s1_agent:rf_source_data -> ogpu_raster_unit_v2z_s1_agent_rsp_fifo:in_data
	wire          ogpu_raster_unit_v2z_s1_agent_rf_source_ready;                                 // ogpu_raster_unit_v2z_s1_agent_rsp_fifo:in_ready -> ogpu_raster_unit_v2z_s1_agent:rf_source_ready
	wire          ogpu_raster_unit_v2z_s1_agent_rf_source_startofpacket;                         // ogpu_raster_unit_v2z_s1_agent:rf_source_startofpacket -> ogpu_raster_unit_v2z_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_raster_unit_v2z_s1_agent_rf_source_endofpacket;                           // ogpu_raster_unit_v2z_s1_agent:rf_source_endofpacket -> ogpu_raster_unit_v2z_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_raster_unit_v2z_s1_agent_rsp_fifo_out_valid;                              // ogpu_raster_unit_v2z_s1_agent_rsp_fifo:out_valid -> ogpu_raster_unit_v2z_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_raster_unit_v2z_s1_agent_rsp_fifo_out_data;                               // ogpu_raster_unit_v2z_s1_agent_rsp_fifo:out_data -> ogpu_raster_unit_v2z_s1_agent:rf_sink_data
	wire          ogpu_raster_unit_v2z_s1_agent_rsp_fifo_out_ready;                              // ogpu_raster_unit_v2z_s1_agent:rf_sink_ready -> ogpu_raster_unit_v2z_s1_agent_rsp_fifo:out_ready
	wire          ogpu_raster_unit_v2z_s1_agent_rsp_fifo_out_startofpacket;                      // ogpu_raster_unit_v2z_s1_agent_rsp_fifo:out_startofpacket -> ogpu_raster_unit_v2z_s1_agent:rf_sink_startofpacket
	wire          ogpu_raster_unit_v2z_s1_agent_rsp_fifo_out_endofpacket;                        // ogpu_raster_unit_v2z_s1_agent_rsp_fifo:out_endofpacket -> ogpu_raster_unit_v2z_s1_agent:rf_sink_endofpacket
	wire          ogpu_raster_unit_v2z_s1_agent_rdata_fifo_src_valid;                            // ogpu_raster_unit_v2z_s1_agent:rdata_fifo_src_valid -> ogpu_raster_unit_v2z_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_raster_unit_v2z_s1_agent_rdata_fifo_src_data;                             // ogpu_raster_unit_v2z_s1_agent:rdata_fifo_src_data -> ogpu_raster_unit_v2z_s1_agent_rdata_fifo:in_data
	wire          ogpu_raster_unit_v2z_s1_agent_rdata_fifo_src_ready;                            // ogpu_raster_unit_v2z_s1_agent_rdata_fifo:in_ready -> ogpu_raster_unit_v2z_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_raster_unit_v2y_s1_agent_m0_readdata;                                     // ogpu_raster_unit_v2y_s1_translator:uav_readdata -> ogpu_raster_unit_v2y_s1_agent:m0_readdata
	wire          ogpu_raster_unit_v2y_s1_agent_m0_waitrequest;                                  // ogpu_raster_unit_v2y_s1_translator:uav_waitrequest -> ogpu_raster_unit_v2y_s1_agent:m0_waitrequest
	wire          ogpu_raster_unit_v2y_s1_agent_m0_debugaccess;                                  // ogpu_raster_unit_v2y_s1_agent:m0_debugaccess -> ogpu_raster_unit_v2y_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_raster_unit_v2y_s1_agent_m0_address;                                      // ogpu_raster_unit_v2y_s1_agent:m0_address -> ogpu_raster_unit_v2y_s1_translator:uav_address
	wire    [3:0] ogpu_raster_unit_v2y_s1_agent_m0_byteenable;                                   // ogpu_raster_unit_v2y_s1_agent:m0_byteenable -> ogpu_raster_unit_v2y_s1_translator:uav_byteenable
	wire          ogpu_raster_unit_v2y_s1_agent_m0_read;                                         // ogpu_raster_unit_v2y_s1_agent:m0_read -> ogpu_raster_unit_v2y_s1_translator:uav_read
	wire          ogpu_raster_unit_v2y_s1_agent_m0_readdatavalid;                                // ogpu_raster_unit_v2y_s1_translator:uav_readdatavalid -> ogpu_raster_unit_v2y_s1_agent:m0_readdatavalid
	wire          ogpu_raster_unit_v2y_s1_agent_m0_lock;                                         // ogpu_raster_unit_v2y_s1_agent:m0_lock -> ogpu_raster_unit_v2y_s1_translator:uav_lock
	wire   [31:0] ogpu_raster_unit_v2y_s1_agent_m0_writedata;                                    // ogpu_raster_unit_v2y_s1_agent:m0_writedata -> ogpu_raster_unit_v2y_s1_translator:uav_writedata
	wire          ogpu_raster_unit_v2y_s1_agent_m0_write;                                        // ogpu_raster_unit_v2y_s1_agent:m0_write -> ogpu_raster_unit_v2y_s1_translator:uav_write
	wire    [2:0] ogpu_raster_unit_v2y_s1_agent_m0_burstcount;                                   // ogpu_raster_unit_v2y_s1_agent:m0_burstcount -> ogpu_raster_unit_v2y_s1_translator:uav_burstcount
	wire          ogpu_raster_unit_v2y_s1_agent_rf_source_valid;                                 // ogpu_raster_unit_v2y_s1_agent:rf_source_valid -> ogpu_raster_unit_v2y_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_raster_unit_v2y_s1_agent_rf_source_data;                                  // ogpu_raster_unit_v2y_s1_agent:rf_source_data -> ogpu_raster_unit_v2y_s1_agent_rsp_fifo:in_data
	wire          ogpu_raster_unit_v2y_s1_agent_rf_source_ready;                                 // ogpu_raster_unit_v2y_s1_agent_rsp_fifo:in_ready -> ogpu_raster_unit_v2y_s1_agent:rf_source_ready
	wire          ogpu_raster_unit_v2y_s1_agent_rf_source_startofpacket;                         // ogpu_raster_unit_v2y_s1_agent:rf_source_startofpacket -> ogpu_raster_unit_v2y_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_raster_unit_v2y_s1_agent_rf_source_endofpacket;                           // ogpu_raster_unit_v2y_s1_agent:rf_source_endofpacket -> ogpu_raster_unit_v2y_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_raster_unit_v2y_s1_agent_rsp_fifo_out_valid;                              // ogpu_raster_unit_v2y_s1_agent_rsp_fifo:out_valid -> ogpu_raster_unit_v2y_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_raster_unit_v2y_s1_agent_rsp_fifo_out_data;                               // ogpu_raster_unit_v2y_s1_agent_rsp_fifo:out_data -> ogpu_raster_unit_v2y_s1_agent:rf_sink_data
	wire          ogpu_raster_unit_v2y_s1_agent_rsp_fifo_out_ready;                              // ogpu_raster_unit_v2y_s1_agent:rf_sink_ready -> ogpu_raster_unit_v2y_s1_agent_rsp_fifo:out_ready
	wire          ogpu_raster_unit_v2y_s1_agent_rsp_fifo_out_startofpacket;                      // ogpu_raster_unit_v2y_s1_agent_rsp_fifo:out_startofpacket -> ogpu_raster_unit_v2y_s1_agent:rf_sink_startofpacket
	wire          ogpu_raster_unit_v2y_s1_agent_rsp_fifo_out_endofpacket;                        // ogpu_raster_unit_v2y_s1_agent_rsp_fifo:out_endofpacket -> ogpu_raster_unit_v2y_s1_agent:rf_sink_endofpacket
	wire          ogpu_raster_unit_v2y_s1_agent_rdata_fifo_src_valid;                            // ogpu_raster_unit_v2y_s1_agent:rdata_fifo_src_valid -> ogpu_raster_unit_v2y_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_raster_unit_v2y_s1_agent_rdata_fifo_src_data;                             // ogpu_raster_unit_v2y_s1_agent:rdata_fifo_src_data -> ogpu_raster_unit_v2y_s1_agent_rdata_fifo:in_data
	wire          ogpu_raster_unit_v2y_s1_agent_rdata_fifo_src_ready;                            // ogpu_raster_unit_v2y_s1_agent_rdata_fifo:in_ready -> ogpu_raster_unit_v2y_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_raster_unit_v2x_s1_agent_m0_readdata;                                     // ogpu_raster_unit_v2x_s1_translator:uav_readdata -> ogpu_raster_unit_v2x_s1_agent:m0_readdata
	wire          ogpu_raster_unit_v2x_s1_agent_m0_waitrequest;                                  // ogpu_raster_unit_v2x_s1_translator:uav_waitrequest -> ogpu_raster_unit_v2x_s1_agent:m0_waitrequest
	wire          ogpu_raster_unit_v2x_s1_agent_m0_debugaccess;                                  // ogpu_raster_unit_v2x_s1_agent:m0_debugaccess -> ogpu_raster_unit_v2x_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_raster_unit_v2x_s1_agent_m0_address;                                      // ogpu_raster_unit_v2x_s1_agent:m0_address -> ogpu_raster_unit_v2x_s1_translator:uav_address
	wire    [3:0] ogpu_raster_unit_v2x_s1_agent_m0_byteenable;                                   // ogpu_raster_unit_v2x_s1_agent:m0_byteenable -> ogpu_raster_unit_v2x_s1_translator:uav_byteenable
	wire          ogpu_raster_unit_v2x_s1_agent_m0_read;                                         // ogpu_raster_unit_v2x_s1_agent:m0_read -> ogpu_raster_unit_v2x_s1_translator:uav_read
	wire          ogpu_raster_unit_v2x_s1_agent_m0_readdatavalid;                                // ogpu_raster_unit_v2x_s1_translator:uav_readdatavalid -> ogpu_raster_unit_v2x_s1_agent:m0_readdatavalid
	wire          ogpu_raster_unit_v2x_s1_agent_m0_lock;                                         // ogpu_raster_unit_v2x_s1_agent:m0_lock -> ogpu_raster_unit_v2x_s1_translator:uav_lock
	wire   [31:0] ogpu_raster_unit_v2x_s1_agent_m0_writedata;                                    // ogpu_raster_unit_v2x_s1_agent:m0_writedata -> ogpu_raster_unit_v2x_s1_translator:uav_writedata
	wire          ogpu_raster_unit_v2x_s1_agent_m0_write;                                        // ogpu_raster_unit_v2x_s1_agent:m0_write -> ogpu_raster_unit_v2x_s1_translator:uav_write
	wire    [2:0] ogpu_raster_unit_v2x_s1_agent_m0_burstcount;                                   // ogpu_raster_unit_v2x_s1_agent:m0_burstcount -> ogpu_raster_unit_v2x_s1_translator:uav_burstcount
	wire          ogpu_raster_unit_v2x_s1_agent_rf_source_valid;                                 // ogpu_raster_unit_v2x_s1_agent:rf_source_valid -> ogpu_raster_unit_v2x_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_raster_unit_v2x_s1_agent_rf_source_data;                                  // ogpu_raster_unit_v2x_s1_agent:rf_source_data -> ogpu_raster_unit_v2x_s1_agent_rsp_fifo:in_data
	wire          ogpu_raster_unit_v2x_s1_agent_rf_source_ready;                                 // ogpu_raster_unit_v2x_s1_agent_rsp_fifo:in_ready -> ogpu_raster_unit_v2x_s1_agent:rf_source_ready
	wire          ogpu_raster_unit_v2x_s1_agent_rf_source_startofpacket;                         // ogpu_raster_unit_v2x_s1_agent:rf_source_startofpacket -> ogpu_raster_unit_v2x_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_raster_unit_v2x_s1_agent_rf_source_endofpacket;                           // ogpu_raster_unit_v2x_s1_agent:rf_source_endofpacket -> ogpu_raster_unit_v2x_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_raster_unit_v2x_s1_agent_rsp_fifo_out_valid;                              // ogpu_raster_unit_v2x_s1_agent_rsp_fifo:out_valid -> ogpu_raster_unit_v2x_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_raster_unit_v2x_s1_agent_rsp_fifo_out_data;                               // ogpu_raster_unit_v2x_s1_agent_rsp_fifo:out_data -> ogpu_raster_unit_v2x_s1_agent:rf_sink_data
	wire          ogpu_raster_unit_v2x_s1_agent_rsp_fifo_out_ready;                              // ogpu_raster_unit_v2x_s1_agent:rf_sink_ready -> ogpu_raster_unit_v2x_s1_agent_rsp_fifo:out_ready
	wire          ogpu_raster_unit_v2x_s1_agent_rsp_fifo_out_startofpacket;                      // ogpu_raster_unit_v2x_s1_agent_rsp_fifo:out_startofpacket -> ogpu_raster_unit_v2x_s1_agent:rf_sink_startofpacket
	wire          ogpu_raster_unit_v2x_s1_agent_rsp_fifo_out_endofpacket;                        // ogpu_raster_unit_v2x_s1_agent_rsp_fifo:out_endofpacket -> ogpu_raster_unit_v2x_s1_agent:rf_sink_endofpacket
	wire          ogpu_raster_unit_v2x_s1_agent_rdata_fifo_src_valid;                            // ogpu_raster_unit_v2x_s1_agent:rdata_fifo_src_valid -> ogpu_raster_unit_v2x_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_raster_unit_v2x_s1_agent_rdata_fifo_src_data;                             // ogpu_raster_unit_v2x_s1_agent:rdata_fifo_src_data -> ogpu_raster_unit_v2x_s1_agent_rdata_fifo:in_data
	wire          ogpu_raster_unit_v2x_s1_agent_rdata_fifo_src_ready;                            // ogpu_raster_unit_v2x_s1_agent_rdata_fifo:in_ready -> ogpu_raster_unit_v2x_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_raster_unit_v1z_s1_agent_m0_readdata;                                     // ogpu_raster_unit_v1z_s1_translator:uav_readdata -> ogpu_raster_unit_v1z_s1_agent:m0_readdata
	wire          ogpu_raster_unit_v1z_s1_agent_m0_waitrequest;                                  // ogpu_raster_unit_v1z_s1_translator:uav_waitrequest -> ogpu_raster_unit_v1z_s1_agent:m0_waitrequest
	wire          ogpu_raster_unit_v1z_s1_agent_m0_debugaccess;                                  // ogpu_raster_unit_v1z_s1_agent:m0_debugaccess -> ogpu_raster_unit_v1z_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_raster_unit_v1z_s1_agent_m0_address;                                      // ogpu_raster_unit_v1z_s1_agent:m0_address -> ogpu_raster_unit_v1z_s1_translator:uav_address
	wire    [3:0] ogpu_raster_unit_v1z_s1_agent_m0_byteenable;                                   // ogpu_raster_unit_v1z_s1_agent:m0_byteenable -> ogpu_raster_unit_v1z_s1_translator:uav_byteenable
	wire          ogpu_raster_unit_v1z_s1_agent_m0_read;                                         // ogpu_raster_unit_v1z_s1_agent:m0_read -> ogpu_raster_unit_v1z_s1_translator:uav_read
	wire          ogpu_raster_unit_v1z_s1_agent_m0_readdatavalid;                                // ogpu_raster_unit_v1z_s1_translator:uav_readdatavalid -> ogpu_raster_unit_v1z_s1_agent:m0_readdatavalid
	wire          ogpu_raster_unit_v1z_s1_agent_m0_lock;                                         // ogpu_raster_unit_v1z_s1_agent:m0_lock -> ogpu_raster_unit_v1z_s1_translator:uav_lock
	wire   [31:0] ogpu_raster_unit_v1z_s1_agent_m0_writedata;                                    // ogpu_raster_unit_v1z_s1_agent:m0_writedata -> ogpu_raster_unit_v1z_s1_translator:uav_writedata
	wire          ogpu_raster_unit_v1z_s1_agent_m0_write;                                        // ogpu_raster_unit_v1z_s1_agent:m0_write -> ogpu_raster_unit_v1z_s1_translator:uav_write
	wire    [2:0] ogpu_raster_unit_v1z_s1_agent_m0_burstcount;                                   // ogpu_raster_unit_v1z_s1_agent:m0_burstcount -> ogpu_raster_unit_v1z_s1_translator:uav_burstcount
	wire          ogpu_raster_unit_v1z_s1_agent_rf_source_valid;                                 // ogpu_raster_unit_v1z_s1_agent:rf_source_valid -> ogpu_raster_unit_v1z_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_raster_unit_v1z_s1_agent_rf_source_data;                                  // ogpu_raster_unit_v1z_s1_agent:rf_source_data -> ogpu_raster_unit_v1z_s1_agent_rsp_fifo:in_data
	wire          ogpu_raster_unit_v1z_s1_agent_rf_source_ready;                                 // ogpu_raster_unit_v1z_s1_agent_rsp_fifo:in_ready -> ogpu_raster_unit_v1z_s1_agent:rf_source_ready
	wire          ogpu_raster_unit_v1z_s1_agent_rf_source_startofpacket;                         // ogpu_raster_unit_v1z_s1_agent:rf_source_startofpacket -> ogpu_raster_unit_v1z_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_raster_unit_v1z_s1_agent_rf_source_endofpacket;                           // ogpu_raster_unit_v1z_s1_agent:rf_source_endofpacket -> ogpu_raster_unit_v1z_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_raster_unit_v1z_s1_agent_rsp_fifo_out_valid;                              // ogpu_raster_unit_v1z_s1_agent_rsp_fifo:out_valid -> ogpu_raster_unit_v1z_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_raster_unit_v1z_s1_agent_rsp_fifo_out_data;                               // ogpu_raster_unit_v1z_s1_agent_rsp_fifo:out_data -> ogpu_raster_unit_v1z_s1_agent:rf_sink_data
	wire          ogpu_raster_unit_v1z_s1_agent_rsp_fifo_out_ready;                              // ogpu_raster_unit_v1z_s1_agent:rf_sink_ready -> ogpu_raster_unit_v1z_s1_agent_rsp_fifo:out_ready
	wire          ogpu_raster_unit_v1z_s1_agent_rsp_fifo_out_startofpacket;                      // ogpu_raster_unit_v1z_s1_agent_rsp_fifo:out_startofpacket -> ogpu_raster_unit_v1z_s1_agent:rf_sink_startofpacket
	wire          ogpu_raster_unit_v1z_s1_agent_rsp_fifo_out_endofpacket;                        // ogpu_raster_unit_v1z_s1_agent_rsp_fifo:out_endofpacket -> ogpu_raster_unit_v1z_s1_agent:rf_sink_endofpacket
	wire          ogpu_raster_unit_v1z_s1_agent_rdata_fifo_src_valid;                            // ogpu_raster_unit_v1z_s1_agent:rdata_fifo_src_valid -> ogpu_raster_unit_v1z_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_raster_unit_v1z_s1_agent_rdata_fifo_src_data;                             // ogpu_raster_unit_v1z_s1_agent:rdata_fifo_src_data -> ogpu_raster_unit_v1z_s1_agent_rdata_fifo:in_data
	wire          ogpu_raster_unit_v1z_s1_agent_rdata_fifo_src_ready;                            // ogpu_raster_unit_v1z_s1_agent_rdata_fifo:in_ready -> ogpu_raster_unit_v1z_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_raster_unit_v1y_s1_agent_m0_readdata;                                     // ogpu_raster_unit_v1y_s1_translator:uav_readdata -> ogpu_raster_unit_v1y_s1_agent:m0_readdata
	wire          ogpu_raster_unit_v1y_s1_agent_m0_waitrequest;                                  // ogpu_raster_unit_v1y_s1_translator:uav_waitrequest -> ogpu_raster_unit_v1y_s1_agent:m0_waitrequest
	wire          ogpu_raster_unit_v1y_s1_agent_m0_debugaccess;                                  // ogpu_raster_unit_v1y_s1_agent:m0_debugaccess -> ogpu_raster_unit_v1y_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_raster_unit_v1y_s1_agent_m0_address;                                      // ogpu_raster_unit_v1y_s1_agent:m0_address -> ogpu_raster_unit_v1y_s1_translator:uav_address
	wire    [3:0] ogpu_raster_unit_v1y_s1_agent_m0_byteenable;                                   // ogpu_raster_unit_v1y_s1_agent:m0_byteenable -> ogpu_raster_unit_v1y_s1_translator:uav_byteenable
	wire          ogpu_raster_unit_v1y_s1_agent_m0_read;                                         // ogpu_raster_unit_v1y_s1_agent:m0_read -> ogpu_raster_unit_v1y_s1_translator:uav_read
	wire          ogpu_raster_unit_v1y_s1_agent_m0_readdatavalid;                                // ogpu_raster_unit_v1y_s1_translator:uav_readdatavalid -> ogpu_raster_unit_v1y_s1_agent:m0_readdatavalid
	wire          ogpu_raster_unit_v1y_s1_agent_m0_lock;                                         // ogpu_raster_unit_v1y_s1_agent:m0_lock -> ogpu_raster_unit_v1y_s1_translator:uav_lock
	wire   [31:0] ogpu_raster_unit_v1y_s1_agent_m0_writedata;                                    // ogpu_raster_unit_v1y_s1_agent:m0_writedata -> ogpu_raster_unit_v1y_s1_translator:uav_writedata
	wire          ogpu_raster_unit_v1y_s1_agent_m0_write;                                        // ogpu_raster_unit_v1y_s1_agent:m0_write -> ogpu_raster_unit_v1y_s1_translator:uav_write
	wire    [2:0] ogpu_raster_unit_v1y_s1_agent_m0_burstcount;                                   // ogpu_raster_unit_v1y_s1_agent:m0_burstcount -> ogpu_raster_unit_v1y_s1_translator:uav_burstcount
	wire          ogpu_raster_unit_v1y_s1_agent_rf_source_valid;                                 // ogpu_raster_unit_v1y_s1_agent:rf_source_valid -> ogpu_raster_unit_v1y_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_raster_unit_v1y_s1_agent_rf_source_data;                                  // ogpu_raster_unit_v1y_s1_agent:rf_source_data -> ogpu_raster_unit_v1y_s1_agent_rsp_fifo:in_data
	wire          ogpu_raster_unit_v1y_s1_agent_rf_source_ready;                                 // ogpu_raster_unit_v1y_s1_agent_rsp_fifo:in_ready -> ogpu_raster_unit_v1y_s1_agent:rf_source_ready
	wire          ogpu_raster_unit_v1y_s1_agent_rf_source_startofpacket;                         // ogpu_raster_unit_v1y_s1_agent:rf_source_startofpacket -> ogpu_raster_unit_v1y_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_raster_unit_v1y_s1_agent_rf_source_endofpacket;                           // ogpu_raster_unit_v1y_s1_agent:rf_source_endofpacket -> ogpu_raster_unit_v1y_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_raster_unit_v1y_s1_agent_rsp_fifo_out_valid;                              // ogpu_raster_unit_v1y_s1_agent_rsp_fifo:out_valid -> ogpu_raster_unit_v1y_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_raster_unit_v1y_s1_agent_rsp_fifo_out_data;                               // ogpu_raster_unit_v1y_s1_agent_rsp_fifo:out_data -> ogpu_raster_unit_v1y_s1_agent:rf_sink_data
	wire          ogpu_raster_unit_v1y_s1_agent_rsp_fifo_out_ready;                              // ogpu_raster_unit_v1y_s1_agent:rf_sink_ready -> ogpu_raster_unit_v1y_s1_agent_rsp_fifo:out_ready
	wire          ogpu_raster_unit_v1y_s1_agent_rsp_fifo_out_startofpacket;                      // ogpu_raster_unit_v1y_s1_agent_rsp_fifo:out_startofpacket -> ogpu_raster_unit_v1y_s1_agent:rf_sink_startofpacket
	wire          ogpu_raster_unit_v1y_s1_agent_rsp_fifo_out_endofpacket;                        // ogpu_raster_unit_v1y_s1_agent_rsp_fifo:out_endofpacket -> ogpu_raster_unit_v1y_s1_agent:rf_sink_endofpacket
	wire          ogpu_raster_unit_v1y_s1_agent_rdata_fifo_src_valid;                            // ogpu_raster_unit_v1y_s1_agent:rdata_fifo_src_valid -> ogpu_raster_unit_v1y_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_raster_unit_v1y_s1_agent_rdata_fifo_src_data;                             // ogpu_raster_unit_v1y_s1_agent:rdata_fifo_src_data -> ogpu_raster_unit_v1y_s1_agent_rdata_fifo:in_data
	wire          ogpu_raster_unit_v1y_s1_agent_rdata_fifo_src_ready;                            // ogpu_raster_unit_v1y_s1_agent_rdata_fifo:in_ready -> ogpu_raster_unit_v1y_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_raster_unit_v1x_s1_agent_m0_readdata;                                     // ogpu_raster_unit_v1x_s1_translator:uav_readdata -> ogpu_raster_unit_v1x_s1_agent:m0_readdata
	wire          ogpu_raster_unit_v1x_s1_agent_m0_waitrequest;                                  // ogpu_raster_unit_v1x_s1_translator:uav_waitrequest -> ogpu_raster_unit_v1x_s1_agent:m0_waitrequest
	wire          ogpu_raster_unit_v1x_s1_agent_m0_debugaccess;                                  // ogpu_raster_unit_v1x_s1_agent:m0_debugaccess -> ogpu_raster_unit_v1x_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_raster_unit_v1x_s1_agent_m0_address;                                      // ogpu_raster_unit_v1x_s1_agent:m0_address -> ogpu_raster_unit_v1x_s1_translator:uav_address
	wire    [3:0] ogpu_raster_unit_v1x_s1_agent_m0_byteenable;                                   // ogpu_raster_unit_v1x_s1_agent:m0_byteenable -> ogpu_raster_unit_v1x_s1_translator:uav_byteenable
	wire          ogpu_raster_unit_v1x_s1_agent_m0_read;                                         // ogpu_raster_unit_v1x_s1_agent:m0_read -> ogpu_raster_unit_v1x_s1_translator:uav_read
	wire          ogpu_raster_unit_v1x_s1_agent_m0_readdatavalid;                                // ogpu_raster_unit_v1x_s1_translator:uav_readdatavalid -> ogpu_raster_unit_v1x_s1_agent:m0_readdatavalid
	wire          ogpu_raster_unit_v1x_s1_agent_m0_lock;                                         // ogpu_raster_unit_v1x_s1_agent:m0_lock -> ogpu_raster_unit_v1x_s1_translator:uav_lock
	wire   [31:0] ogpu_raster_unit_v1x_s1_agent_m0_writedata;                                    // ogpu_raster_unit_v1x_s1_agent:m0_writedata -> ogpu_raster_unit_v1x_s1_translator:uav_writedata
	wire          ogpu_raster_unit_v1x_s1_agent_m0_write;                                        // ogpu_raster_unit_v1x_s1_agent:m0_write -> ogpu_raster_unit_v1x_s1_translator:uav_write
	wire    [2:0] ogpu_raster_unit_v1x_s1_agent_m0_burstcount;                                   // ogpu_raster_unit_v1x_s1_agent:m0_burstcount -> ogpu_raster_unit_v1x_s1_translator:uav_burstcount
	wire          ogpu_raster_unit_v1x_s1_agent_rf_source_valid;                                 // ogpu_raster_unit_v1x_s1_agent:rf_source_valid -> ogpu_raster_unit_v1x_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_raster_unit_v1x_s1_agent_rf_source_data;                                  // ogpu_raster_unit_v1x_s1_agent:rf_source_data -> ogpu_raster_unit_v1x_s1_agent_rsp_fifo:in_data
	wire          ogpu_raster_unit_v1x_s1_agent_rf_source_ready;                                 // ogpu_raster_unit_v1x_s1_agent_rsp_fifo:in_ready -> ogpu_raster_unit_v1x_s1_agent:rf_source_ready
	wire          ogpu_raster_unit_v1x_s1_agent_rf_source_startofpacket;                         // ogpu_raster_unit_v1x_s1_agent:rf_source_startofpacket -> ogpu_raster_unit_v1x_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_raster_unit_v1x_s1_agent_rf_source_endofpacket;                           // ogpu_raster_unit_v1x_s1_agent:rf_source_endofpacket -> ogpu_raster_unit_v1x_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_raster_unit_v1x_s1_agent_rsp_fifo_out_valid;                              // ogpu_raster_unit_v1x_s1_agent_rsp_fifo:out_valid -> ogpu_raster_unit_v1x_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_raster_unit_v1x_s1_agent_rsp_fifo_out_data;                               // ogpu_raster_unit_v1x_s1_agent_rsp_fifo:out_data -> ogpu_raster_unit_v1x_s1_agent:rf_sink_data
	wire          ogpu_raster_unit_v1x_s1_agent_rsp_fifo_out_ready;                              // ogpu_raster_unit_v1x_s1_agent:rf_sink_ready -> ogpu_raster_unit_v1x_s1_agent_rsp_fifo:out_ready
	wire          ogpu_raster_unit_v1x_s1_agent_rsp_fifo_out_startofpacket;                      // ogpu_raster_unit_v1x_s1_agent_rsp_fifo:out_startofpacket -> ogpu_raster_unit_v1x_s1_agent:rf_sink_startofpacket
	wire          ogpu_raster_unit_v1x_s1_agent_rsp_fifo_out_endofpacket;                        // ogpu_raster_unit_v1x_s1_agent_rsp_fifo:out_endofpacket -> ogpu_raster_unit_v1x_s1_agent:rf_sink_endofpacket
	wire          ogpu_raster_unit_v1x_s1_agent_rdata_fifo_src_valid;                            // ogpu_raster_unit_v1x_s1_agent:rdata_fifo_src_valid -> ogpu_raster_unit_v1x_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_raster_unit_v1x_s1_agent_rdata_fifo_src_data;                             // ogpu_raster_unit_v1x_s1_agent:rdata_fifo_src_data -> ogpu_raster_unit_v1x_s1_agent_rdata_fifo:in_data
	wire          ogpu_raster_unit_v1x_s1_agent_rdata_fifo_src_ready;                            // ogpu_raster_unit_v1x_s1_agent_rdata_fifo:in_ready -> ogpu_raster_unit_v1x_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_raster_unit_v0z_s1_agent_m0_readdata;                                     // ogpu_raster_unit_v0z_s1_translator:uav_readdata -> ogpu_raster_unit_v0z_s1_agent:m0_readdata
	wire          ogpu_raster_unit_v0z_s1_agent_m0_waitrequest;                                  // ogpu_raster_unit_v0z_s1_translator:uav_waitrequest -> ogpu_raster_unit_v0z_s1_agent:m0_waitrequest
	wire          ogpu_raster_unit_v0z_s1_agent_m0_debugaccess;                                  // ogpu_raster_unit_v0z_s1_agent:m0_debugaccess -> ogpu_raster_unit_v0z_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_raster_unit_v0z_s1_agent_m0_address;                                      // ogpu_raster_unit_v0z_s1_agent:m0_address -> ogpu_raster_unit_v0z_s1_translator:uav_address
	wire    [3:0] ogpu_raster_unit_v0z_s1_agent_m0_byteenable;                                   // ogpu_raster_unit_v0z_s1_agent:m0_byteenable -> ogpu_raster_unit_v0z_s1_translator:uav_byteenable
	wire          ogpu_raster_unit_v0z_s1_agent_m0_read;                                         // ogpu_raster_unit_v0z_s1_agent:m0_read -> ogpu_raster_unit_v0z_s1_translator:uav_read
	wire          ogpu_raster_unit_v0z_s1_agent_m0_readdatavalid;                                // ogpu_raster_unit_v0z_s1_translator:uav_readdatavalid -> ogpu_raster_unit_v0z_s1_agent:m0_readdatavalid
	wire          ogpu_raster_unit_v0z_s1_agent_m0_lock;                                         // ogpu_raster_unit_v0z_s1_agent:m0_lock -> ogpu_raster_unit_v0z_s1_translator:uav_lock
	wire   [31:0] ogpu_raster_unit_v0z_s1_agent_m0_writedata;                                    // ogpu_raster_unit_v0z_s1_agent:m0_writedata -> ogpu_raster_unit_v0z_s1_translator:uav_writedata
	wire          ogpu_raster_unit_v0z_s1_agent_m0_write;                                        // ogpu_raster_unit_v0z_s1_agent:m0_write -> ogpu_raster_unit_v0z_s1_translator:uav_write
	wire    [2:0] ogpu_raster_unit_v0z_s1_agent_m0_burstcount;                                   // ogpu_raster_unit_v0z_s1_agent:m0_burstcount -> ogpu_raster_unit_v0z_s1_translator:uav_burstcount
	wire          ogpu_raster_unit_v0z_s1_agent_rf_source_valid;                                 // ogpu_raster_unit_v0z_s1_agent:rf_source_valid -> ogpu_raster_unit_v0z_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_raster_unit_v0z_s1_agent_rf_source_data;                                  // ogpu_raster_unit_v0z_s1_agent:rf_source_data -> ogpu_raster_unit_v0z_s1_agent_rsp_fifo:in_data
	wire          ogpu_raster_unit_v0z_s1_agent_rf_source_ready;                                 // ogpu_raster_unit_v0z_s1_agent_rsp_fifo:in_ready -> ogpu_raster_unit_v0z_s1_agent:rf_source_ready
	wire          ogpu_raster_unit_v0z_s1_agent_rf_source_startofpacket;                         // ogpu_raster_unit_v0z_s1_agent:rf_source_startofpacket -> ogpu_raster_unit_v0z_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_raster_unit_v0z_s1_agent_rf_source_endofpacket;                           // ogpu_raster_unit_v0z_s1_agent:rf_source_endofpacket -> ogpu_raster_unit_v0z_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_raster_unit_v0z_s1_agent_rsp_fifo_out_valid;                              // ogpu_raster_unit_v0z_s1_agent_rsp_fifo:out_valid -> ogpu_raster_unit_v0z_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_raster_unit_v0z_s1_agent_rsp_fifo_out_data;                               // ogpu_raster_unit_v0z_s1_agent_rsp_fifo:out_data -> ogpu_raster_unit_v0z_s1_agent:rf_sink_data
	wire          ogpu_raster_unit_v0z_s1_agent_rsp_fifo_out_ready;                              // ogpu_raster_unit_v0z_s1_agent:rf_sink_ready -> ogpu_raster_unit_v0z_s1_agent_rsp_fifo:out_ready
	wire          ogpu_raster_unit_v0z_s1_agent_rsp_fifo_out_startofpacket;                      // ogpu_raster_unit_v0z_s1_agent_rsp_fifo:out_startofpacket -> ogpu_raster_unit_v0z_s1_agent:rf_sink_startofpacket
	wire          ogpu_raster_unit_v0z_s1_agent_rsp_fifo_out_endofpacket;                        // ogpu_raster_unit_v0z_s1_agent_rsp_fifo:out_endofpacket -> ogpu_raster_unit_v0z_s1_agent:rf_sink_endofpacket
	wire          ogpu_raster_unit_v0z_s1_agent_rdata_fifo_src_valid;                            // ogpu_raster_unit_v0z_s1_agent:rdata_fifo_src_valid -> ogpu_raster_unit_v0z_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_raster_unit_v0z_s1_agent_rdata_fifo_src_data;                             // ogpu_raster_unit_v0z_s1_agent:rdata_fifo_src_data -> ogpu_raster_unit_v0z_s1_agent_rdata_fifo:in_data
	wire          ogpu_raster_unit_v0z_s1_agent_rdata_fifo_src_ready;                            // ogpu_raster_unit_v0z_s1_agent_rdata_fifo:in_ready -> ogpu_raster_unit_v0z_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_raster_unit_v0y_s1_agent_m0_readdata;                                     // ogpu_raster_unit_v0y_s1_translator:uav_readdata -> ogpu_raster_unit_v0y_s1_agent:m0_readdata
	wire          ogpu_raster_unit_v0y_s1_agent_m0_waitrequest;                                  // ogpu_raster_unit_v0y_s1_translator:uav_waitrequest -> ogpu_raster_unit_v0y_s1_agent:m0_waitrequest
	wire          ogpu_raster_unit_v0y_s1_agent_m0_debugaccess;                                  // ogpu_raster_unit_v0y_s1_agent:m0_debugaccess -> ogpu_raster_unit_v0y_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_raster_unit_v0y_s1_agent_m0_address;                                      // ogpu_raster_unit_v0y_s1_agent:m0_address -> ogpu_raster_unit_v0y_s1_translator:uav_address
	wire    [3:0] ogpu_raster_unit_v0y_s1_agent_m0_byteenable;                                   // ogpu_raster_unit_v0y_s1_agent:m0_byteenable -> ogpu_raster_unit_v0y_s1_translator:uav_byteenable
	wire          ogpu_raster_unit_v0y_s1_agent_m0_read;                                         // ogpu_raster_unit_v0y_s1_agent:m0_read -> ogpu_raster_unit_v0y_s1_translator:uav_read
	wire          ogpu_raster_unit_v0y_s1_agent_m0_readdatavalid;                                // ogpu_raster_unit_v0y_s1_translator:uav_readdatavalid -> ogpu_raster_unit_v0y_s1_agent:m0_readdatavalid
	wire          ogpu_raster_unit_v0y_s1_agent_m0_lock;                                         // ogpu_raster_unit_v0y_s1_agent:m0_lock -> ogpu_raster_unit_v0y_s1_translator:uav_lock
	wire   [31:0] ogpu_raster_unit_v0y_s1_agent_m0_writedata;                                    // ogpu_raster_unit_v0y_s1_agent:m0_writedata -> ogpu_raster_unit_v0y_s1_translator:uav_writedata
	wire          ogpu_raster_unit_v0y_s1_agent_m0_write;                                        // ogpu_raster_unit_v0y_s1_agent:m0_write -> ogpu_raster_unit_v0y_s1_translator:uav_write
	wire    [2:0] ogpu_raster_unit_v0y_s1_agent_m0_burstcount;                                   // ogpu_raster_unit_v0y_s1_agent:m0_burstcount -> ogpu_raster_unit_v0y_s1_translator:uav_burstcount
	wire          ogpu_raster_unit_v0y_s1_agent_rf_source_valid;                                 // ogpu_raster_unit_v0y_s1_agent:rf_source_valid -> ogpu_raster_unit_v0y_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_raster_unit_v0y_s1_agent_rf_source_data;                                  // ogpu_raster_unit_v0y_s1_agent:rf_source_data -> ogpu_raster_unit_v0y_s1_agent_rsp_fifo:in_data
	wire          ogpu_raster_unit_v0y_s1_agent_rf_source_ready;                                 // ogpu_raster_unit_v0y_s1_agent_rsp_fifo:in_ready -> ogpu_raster_unit_v0y_s1_agent:rf_source_ready
	wire          ogpu_raster_unit_v0y_s1_agent_rf_source_startofpacket;                         // ogpu_raster_unit_v0y_s1_agent:rf_source_startofpacket -> ogpu_raster_unit_v0y_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_raster_unit_v0y_s1_agent_rf_source_endofpacket;                           // ogpu_raster_unit_v0y_s1_agent:rf_source_endofpacket -> ogpu_raster_unit_v0y_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_raster_unit_v0y_s1_agent_rsp_fifo_out_valid;                              // ogpu_raster_unit_v0y_s1_agent_rsp_fifo:out_valid -> ogpu_raster_unit_v0y_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_raster_unit_v0y_s1_agent_rsp_fifo_out_data;                               // ogpu_raster_unit_v0y_s1_agent_rsp_fifo:out_data -> ogpu_raster_unit_v0y_s1_agent:rf_sink_data
	wire          ogpu_raster_unit_v0y_s1_agent_rsp_fifo_out_ready;                              // ogpu_raster_unit_v0y_s1_agent:rf_sink_ready -> ogpu_raster_unit_v0y_s1_agent_rsp_fifo:out_ready
	wire          ogpu_raster_unit_v0y_s1_agent_rsp_fifo_out_startofpacket;                      // ogpu_raster_unit_v0y_s1_agent_rsp_fifo:out_startofpacket -> ogpu_raster_unit_v0y_s1_agent:rf_sink_startofpacket
	wire          ogpu_raster_unit_v0y_s1_agent_rsp_fifo_out_endofpacket;                        // ogpu_raster_unit_v0y_s1_agent_rsp_fifo:out_endofpacket -> ogpu_raster_unit_v0y_s1_agent:rf_sink_endofpacket
	wire          ogpu_raster_unit_v0y_s1_agent_rdata_fifo_src_valid;                            // ogpu_raster_unit_v0y_s1_agent:rdata_fifo_src_valid -> ogpu_raster_unit_v0y_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_raster_unit_v0y_s1_agent_rdata_fifo_src_data;                             // ogpu_raster_unit_v0y_s1_agent:rdata_fifo_src_data -> ogpu_raster_unit_v0y_s1_agent_rdata_fifo:in_data
	wire          ogpu_raster_unit_v0y_s1_agent_rdata_fifo_src_ready;                            // ogpu_raster_unit_v0y_s1_agent_rdata_fifo:in_ready -> ogpu_raster_unit_v0y_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_raster_unit_v0x_s1_agent_m0_readdata;                                     // ogpu_raster_unit_v0x_s1_translator:uav_readdata -> ogpu_raster_unit_v0x_s1_agent:m0_readdata
	wire          ogpu_raster_unit_v0x_s1_agent_m0_waitrequest;                                  // ogpu_raster_unit_v0x_s1_translator:uav_waitrequest -> ogpu_raster_unit_v0x_s1_agent:m0_waitrequest
	wire          ogpu_raster_unit_v0x_s1_agent_m0_debugaccess;                                  // ogpu_raster_unit_v0x_s1_agent:m0_debugaccess -> ogpu_raster_unit_v0x_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_raster_unit_v0x_s1_agent_m0_address;                                      // ogpu_raster_unit_v0x_s1_agent:m0_address -> ogpu_raster_unit_v0x_s1_translator:uav_address
	wire    [3:0] ogpu_raster_unit_v0x_s1_agent_m0_byteenable;                                   // ogpu_raster_unit_v0x_s1_agent:m0_byteenable -> ogpu_raster_unit_v0x_s1_translator:uav_byteenable
	wire          ogpu_raster_unit_v0x_s1_agent_m0_read;                                         // ogpu_raster_unit_v0x_s1_agent:m0_read -> ogpu_raster_unit_v0x_s1_translator:uav_read
	wire          ogpu_raster_unit_v0x_s1_agent_m0_readdatavalid;                                // ogpu_raster_unit_v0x_s1_translator:uav_readdatavalid -> ogpu_raster_unit_v0x_s1_agent:m0_readdatavalid
	wire          ogpu_raster_unit_v0x_s1_agent_m0_lock;                                         // ogpu_raster_unit_v0x_s1_agent:m0_lock -> ogpu_raster_unit_v0x_s1_translator:uav_lock
	wire   [31:0] ogpu_raster_unit_v0x_s1_agent_m0_writedata;                                    // ogpu_raster_unit_v0x_s1_agent:m0_writedata -> ogpu_raster_unit_v0x_s1_translator:uav_writedata
	wire          ogpu_raster_unit_v0x_s1_agent_m0_write;                                        // ogpu_raster_unit_v0x_s1_agent:m0_write -> ogpu_raster_unit_v0x_s1_translator:uav_write
	wire    [2:0] ogpu_raster_unit_v0x_s1_agent_m0_burstcount;                                   // ogpu_raster_unit_v0x_s1_agent:m0_burstcount -> ogpu_raster_unit_v0x_s1_translator:uav_burstcount
	wire          ogpu_raster_unit_v0x_s1_agent_rf_source_valid;                                 // ogpu_raster_unit_v0x_s1_agent:rf_source_valid -> ogpu_raster_unit_v0x_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_raster_unit_v0x_s1_agent_rf_source_data;                                  // ogpu_raster_unit_v0x_s1_agent:rf_source_data -> ogpu_raster_unit_v0x_s1_agent_rsp_fifo:in_data
	wire          ogpu_raster_unit_v0x_s1_agent_rf_source_ready;                                 // ogpu_raster_unit_v0x_s1_agent_rsp_fifo:in_ready -> ogpu_raster_unit_v0x_s1_agent:rf_source_ready
	wire          ogpu_raster_unit_v0x_s1_agent_rf_source_startofpacket;                         // ogpu_raster_unit_v0x_s1_agent:rf_source_startofpacket -> ogpu_raster_unit_v0x_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_raster_unit_v0x_s1_agent_rf_source_endofpacket;                           // ogpu_raster_unit_v0x_s1_agent:rf_source_endofpacket -> ogpu_raster_unit_v0x_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_raster_unit_v0x_s1_agent_rsp_fifo_out_valid;                              // ogpu_raster_unit_v0x_s1_agent_rsp_fifo:out_valid -> ogpu_raster_unit_v0x_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_raster_unit_v0x_s1_agent_rsp_fifo_out_data;                               // ogpu_raster_unit_v0x_s1_agent_rsp_fifo:out_data -> ogpu_raster_unit_v0x_s1_agent:rf_sink_data
	wire          ogpu_raster_unit_v0x_s1_agent_rsp_fifo_out_ready;                              // ogpu_raster_unit_v0x_s1_agent:rf_sink_ready -> ogpu_raster_unit_v0x_s1_agent_rsp_fifo:out_ready
	wire          ogpu_raster_unit_v0x_s1_agent_rsp_fifo_out_startofpacket;                      // ogpu_raster_unit_v0x_s1_agent_rsp_fifo:out_startofpacket -> ogpu_raster_unit_v0x_s1_agent:rf_sink_startofpacket
	wire          ogpu_raster_unit_v0x_s1_agent_rsp_fifo_out_endofpacket;                        // ogpu_raster_unit_v0x_s1_agent_rsp_fifo:out_endofpacket -> ogpu_raster_unit_v0x_s1_agent:rf_sink_endofpacket
	wire          ogpu_raster_unit_v0x_s1_agent_rdata_fifo_src_valid;                            // ogpu_raster_unit_v0x_s1_agent:rdata_fifo_src_valid -> ogpu_raster_unit_v0x_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_raster_unit_v0x_s1_agent_rdata_fifo_src_data;                             // ogpu_raster_unit_v0x_s1_agent:rdata_fifo_src_data -> ogpu_raster_unit_v0x_s1_agent_rdata_fifo:in_data
	wire          ogpu_raster_unit_v0x_s1_agent_rdata_fifo_src_ready;                            // ogpu_raster_unit_v0x_s1_agent_rdata_fifo:in_ready -> ogpu_raster_unit_v0x_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_quad_store_req_s1_agent_m0_readdata;                                      // ogpu_quad_store_req_s1_translator:uav_readdata -> ogpu_quad_store_req_s1_agent:m0_readdata
	wire          ogpu_quad_store_req_s1_agent_m0_waitrequest;                                   // ogpu_quad_store_req_s1_translator:uav_waitrequest -> ogpu_quad_store_req_s1_agent:m0_waitrequest
	wire          ogpu_quad_store_req_s1_agent_m0_debugaccess;                                   // ogpu_quad_store_req_s1_agent:m0_debugaccess -> ogpu_quad_store_req_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_quad_store_req_s1_agent_m0_address;                                       // ogpu_quad_store_req_s1_agent:m0_address -> ogpu_quad_store_req_s1_translator:uav_address
	wire    [3:0] ogpu_quad_store_req_s1_agent_m0_byteenable;                                    // ogpu_quad_store_req_s1_agent:m0_byteenable -> ogpu_quad_store_req_s1_translator:uav_byteenable
	wire          ogpu_quad_store_req_s1_agent_m0_read;                                          // ogpu_quad_store_req_s1_agent:m0_read -> ogpu_quad_store_req_s1_translator:uav_read
	wire          ogpu_quad_store_req_s1_agent_m0_readdatavalid;                                 // ogpu_quad_store_req_s1_translator:uav_readdatavalid -> ogpu_quad_store_req_s1_agent:m0_readdatavalid
	wire          ogpu_quad_store_req_s1_agent_m0_lock;                                          // ogpu_quad_store_req_s1_agent:m0_lock -> ogpu_quad_store_req_s1_translator:uav_lock
	wire   [31:0] ogpu_quad_store_req_s1_agent_m0_writedata;                                     // ogpu_quad_store_req_s1_agent:m0_writedata -> ogpu_quad_store_req_s1_translator:uav_writedata
	wire          ogpu_quad_store_req_s1_agent_m0_write;                                         // ogpu_quad_store_req_s1_agent:m0_write -> ogpu_quad_store_req_s1_translator:uav_write
	wire    [2:0] ogpu_quad_store_req_s1_agent_m0_burstcount;                                    // ogpu_quad_store_req_s1_agent:m0_burstcount -> ogpu_quad_store_req_s1_translator:uav_burstcount
	wire          ogpu_quad_store_req_s1_agent_rf_source_valid;                                  // ogpu_quad_store_req_s1_agent:rf_source_valid -> ogpu_quad_store_req_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_quad_store_req_s1_agent_rf_source_data;                                   // ogpu_quad_store_req_s1_agent:rf_source_data -> ogpu_quad_store_req_s1_agent_rsp_fifo:in_data
	wire          ogpu_quad_store_req_s1_agent_rf_source_ready;                                  // ogpu_quad_store_req_s1_agent_rsp_fifo:in_ready -> ogpu_quad_store_req_s1_agent:rf_source_ready
	wire          ogpu_quad_store_req_s1_agent_rf_source_startofpacket;                          // ogpu_quad_store_req_s1_agent:rf_source_startofpacket -> ogpu_quad_store_req_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_quad_store_req_s1_agent_rf_source_endofpacket;                            // ogpu_quad_store_req_s1_agent:rf_source_endofpacket -> ogpu_quad_store_req_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_quad_store_req_s1_agent_rsp_fifo_out_valid;                               // ogpu_quad_store_req_s1_agent_rsp_fifo:out_valid -> ogpu_quad_store_req_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_quad_store_req_s1_agent_rsp_fifo_out_data;                                // ogpu_quad_store_req_s1_agent_rsp_fifo:out_data -> ogpu_quad_store_req_s1_agent:rf_sink_data
	wire          ogpu_quad_store_req_s1_agent_rsp_fifo_out_ready;                               // ogpu_quad_store_req_s1_agent:rf_sink_ready -> ogpu_quad_store_req_s1_agent_rsp_fifo:out_ready
	wire          ogpu_quad_store_req_s1_agent_rsp_fifo_out_startofpacket;                       // ogpu_quad_store_req_s1_agent_rsp_fifo:out_startofpacket -> ogpu_quad_store_req_s1_agent:rf_sink_startofpacket
	wire          ogpu_quad_store_req_s1_agent_rsp_fifo_out_endofpacket;                         // ogpu_quad_store_req_s1_agent_rsp_fifo:out_endofpacket -> ogpu_quad_store_req_s1_agent:rf_sink_endofpacket
	wire          ogpu_quad_store_req_s1_agent_rdata_fifo_src_valid;                             // ogpu_quad_store_req_s1_agent:rdata_fifo_src_valid -> ogpu_quad_store_req_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_quad_store_req_s1_agent_rdata_fifo_src_data;                              // ogpu_quad_store_req_s1_agent:rdata_fifo_src_data -> ogpu_quad_store_req_s1_agent_rdata_fifo:in_data
	wire          ogpu_quad_store_req_s1_agent_rdata_fifo_src_ready;                             // ogpu_quad_store_req_s1_agent_rdata_fifo:in_ready -> ogpu_quad_store_req_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_quad_store_data_high_s1_agent_m0_readdata;                                // ogpu_quad_store_data_high_s1_translator:uav_readdata -> ogpu_quad_store_data_high_s1_agent:m0_readdata
	wire          ogpu_quad_store_data_high_s1_agent_m0_waitrequest;                             // ogpu_quad_store_data_high_s1_translator:uav_waitrequest -> ogpu_quad_store_data_high_s1_agent:m0_waitrequest
	wire          ogpu_quad_store_data_high_s1_agent_m0_debugaccess;                             // ogpu_quad_store_data_high_s1_agent:m0_debugaccess -> ogpu_quad_store_data_high_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_quad_store_data_high_s1_agent_m0_address;                                 // ogpu_quad_store_data_high_s1_agent:m0_address -> ogpu_quad_store_data_high_s1_translator:uav_address
	wire    [3:0] ogpu_quad_store_data_high_s1_agent_m0_byteenable;                              // ogpu_quad_store_data_high_s1_agent:m0_byteenable -> ogpu_quad_store_data_high_s1_translator:uav_byteenable
	wire          ogpu_quad_store_data_high_s1_agent_m0_read;                                    // ogpu_quad_store_data_high_s1_agent:m0_read -> ogpu_quad_store_data_high_s1_translator:uav_read
	wire          ogpu_quad_store_data_high_s1_agent_m0_readdatavalid;                           // ogpu_quad_store_data_high_s1_translator:uav_readdatavalid -> ogpu_quad_store_data_high_s1_agent:m0_readdatavalid
	wire          ogpu_quad_store_data_high_s1_agent_m0_lock;                                    // ogpu_quad_store_data_high_s1_agent:m0_lock -> ogpu_quad_store_data_high_s1_translator:uav_lock
	wire   [31:0] ogpu_quad_store_data_high_s1_agent_m0_writedata;                               // ogpu_quad_store_data_high_s1_agent:m0_writedata -> ogpu_quad_store_data_high_s1_translator:uav_writedata
	wire          ogpu_quad_store_data_high_s1_agent_m0_write;                                   // ogpu_quad_store_data_high_s1_agent:m0_write -> ogpu_quad_store_data_high_s1_translator:uav_write
	wire    [2:0] ogpu_quad_store_data_high_s1_agent_m0_burstcount;                              // ogpu_quad_store_data_high_s1_agent:m0_burstcount -> ogpu_quad_store_data_high_s1_translator:uav_burstcount
	wire          ogpu_quad_store_data_high_s1_agent_rf_source_valid;                            // ogpu_quad_store_data_high_s1_agent:rf_source_valid -> ogpu_quad_store_data_high_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_quad_store_data_high_s1_agent_rf_source_data;                             // ogpu_quad_store_data_high_s1_agent:rf_source_data -> ogpu_quad_store_data_high_s1_agent_rsp_fifo:in_data
	wire          ogpu_quad_store_data_high_s1_agent_rf_source_ready;                            // ogpu_quad_store_data_high_s1_agent_rsp_fifo:in_ready -> ogpu_quad_store_data_high_s1_agent:rf_source_ready
	wire          ogpu_quad_store_data_high_s1_agent_rf_source_startofpacket;                    // ogpu_quad_store_data_high_s1_agent:rf_source_startofpacket -> ogpu_quad_store_data_high_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_quad_store_data_high_s1_agent_rf_source_endofpacket;                      // ogpu_quad_store_data_high_s1_agent:rf_source_endofpacket -> ogpu_quad_store_data_high_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_quad_store_data_high_s1_agent_rsp_fifo_out_valid;                         // ogpu_quad_store_data_high_s1_agent_rsp_fifo:out_valid -> ogpu_quad_store_data_high_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_quad_store_data_high_s1_agent_rsp_fifo_out_data;                          // ogpu_quad_store_data_high_s1_agent_rsp_fifo:out_data -> ogpu_quad_store_data_high_s1_agent:rf_sink_data
	wire          ogpu_quad_store_data_high_s1_agent_rsp_fifo_out_ready;                         // ogpu_quad_store_data_high_s1_agent:rf_sink_ready -> ogpu_quad_store_data_high_s1_agent_rsp_fifo:out_ready
	wire          ogpu_quad_store_data_high_s1_agent_rsp_fifo_out_startofpacket;                 // ogpu_quad_store_data_high_s1_agent_rsp_fifo:out_startofpacket -> ogpu_quad_store_data_high_s1_agent:rf_sink_startofpacket
	wire          ogpu_quad_store_data_high_s1_agent_rsp_fifo_out_endofpacket;                   // ogpu_quad_store_data_high_s1_agent_rsp_fifo:out_endofpacket -> ogpu_quad_store_data_high_s1_agent:rf_sink_endofpacket
	wire          ogpu_quad_store_data_high_s1_agent_rdata_fifo_src_valid;                       // ogpu_quad_store_data_high_s1_agent:rdata_fifo_src_valid -> ogpu_quad_store_data_high_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_quad_store_data_high_s1_agent_rdata_fifo_src_data;                        // ogpu_quad_store_data_high_s1_agent:rdata_fifo_src_data -> ogpu_quad_store_data_high_s1_agent_rdata_fifo:in_data
	wire          ogpu_quad_store_data_high_s1_agent_rdata_fifo_src_ready;                       // ogpu_quad_store_data_high_s1_agent_rdata_fifo:in_ready -> ogpu_quad_store_data_high_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_quad_store_data_low_s1_agent_m0_readdata;                                 // ogpu_quad_store_data_low_s1_translator:uav_readdata -> ogpu_quad_store_data_low_s1_agent:m0_readdata
	wire          ogpu_quad_store_data_low_s1_agent_m0_waitrequest;                              // ogpu_quad_store_data_low_s1_translator:uav_waitrequest -> ogpu_quad_store_data_low_s1_agent:m0_waitrequest
	wire          ogpu_quad_store_data_low_s1_agent_m0_debugaccess;                              // ogpu_quad_store_data_low_s1_agent:m0_debugaccess -> ogpu_quad_store_data_low_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_quad_store_data_low_s1_agent_m0_address;                                  // ogpu_quad_store_data_low_s1_agent:m0_address -> ogpu_quad_store_data_low_s1_translator:uav_address
	wire    [3:0] ogpu_quad_store_data_low_s1_agent_m0_byteenable;                               // ogpu_quad_store_data_low_s1_agent:m0_byteenable -> ogpu_quad_store_data_low_s1_translator:uav_byteenable
	wire          ogpu_quad_store_data_low_s1_agent_m0_read;                                     // ogpu_quad_store_data_low_s1_agent:m0_read -> ogpu_quad_store_data_low_s1_translator:uav_read
	wire          ogpu_quad_store_data_low_s1_agent_m0_readdatavalid;                            // ogpu_quad_store_data_low_s1_translator:uav_readdatavalid -> ogpu_quad_store_data_low_s1_agent:m0_readdatavalid
	wire          ogpu_quad_store_data_low_s1_agent_m0_lock;                                     // ogpu_quad_store_data_low_s1_agent:m0_lock -> ogpu_quad_store_data_low_s1_translator:uav_lock
	wire   [31:0] ogpu_quad_store_data_low_s1_agent_m0_writedata;                                // ogpu_quad_store_data_low_s1_agent:m0_writedata -> ogpu_quad_store_data_low_s1_translator:uav_writedata
	wire          ogpu_quad_store_data_low_s1_agent_m0_write;                                    // ogpu_quad_store_data_low_s1_agent:m0_write -> ogpu_quad_store_data_low_s1_translator:uav_write
	wire    [2:0] ogpu_quad_store_data_low_s1_agent_m0_burstcount;                               // ogpu_quad_store_data_low_s1_agent:m0_burstcount -> ogpu_quad_store_data_low_s1_translator:uav_burstcount
	wire          ogpu_quad_store_data_low_s1_agent_rf_source_valid;                             // ogpu_quad_store_data_low_s1_agent:rf_source_valid -> ogpu_quad_store_data_low_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_quad_store_data_low_s1_agent_rf_source_data;                              // ogpu_quad_store_data_low_s1_agent:rf_source_data -> ogpu_quad_store_data_low_s1_agent_rsp_fifo:in_data
	wire          ogpu_quad_store_data_low_s1_agent_rf_source_ready;                             // ogpu_quad_store_data_low_s1_agent_rsp_fifo:in_ready -> ogpu_quad_store_data_low_s1_agent:rf_source_ready
	wire          ogpu_quad_store_data_low_s1_agent_rf_source_startofpacket;                     // ogpu_quad_store_data_low_s1_agent:rf_source_startofpacket -> ogpu_quad_store_data_low_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_quad_store_data_low_s1_agent_rf_source_endofpacket;                       // ogpu_quad_store_data_low_s1_agent:rf_source_endofpacket -> ogpu_quad_store_data_low_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_quad_store_data_low_s1_agent_rsp_fifo_out_valid;                          // ogpu_quad_store_data_low_s1_agent_rsp_fifo:out_valid -> ogpu_quad_store_data_low_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_quad_store_data_low_s1_agent_rsp_fifo_out_data;                           // ogpu_quad_store_data_low_s1_agent_rsp_fifo:out_data -> ogpu_quad_store_data_low_s1_agent:rf_sink_data
	wire          ogpu_quad_store_data_low_s1_agent_rsp_fifo_out_ready;                          // ogpu_quad_store_data_low_s1_agent:rf_sink_ready -> ogpu_quad_store_data_low_s1_agent_rsp_fifo:out_ready
	wire          ogpu_quad_store_data_low_s1_agent_rsp_fifo_out_startofpacket;                  // ogpu_quad_store_data_low_s1_agent_rsp_fifo:out_startofpacket -> ogpu_quad_store_data_low_s1_agent:rf_sink_startofpacket
	wire          ogpu_quad_store_data_low_s1_agent_rsp_fifo_out_endofpacket;                    // ogpu_quad_store_data_low_s1_agent_rsp_fifo:out_endofpacket -> ogpu_quad_store_data_low_s1_agent:rf_sink_endofpacket
	wire          ogpu_quad_store_data_low_s1_agent_rdata_fifo_src_valid;                        // ogpu_quad_store_data_low_s1_agent:rdata_fifo_src_valid -> ogpu_quad_store_data_low_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_quad_store_data_low_s1_agent_rdata_fifo_src_data;                         // ogpu_quad_store_data_low_s1_agent:rdata_fifo_src_data -> ogpu_quad_store_data_low_s1_agent_rdata_fifo:in_data
	wire          ogpu_quad_store_data_low_s1_agent_rdata_fifo_src_ready;                        // ogpu_quad_store_data_low_s1_agent_rdata_fifo:in_ready -> ogpu_quad_store_data_low_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_quad_store_ack_s1_agent_m0_readdata;                                      // ogpu_quad_store_ack_s1_translator:uav_readdata -> ogpu_quad_store_ack_s1_agent:m0_readdata
	wire          ogpu_quad_store_ack_s1_agent_m0_waitrequest;                                   // ogpu_quad_store_ack_s1_translator:uav_waitrequest -> ogpu_quad_store_ack_s1_agent:m0_waitrequest
	wire          ogpu_quad_store_ack_s1_agent_m0_debugaccess;                                   // ogpu_quad_store_ack_s1_agent:m0_debugaccess -> ogpu_quad_store_ack_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_quad_store_ack_s1_agent_m0_address;                                       // ogpu_quad_store_ack_s1_agent:m0_address -> ogpu_quad_store_ack_s1_translator:uav_address
	wire    [3:0] ogpu_quad_store_ack_s1_agent_m0_byteenable;                                    // ogpu_quad_store_ack_s1_agent:m0_byteenable -> ogpu_quad_store_ack_s1_translator:uav_byteenable
	wire          ogpu_quad_store_ack_s1_agent_m0_read;                                          // ogpu_quad_store_ack_s1_agent:m0_read -> ogpu_quad_store_ack_s1_translator:uav_read
	wire          ogpu_quad_store_ack_s1_agent_m0_readdatavalid;                                 // ogpu_quad_store_ack_s1_translator:uav_readdatavalid -> ogpu_quad_store_ack_s1_agent:m0_readdatavalid
	wire          ogpu_quad_store_ack_s1_agent_m0_lock;                                          // ogpu_quad_store_ack_s1_agent:m0_lock -> ogpu_quad_store_ack_s1_translator:uav_lock
	wire   [31:0] ogpu_quad_store_ack_s1_agent_m0_writedata;                                     // ogpu_quad_store_ack_s1_agent:m0_writedata -> ogpu_quad_store_ack_s1_translator:uav_writedata
	wire          ogpu_quad_store_ack_s1_agent_m0_write;                                         // ogpu_quad_store_ack_s1_agent:m0_write -> ogpu_quad_store_ack_s1_translator:uav_write
	wire    [2:0] ogpu_quad_store_ack_s1_agent_m0_burstcount;                                    // ogpu_quad_store_ack_s1_agent:m0_burstcount -> ogpu_quad_store_ack_s1_translator:uav_burstcount
	wire          ogpu_quad_store_ack_s1_agent_rf_source_valid;                                  // ogpu_quad_store_ack_s1_agent:rf_source_valid -> ogpu_quad_store_ack_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_quad_store_ack_s1_agent_rf_source_data;                                   // ogpu_quad_store_ack_s1_agent:rf_source_data -> ogpu_quad_store_ack_s1_agent_rsp_fifo:in_data
	wire          ogpu_quad_store_ack_s1_agent_rf_source_ready;                                  // ogpu_quad_store_ack_s1_agent_rsp_fifo:in_ready -> ogpu_quad_store_ack_s1_agent:rf_source_ready
	wire          ogpu_quad_store_ack_s1_agent_rf_source_startofpacket;                          // ogpu_quad_store_ack_s1_agent:rf_source_startofpacket -> ogpu_quad_store_ack_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_quad_store_ack_s1_agent_rf_source_endofpacket;                            // ogpu_quad_store_ack_s1_agent:rf_source_endofpacket -> ogpu_quad_store_ack_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_quad_store_ack_s1_agent_rsp_fifo_out_valid;                               // ogpu_quad_store_ack_s1_agent_rsp_fifo:out_valid -> ogpu_quad_store_ack_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_quad_store_ack_s1_agent_rsp_fifo_out_data;                                // ogpu_quad_store_ack_s1_agent_rsp_fifo:out_data -> ogpu_quad_store_ack_s1_agent:rf_sink_data
	wire          ogpu_quad_store_ack_s1_agent_rsp_fifo_out_ready;                               // ogpu_quad_store_ack_s1_agent:rf_sink_ready -> ogpu_quad_store_ack_s1_agent_rsp_fifo:out_ready
	wire          ogpu_quad_store_ack_s1_agent_rsp_fifo_out_startofpacket;                       // ogpu_quad_store_ack_s1_agent_rsp_fifo:out_startofpacket -> ogpu_quad_store_ack_s1_agent:rf_sink_startofpacket
	wire          ogpu_quad_store_ack_s1_agent_rsp_fifo_out_endofpacket;                         // ogpu_quad_store_ack_s1_agent_rsp_fifo:out_endofpacket -> ogpu_quad_store_ack_s1_agent:rf_sink_endofpacket
	wire          ogpu_quad_store_ack_s1_agent_rdata_fifo_src_valid;                             // ogpu_quad_store_ack_s1_agent:rdata_fifo_src_valid -> ogpu_quad_store_ack_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_quad_store_ack_s1_agent_rdata_fifo_src_data;                              // ogpu_quad_store_ack_s1_agent:rdata_fifo_src_data -> ogpu_quad_store_ack_s1_agent_rdata_fifo:in_data
	wire          ogpu_quad_store_ack_s1_agent_rdata_fifo_src_ready;                             // ogpu_quad_store_ack_s1_agent_rdata_fifo:in_ready -> ogpu_quad_store_ack_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ogpu_reset_s1_agent_m0_readdata;                                               // ogpu_reset_s1_translator:uav_readdata -> ogpu_reset_s1_agent:m0_readdata
	wire          ogpu_reset_s1_agent_m0_waitrequest;                                            // ogpu_reset_s1_translator:uav_waitrequest -> ogpu_reset_s1_agent:m0_waitrequest
	wire          ogpu_reset_s1_agent_m0_debugaccess;                                            // ogpu_reset_s1_agent:m0_debugaccess -> ogpu_reset_s1_translator:uav_debugaccess
	wire   [29:0] ogpu_reset_s1_agent_m0_address;                                                // ogpu_reset_s1_agent:m0_address -> ogpu_reset_s1_translator:uav_address
	wire    [3:0] ogpu_reset_s1_agent_m0_byteenable;                                             // ogpu_reset_s1_agent:m0_byteenable -> ogpu_reset_s1_translator:uav_byteenable
	wire          ogpu_reset_s1_agent_m0_read;                                                   // ogpu_reset_s1_agent:m0_read -> ogpu_reset_s1_translator:uav_read
	wire          ogpu_reset_s1_agent_m0_readdatavalid;                                          // ogpu_reset_s1_translator:uav_readdatavalid -> ogpu_reset_s1_agent:m0_readdatavalid
	wire          ogpu_reset_s1_agent_m0_lock;                                                   // ogpu_reset_s1_agent:m0_lock -> ogpu_reset_s1_translator:uav_lock
	wire   [31:0] ogpu_reset_s1_agent_m0_writedata;                                              // ogpu_reset_s1_agent:m0_writedata -> ogpu_reset_s1_translator:uav_writedata
	wire          ogpu_reset_s1_agent_m0_write;                                                  // ogpu_reset_s1_agent:m0_write -> ogpu_reset_s1_translator:uav_write
	wire    [2:0] ogpu_reset_s1_agent_m0_burstcount;                                             // ogpu_reset_s1_agent:m0_burstcount -> ogpu_reset_s1_translator:uav_burstcount
	wire          ogpu_reset_s1_agent_rf_source_valid;                                           // ogpu_reset_s1_agent:rf_source_valid -> ogpu_reset_s1_agent_rsp_fifo:in_valid
	wire  [131:0] ogpu_reset_s1_agent_rf_source_data;                                            // ogpu_reset_s1_agent:rf_source_data -> ogpu_reset_s1_agent_rsp_fifo:in_data
	wire          ogpu_reset_s1_agent_rf_source_ready;                                           // ogpu_reset_s1_agent_rsp_fifo:in_ready -> ogpu_reset_s1_agent:rf_source_ready
	wire          ogpu_reset_s1_agent_rf_source_startofpacket;                                   // ogpu_reset_s1_agent:rf_source_startofpacket -> ogpu_reset_s1_agent_rsp_fifo:in_startofpacket
	wire          ogpu_reset_s1_agent_rf_source_endofpacket;                                     // ogpu_reset_s1_agent:rf_source_endofpacket -> ogpu_reset_s1_agent_rsp_fifo:in_endofpacket
	wire          ogpu_reset_s1_agent_rsp_fifo_out_valid;                                        // ogpu_reset_s1_agent_rsp_fifo:out_valid -> ogpu_reset_s1_agent:rf_sink_valid
	wire  [131:0] ogpu_reset_s1_agent_rsp_fifo_out_data;                                         // ogpu_reset_s1_agent_rsp_fifo:out_data -> ogpu_reset_s1_agent:rf_sink_data
	wire          ogpu_reset_s1_agent_rsp_fifo_out_ready;                                        // ogpu_reset_s1_agent:rf_sink_ready -> ogpu_reset_s1_agent_rsp_fifo:out_ready
	wire          ogpu_reset_s1_agent_rsp_fifo_out_startofpacket;                                // ogpu_reset_s1_agent_rsp_fifo:out_startofpacket -> ogpu_reset_s1_agent:rf_sink_startofpacket
	wire          ogpu_reset_s1_agent_rsp_fifo_out_endofpacket;                                  // ogpu_reset_s1_agent_rsp_fifo:out_endofpacket -> ogpu_reset_s1_agent:rf_sink_endofpacket
	wire          ogpu_reset_s1_agent_rdata_fifo_src_valid;                                      // ogpu_reset_s1_agent:rdata_fifo_src_valid -> ogpu_reset_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ogpu_reset_s1_agent_rdata_fifo_src_data;                                       // ogpu_reset_s1_agent:rdata_fifo_src_data -> ogpu_reset_s1_agent_rdata_fifo:in_data
	wire          ogpu_reset_s1_agent_rdata_fifo_src_ready;                                      // ogpu_reset_s1_agent_rdata_fifo:in_ready -> ogpu_reset_s1_agent:rdata_fifo_src_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_valid;                                     // hps_0_h2f_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [166:0] hps_0_h2f_axi_master_agent_write_cp_data;                                      // hps_0_h2f_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_axi_master_agent_write_cp_ready;                                     // router:sink_ready -> hps_0_h2f_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_startofpacket;                             // hps_0_h2f_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_write_cp_endofpacket;                               // hps_0_h2f_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_valid;                                      // hps_0_h2f_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [166:0] hps_0_h2f_axi_master_agent_read_cp_data;                                       // hps_0_h2f_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_axi_master_agent_read_cp_ready;                                      // router_001:sink_ready -> hps_0_h2f_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_axi_master_agent_read_cp_startofpacket;                              // hps_0_h2f_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_endofpacket;                                // hps_0_h2f_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rp_valid;                      // ogpu_raster_unit_quad_buffer_addr_high_s1_agent:rp_valid -> router_002:sink_valid
	wire  [130:0] ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rp_data;                       // ogpu_raster_unit_quad_buffer_addr_high_s1_agent:rp_data -> router_002:sink_data
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rp_ready;                      // router_002:sink_ready -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent:rp_ready
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rp_startofpacket;              // ogpu_raster_unit_quad_buffer_addr_high_s1_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rp_endofpacket;                // ogpu_raster_unit_quad_buffer_addr_high_s1_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rp_valid;                       // ogpu_raster_unit_quad_buffer_addr_low_s1_agent:rp_valid -> router_003:sink_valid
	wire  [130:0] ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rp_data;                        // ogpu_raster_unit_quad_buffer_addr_low_s1_agent:rp_data -> router_003:sink_data
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rp_ready;                       // router_003:sink_ready -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent:rp_ready
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rp_startofpacket;               // ogpu_raster_unit_quad_buffer_addr_low_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rp_endofpacket;                 // ogpu_raster_unit_quad_buffer_addr_low_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          ogpu_raster_unit_depth_coef_c_s1_agent_rp_valid;                               // ogpu_raster_unit_depth_coef_c_s1_agent:rp_valid -> router_004:sink_valid
	wire  [130:0] ogpu_raster_unit_depth_coef_c_s1_agent_rp_data;                                // ogpu_raster_unit_depth_coef_c_s1_agent:rp_data -> router_004:sink_data
	wire          ogpu_raster_unit_depth_coef_c_s1_agent_rp_ready;                               // router_004:sink_ready -> ogpu_raster_unit_depth_coef_c_s1_agent:rp_ready
	wire          ogpu_raster_unit_depth_coef_c_s1_agent_rp_startofpacket;                       // ogpu_raster_unit_depth_coef_c_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          ogpu_raster_unit_depth_coef_c_s1_agent_rp_endofpacket;                         // ogpu_raster_unit_depth_coef_c_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          ogpu_raster_unit_depth_coef_b_s1_agent_rp_valid;                               // ogpu_raster_unit_depth_coef_b_s1_agent:rp_valid -> router_005:sink_valid
	wire  [130:0] ogpu_raster_unit_depth_coef_b_s1_agent_rp_data;                                // ogpu_raster_unit_depth_coef_b_s1_agent:rp_data -> router_005:sink_data
	wire          ogpu_raster_unit_depth_coef_b_s1_agent_rp_ready;                               // router_005:sink_ready -> ogpu_raster_unit_depth_coef_b_s1_agent:rp_ready
	wire          ogpu_raster_unit_depth_coef_b_s1_agent_rp_startofpacket;                       // ogpu_raster_unit_depth_coef_b_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          ogpu_raster_unit_depth_coef_b_s1_agent_rp_endofpacket;                         // ogpu_raster_unit_depth_coef_b_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          ogpu_raster_unit_depth_coef_a_s1_agent_rp_valid;                               // ogpu_raster_unit_depth_coef_a_s1_agent:rp_valid -> router_006:sink_valid
	wire  [130:0] ogpu_raster_unit_depth_coef_a_s1_agent_rp_data;                                // ogpu_raster_unit_depth_coef_a_s1_agent:rp_data -> router_006:sink_data
	wire          ogpu_raster_unit_depth_coef_a_s1_agent_rp_ready;                               // router_006:sink_ready -> ogpu_raster_unit_depth_coef_a_s1_agent:rp_ready
	wire          ogpu_raster_unit_depth_coef_a_s1_agent_rp_startofpacket;                       // ogpu_raster_unit_depth_coef_a_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          ogpu_raster_unit_depth_coef_a_s1_agent_rp_endofpacket;                         // ogpu_raster_unit_depth_coef_a_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          ogpu_raster_unit_tile1_s1_agent_rp_valid;                                      // ogpu_raster_unit_tile1_s1_agent:rp_valid -> router_007:sink_valid
	wire  [130:0] ogpu_raster_unit_tile1_s1_agent_rp_data;                                       // ogpu_raster_unit_tile1_s1_agent:rp_data -> router_007:sink_data
	wire          ogpu_raster_unit_tile1_s1_agent_rp_ready;                                      // router_007:sink_ready -> ogpu_raster_unit_tile1_s1_agent:rp_ready
	wire          ogpu_raster_unit_tile1_s1_agent_rp_startofpacket;                              // ogpu_raster_unit_tile1_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          ogpu_raster_unit_tile1_s1_agent_rp_endofpacket;                                // ogpu_raster_unit_tile1_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          ogpu_raster_unit_tile0_s1_agent_rp_valid;                                      // ogpu_raster_unit_tile0_s1_agent:rp_valid -> router_008:sink_valid
	wire  [130:0] ogpu_raster_unit_tile0_s1_agent_rp_data;                                       // ogpu_raster_unit_tile0_s1_agent:rp_data -> router_008:sink_data
	wire          ogpu_raster_unit_tile0_s1_agent_rp_ready;                                      // router_008:sink_ready -> ogpu_raster_unit_tile0_s1_agent:rp_ready
	wire          ogpu_raster_unit_tile0_s1_agent_rp_startofpacket;                              // ogpu_raster_unit_tile0_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          ogpu_raster_unit_tile0_s1_agent_rp_endofpacket;                                // ogpu_raster_unit_tile0_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          ogpu_raster_unit_clip_rect1_s1_agent_rp_valid;                                 // ogpu_raster_unit_clip_rect1_s1_agent:rp_valid -> router_009:sink_valid
	wire  [130:0] ogpu_raster_unit_clip_rect1_s1_agent_rp_data;                                  // ogpu_raster_unit_clip_rect1_s1_agent:rp_data -> router_009:sink_data
	wire          ogpu_raster_unit_clip_rect1_s1_agent_rp_ready;                                 // router_009:sink_ready -> ogpu_raster_unit_clip_rect1_s1_agent:rp_ready
	wire          ogpu_raster_unit_clip_rect1_s1_agent_rp_startofpacket;                         // ogpu_raster_unit_clip_rect1_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          ogpu_raster_unit_clip_rect1_s1_agent_rp_endofpacket;                           // ogpu_raster_unit_clip_rect1_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          ogpu_raster_unit_clip_rect0_s1_agent_rp_valid;                                 // ogpu_raster_unit_clip_rect0_s1_agent:rp_valid -> router_010:sink_valid
	wire  [130:0] ogpu_raster_unit_clip_rect0_s1_agent_rp_data;                                  // ogpu_raster_unit_clip_rect0_s1_agent:rp_data -> router_010:sink_data
	wire          ogpu_raster_unit_clip_rect0_s1_agent_rp_ready;                                 // router_010:sink_ready -> ogpu_raster_unit_clip_rect0_s1_agent:rp_ready
	wire          ogpu_raster_unit_clip_rect0_s1_agent_rp_startofpacket;                         // ogpu_raster_unit_clip_rect0_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          ogpu_raster_unit_clip_rect0_s1_agent_rp_endofpacket;                           // ogpu_raster_unit_clip_rect0_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          ogpu_raster_unit_command_s1_agent_rp_valid;                                    // ogpu_raster_unit_command_s1_agent:rp_valid -> router_011:sink_valid
	wire  [130:0] ogpu_raster_unit_command_s1_agent_rp_data;                                     // ogpu_raster_unit_command_s1_agent:rp_data -> router_011:sink_data
	wire          ogpu_raster_unit_command_s1_agent_rp_ready;                                    // router_011:sink_ready -> ogpu_raster_unit_command_s1_agent:rp_ready
	wire          ogpu_raster_unit_command_s1_agent_rp_startofpacket;                            // ogpu_raster_unit_command_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          ogpu_raster_unit_command_s1_agent_rp_endofpacket;                              // ogpu_raster_unit_command_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          ogpu_raster_unit_status_s1_agent_rp_valid;                                     // ogpu_raster_unit_status_s1_agent:rp_valid -> router_012:sink_valid
	wire  [130:0] ogpu_raster_unit_status_s1_agent_rp_data;                                      // ogpu_raster_unit_status_s1_agent:rp_data -> router_012:sink_data
	wire          ogpu_raster_unit_status_s1_agent_rp_ready;                                     // router_012:sink_ready -> ogpu_raster_unit_status_s1_agent:rp_ready
	wire          ogpu_raster_unit_status_s1_agent_rp_startofpacket;                             // ogpu_raster_unit_status_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          ogpu_raster_unit_status_s1_agent_rp_endofpacket;                               // ogpu_raster_unit_status_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          ogpu_raster_unit_v2z_s1_agent_rp_valid;                                        // ogpu_raster_unit_v2z_s1_agent:rp_valid -> router_013:sink_valid
	wire  [130:0] ogpu_raster_unit_v2z_s1_agent_rp_data;                                         // ogpu_raster_unit_v2z_s1_agent:rp_data -> router_013:sink_data
	wire          ogpu_raster_unit_v2z_s1_agent_rp_ready;                                        // router_013:sink_ready -> ogpu_raster_unit_v2z_s1_agent:rp_ready
	wire          ogpu_raster_unit_v2z_s1_agent_rp_startofpacket;                                // ogpu_raster_unit_v2z_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          ogpu_raster_unit_v2z_s1_agent_rp_endofpacket;                                  // ogpu_raster_unit_v2z_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          ogpu_raster_unit_v2y_s1_agent_rp_valid;                                        // ogpu_raster_unit_v2y_s1_agent:rp_valid -> router_014:sink_valid
	wire  [130:0] ogpu_raster_unit_v2y_s1_agent_rp_data;                                         // ogpu_raster_unit_v2y_s1_agent:rp_data -> router_014:sink_data
	wire          ogpu_raster_unit_v2y_s1_agent_rp_ready;                                        // router_014:sink_ready -> ogpu_raster_unit_v2y_s1_agent:rp_ready
	wire          ogpu_raster_unit_v2y_s1_agent_rp_startofpacket;                                // ogpu_raster_unit_v2y_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          ogpu_raster_unit_v2y_s1_agent_rp_endofpacket;                                  // ogpu_raster_unit_v2y_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          ogpu_raster_unit_v2x_s1_agent_rp_valid;                                        // ogpu_raster_unit_v2x_s1_agent:rp_valid -> router_015:sink_valid
	wire  [130:0] ogpu_raster_unit_v2x_s1_agent_rp_data;                                         // ogpu_raster_unit_v2x_s1_agent:rp_data -> router_015:sink_data
	wire          ogpu_raster_unit_v2x_s1_agent_rp_ready;                                        // router_015:sink_ready -> ogpu_raster_unit_v2x_s1_agent:rp_ready
	wire          ogpu_raster_unit_v2x_s1_agent_rp_startofpacket;                                // ogpu_raster_unit_v2x_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          ogpu_raster_unit_v2x_s1_agent_rp_endofpacket;                                  // ogpu_raster_unit_v2x_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          ogpu_raster_unit_v1z_s1_agent_rp_valid;                                        // ogpu_raster_unit_v1z_s1_agent:rp_valid -> router_016:sink_valid
	wire  [130:0] ogpu_raster_unit_v1z_s1_agent_rp_data;                                         // ogpu_raster_unit_v1z_s1_agent:rp_data -> router_016:sink_data
	wire          ogpu_raster_unit_v1z_s1_agent_rp_ready;                                        // router_016:sink_ready -> ogpu_raster_unit_v1z_s1_agent:rp_ready
	wire          ogpu_raster_unit_v1z_s1_agent_rp_startofpacket;                                // ogpu_raster_unit_v1z_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          ogpu_raster_unit_v1z_s1_agent_rp_endofpacket;                                  // ogpu_raster_unit_v1z_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          ogpu_raster_unit_v1y_s1_agent_rp_valid;                                        // ogpu_raster_unit_v1y_s1_agent:rp_valid -> router_017:sink_valid
	wire  [130:0] ogpu_raster_unit_v1y_s1_agent_rp_data;                                         // ogpu_raster_unit_v1y_s1_agent:rp_data -> router_017:sink_data
	wire          ogpu_raster_unit_v1y_s1_agent_rp_ready;                                        // router_017:sink_ready -> ogpu_raster_unit_v1y_s1_agent:rp_ready
	wire          ogpu_raster_unit_v1y_s1_agent_rp_startofpacket;                                // ogpu_raster_unit_v1y_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          ogpu_raster_unit_v1y_s1_agent_rp_endofpacket;                                  // ogpu_raster_unit_v1y_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          ogpu_raster_unit_v1x_s1_agent_rp_valid;                                        // ogpu_raster_unit_v1x_s1_agent:rp_valid -> router_018:sink_valid
	wire  [130:0] ogpu_raster_unit_v1x_s1_agent_rp_data;                                         // ogpu_raster_unit_v1x_s1_agent:rp_data -> router_018:sink_data
	wire          ogpu_raster_unit_v1x_s1_agent_rp_ready;                                        // router_018:sink_ready -> ogpu_raster_unit_v1x_s1_agent:rp_ready
	wire          ogpu_raster_unit_v1x_s1_agent_rp_startofpacket;                                // ogpu_raster_unit_v1x_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          ogpu_raster_unit_v1x_s1_agent_rp_endofpacket;                                  // ogpu_raster_unit_v1x_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          ogpu_raster_unit_v0z_s1_agent_rp_valid;                                        // ogpu_raster_unit_v0z_s1_agent:rp_valid -> router_019:sink_valid
	wire  [130:0] ogpu_raster_unit_v0z_s1_agent_rp_data;                                         // ogpu_raster_unit_v0z_s1_agent:rp_data -> router_019:sink_data
	wire          ogpu_raster_unit_v0z_s1_agent_rp_ready;                                        // router_019:sink_ready -> ogpu_raster_unit_v0z_s1_agent:rp_ready
	wire          ogpu_raster_unit_v0z_s1_agent_rp_startofpacket;                                // ogpu_raster_unit_v0z_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          ogpu_raster_unit_v0z_s1_agent_rp_endofpacket;                                  // ogpu_raster_unit_v0z_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          ogpu_raster_unit_v0y_s1_agent_rp_valid;                                        // ogpu_raster_unit_v0y_s1_agent:rp_valid -> router_020:sink_valid
	wire  [130:0] ogpu_raster_unit_v0y_s1_agent_rp_data;                                         // ogpu_raster_unit_v0y_s1_agent:rp_data -> router_020:sink_data
	wire          ogpu_raster_unit_v0y_s1_agent_rp_ready;                                        // router_020:sink_ready -> ogpu_raster_unit_v0y_s1_agent:rp_ready
	wire          ogpu_raster_unit_v0y_s1_agent_rp_startofpacket;                                // ogpu_raster_unit_v0y_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          ogpu_raster_unit_v0y_s1_agent_rp_endofpacket;                                  // ogpu_raster_unit_v0y_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          ogpu_raster_unit_v0x_s1_agent_rp_valid;                                        // ogpu_raster_unit_v0x_s1_agent:rp_valid -> router_021:sink_valid
	wire  [130:0] ogpu_raster_unit_v0x_s1_agent_rp_data;                                         // ogpu_raster_unit_v0x_s1_agent:rp_data -> router_021:sink_data
	wire          ogpu_raster_unit_v0x_s1_agent_rp_ready;                                        // router_021:sink_ready -> ogpu_raster_unit_v0x_s1_agent:rp_ready
	wire          ogpu_raster_unit_v0x_s1_agent_rp_startofpacket;                                // ogpu_raster_unit_v0x_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          ogpu_raster_unit_v0x_s1_agent_rp_endofpacket;                                  // ogpu_raster_unit_v0x_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          ogpu_quad_store_req_s1_agent_rp_valid;                                         // ogpu_quad_store_req_s1_agent:rp_valid -> router_022:sink_valid
	wire  [130:0] ogpu_quad_store_req_s1_agent_rp_data;                                          // ogpu_quad_store_req_s1_agent:rp_data -> router_022:sink_data
	wire          ogpu_quad_store_req_s1_agent_rp_ready;                                         // router_022:sink_ready -> ogpu_quad_store_req_s1_agent:rp_ready
	wire          ogpu_quad_store_req_s1_agent_rp_startofpacket;                                 // ogpu_quad_store_req_s1_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          ogpu_quad_store_req_s1_agent_rp_endofpacket;                                   // ogpu_quad_store_req_s1_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          ogpu_quad_store_data_high_s1_agent_rp_valid;                                   // ogpu_quad_store_data_high_s1_agent:rp_valid -> router_023:sink_valid
	wire  [130:0] ogpu_quad_store_data_high_s1_agent_rp_data;                                    // ogpu_quad_store_data_high_s1_agent:rp_data -> router_023:sink_data
	wire          ogpu_quad_store_data_high_s1_agent_rp_ready;                                   // router_023:sink_ready -> ogpu_quad_store_data_high_s1_agent:rp_ready
	wire          ogpu_quad_store_data_high_s1_agent_rp_startofpacket;                           // ogpu_quad_store_data_high_s1_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          ogpu_quad_store_data_high_s1_agent_rp_endofpacket;                             // ogpu_quad_store_data_high_s1_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          ogpu_quad_store_data_low_s1_agent_rp_valid;                                    // ogpu_quad_store_data_low_s1_agent:rp_valid -> router_024:sink_valid
	wire  [130:0] ogpu_quad_store_data_low_s1_agent_rp_data;                                     // ogpu_quad_store_data_low_s1_agent:rp_data -> router_024:sink_data
	wire          ogpu_quad_store_data_low_s1_agent_rp_ready;                                    // router_024:sink_ready -> ogpu_quad_store_data_low_s1_agent:rp_ready
	wire          ogpu_quad_store_data_low_s1_agent_rp_startofpacket;                            // ogpu_quad_store_data_low_s1_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          ogpu_quad_store_data_low_s1_agent_rp_endofpacket;                              // ogpu_quad_store_data_low_s1_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          ogpu_quad_store_ack_s1_agent_rp_valid;                                         // ogpu_quad_store_ack_s1_agent:rp_valid -> router_025:sink_valid
	wire  [130:0] ogpu_quad_store_ack_s1_agent_rp_data;                                          // ogpu_quad_store_ack_s1_agent:rp_data -> router_025:sink_data
	wire          ogpu_quad_store_ack_s1_agent_rp_ready;                                         // router_025:sink_ready -> ogpu_quad_store_ack_s1_agent:rp_ready
	wire          ogpu_quad_store_ack_s1_agent_rp_startofpacket;                                 // ogpu_quad_store_ack_s1_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          ogpu_quad_store_ack_s1_agent_rp_endofpacket;                                   // ogpu_quad_store_ack_s1_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          ogpu_reset_s1_agent_rp_valid;                                                  // ogpu_reset_s1_agent:rp_valid -> router_026:sink_valid
	wire  [130:0] ogpu_reset_s1_agent_rp_data;                                                   // ogpu_reset_s1_agent:rp_data -> router_026:sink_data
	wire          ogpu_reset_s1_agent_rp_ready;                                                  // router_026:sink_ready -> ogpu_reset_s1_agent:rp_ready
	wire          ogpu_reset_s1_agent_rp_startofpacket;                                          // ogpu_reset_s1_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          ogpu_reset_s1_agent_rp_endofpacket;                                            // ogpu_reset_s1_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_src_valid;                                                              // router:src_valid -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_valid
	wire  [166:0] router_src_data;                                                               // router:src_data -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                              // hps_0_h2f_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire   [24:0] router_src_channel;                                                            // router:src_channel -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                      // router:src_startofpacket -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                        // router:src_endofpacket -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [166:0] hps_0_h2f_axi_master_wr_limiter_cmd_src_data;                                  // hps_0_h2f_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_ready;                                 // cmd_demux:sink_ready -> hps_0_h2f_axi_master_wr_limiter:cmd_src_ready
	wire   [24:0] hps_0_h2f_axi_master_wr_limiter_cmd_src_channel;                               // hps_0_h2f_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket;                         // hps_0_h2f_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket;                           // hps_0_h2f_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                             // rsp_mux:src_valid -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_valid
	wire  [166:0] rsp_mux_src_data;                                                              // rsp_mux:src_data -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                             // hps_0_h2f_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [24:0] rsp_mux_src_channel;                                                           // rsp_mux:src_channel -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                     // rsp_mux:src_startofpacket -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                       // rsp_mux:src_endofpacket -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_valid;                                 // hps_0_h2f_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_axi_master_agent:write_rp_valid
	wire  [166:0] hps_0_h2f_axi_master_wr_limiter_rsp_src_data;                                  // hps_0_h2f_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_axi_master_agent:write_rp_data
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_ready;                                 // hps_0_h2f_axi_master_agent:write_rp_ready -> hps_0_h2f_axi_master_wr_limiter:rsp_src_ready
	wire   [24:0] hps_0_h2f_axi_master_wr_limiter_rsp_src_channel;                               // hps_0_h2f_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket;                         // hps_0_h2f_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket;                           // hps_0_h2f_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                                          // router_001:src_valid -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_valid
	wire  [166:0] router_001_src_data;                                                           // router_001:src_data -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                          // hps_0_h2f_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [24:0] router_001_src_channel;                                                        // router_001:src_channel -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                  // router_001:src_startofpacket -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                    // router_001:src_endofpacket -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [166:0] hps_0_h2f_axi_master_rd_limiter_cmd_src_data;                                  // hps_0_h2f_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_ready;                                 // cmd_demux_001:sink_ready -> hps_0_h2f_axi_master_rd_limiter:cmd_src_ready
	wire   [24:0] hps_0_h2f_axi_master_rd_limiter_cmd_src_channel;                               // hps_0_h2f_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket;                         // hps_0_h2f_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket;                           // hps_0_h2f_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                         // rsp_mux_001:src_valid -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_valid
	wire  [166:0] rsp_mux_001_src_data;                                                          // rsp_mux_001:src_data -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                         // hps_0_h2f_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [24:0] rsp_mux_001_src_channel;                                                       // rsp_mux_001:src_channel -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                 // rsp_mux_001:src_startofpacket -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                   // rsp_mux_001:src_endofpacket -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_valid;                                 // hps_0_h2f_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_axi_master_agent:read_rp_valid
	wire  [166:0] hps_0_h2f_axi_master_rd_limiter_rsp_src_data;                                  // hps_0_h2f_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_axi_master_agent:read_rp_data
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_ready;                                 // hps_0_h2f_axi_master_agent:read_rp_ready -> hps_0_h2f_axi_master_rd_limiter:rsp_src_ready
	wire   [24:0] hps_0_h2f_axi_master_rd_limiter_rsp_src_channel;                               // hps_0_h2f_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket;                         // hps_0_h2f_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket;                           // hps_0_h2f_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_axi_master_agent:read_rp_endofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter_source0_valid;         // ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter:source0_valid -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent:cp_valid
	wire  [130:0] ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter_source0_data;          // ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter:source0_data -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent:cp_data
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter_source0_ready;         // ogpu_raster_unit_quad_buffer_addr_high_s1_agent:cp_ready -> ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter_source0_channel;       // ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter:source0_channel -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent:cp_channel
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter_source0_startofpacket; // ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter:source0_startofpacket -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent:cp_startofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter_source0_endofpacket;   // ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter:source0_endofpacket -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent:cp_endofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter_source0_valid;          // ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter:source0_valid -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent:cp_valid
	wire  [130:0] ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter_source0_data;           // ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter:source0_data -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent:cp_data
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter_source0_ready;          // ogpu_raster_unit_quad_buffer_addr_low_s1_agent:cp_ready -> ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter_source0_channel;        // ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter:source0_channel -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent:cp_channel
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter_source0_startofpacket;  // ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter:source0_startofpacket -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent:cp_startofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter_source0_endofpacket;    // ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter:source0_endofpacket -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent:cp_endofpacket
	wire          ogpu_raster_unit_depth_coef_c_s1_burst_adapter_source0_valid;                  // ogpu_raster_unit_depth_coef_c_s1_burst_adapter:source0_valid -> ogpu_raster_unit_depth_coef_c_s1_agent:cp_valid
	wire  [130:0] ogpu_raster_unit_depth_coef_c_s1_burst_adapter_source0_data;                   // ogpu_raster_unit_depth_coef_c_s1_burst_adapter:source0_data -> ogpu_raster_unit_depth_coef_c_s1_agent:cp_data
	wire          ogpu_raster_unit_depth_coef_c_s1_burst_adapter_source0_ready;                  // ogpu_raster_unit_depth_coef_c_s1_agent:cp_ready -> ogpu_raster_unit_depth_coef_c_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_raster_unit_depth_coef_c_s1_burst_adapter_source0_channel;                // ogpu_raster_unit_depth_coef_c_s1_burst_adapter:source0_channel -> ogpu_raster_unit_depth_coef_c_s1_agent:cp_channel
	wire          ogpu_raster_unit_depth_coef_c_s1_burst_adapter_source0_startofpacket;          // ogpu_raster_unit_depth_coef_c_s1_burst_adapter:source0_startofpacket -> ogpu_raster_unit_depth_coef_c_s1_agent:cp_startofpacket
	wire          ogpu_raster_unit_depth_coef_c_s1_burst_adapter_source0_endofpacket;            // ogpu_raster_unit_depth_coef_c_s1_burst_adapter:source0_endofpacket -> ogpu_raster_unit_depth_coef_c_s1_agent:cp_endofpacket
	wire          ogpu_raster_unit_depth_coef_b_s1_burst_adapter_source0_valid;                  // ogpu_raster_unit_depth_coef_b_s1_burst_adapter:source0_valid -> ogpu_raster_unit_depth_coef_b_s1_agent:cp_valid
	wire  [130:0] ogpu_raster_unit_depth_coef_b_s1_burst_adapter_source0_data;                   // ogpu_raster_unit_depth_coef_b_s1_burst_adapter:source0_data -> ogpu_raster_unit_depth_coef_b_s1_agent:cp_data
	wire          ogpu_raster_unit_depth_coef_b_s1_burst_adapter_source0_ready;                  // ogpu_raster_unit_depth_coef_b_s1_agent:cp_ready -> ogpu_raster_unit_depth_coef_b_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_raster_unit_depth_coef_b_s1_burst_adapter_source0_channel;                // ogpu_raster_unit_depth_coef_b_s1_burst_adapter:source0_channel -> ogpu_raster_unit_depth_coef_b_s1_agent:cp_channel
	wire          ogpu_raster_unit_depth_coef_b_s1_burst_adapter_source0_startofpacket;          // ogpu_raster_unit_depth_coef_b_s1_burst_adapter:source0_startofpacket -> ogpu_raster_unit_depth_coef_b_s1_agent:cp_startofpacket
	wire          ogpu_raster_unit_depth_coef_b_s1_burst_adapter_source0_endofpacket;            // ogpu_raster_unit_depth_coef_b_s1_burst_adapter:source0_endofpacket -> ogpu_raster_unit_depth_coef_b_s1_agent:cp_endofpacket
	wire          ogpu_raster_unit_depth_coef_a_s1_burst_adapter_source0_valid;                  // ogpu_raster_unit_depth_coef_a_s1_burst_adapter:source0_valid -> ogpu_raster_unit_depth_coef_a_s1_agent:cp_valid
	wire  [130:0] ogpu_raster_unit_depth_coef_a_s1_burst_adapter_source0_data;                   // ogpu_raster_unit_depth_coef_a_s1_burst_adapter:source0_data -> ogpu_raster_unit_depth_coef_a_s1_agent:cp_data
	wire          ogpu_raster_unit_depth_coef_a_s1_burst_adapter_source0_ready;                  // ogpu_raster_unit_depth_coef_a_s1_agent:cp_ready -> ogpu_raster_unit_depth_coef_a_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_raster_unit_depth_coef_a_s1_burst_adapter_source0_channel;                // ogpu_raster_unit_depth_coef_a_s1_burst_adapter:source0_channel -> ogpu_raster_unit_depth_coef_a_s1_agent:cp_channel
	wire          ogpu_raster_unit_depth_coef_a_s1_burst_adapter_source0_startofpacket;          // ogpu_raster_unit_depth_coef_a_s1_burst_adapter:source0_startofpacket -> ogpu_raster_unit_depth_coef_a_s1_agent:cp_startofpacket
	wire          ogpu_raster_unit_depth_coef_a_s1_burst_adapter_source0_endofpacket;            // ogpu_raster_unit_depth_coef_a_s1_burst_adapter:source0_endofpacket -> ogpu_raster_unit_depth_coef_a_s1_agent:cp_endofpacket
	wire          ogpu_raster_unit_tile1_s1_burst_adapter_source0_valid;                         // ogpu_raster_unit_tile1_s1_burst_adapter:source0_valid -> ogpu_raster_unit_tile1_s1_agent:cp_valid
	wire  [130:0] ogpu_raster_unit_tile1_s1_burst_adapter_source0_data;                          // ogpu_raster_unit_tile1_s1_burst_adapter:source0_data -> ogpu_raster_unit_tile1_s1_agent:cp_data
	wire          ogpu_raster_unit_tile1_s1_burst_adapter_source0_ready;                         // ogpu_raster_unit_tile1_s1_agent:cp_ready -> ogpu_raster_unit_tile1_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_raster_unit_tile1_s1_burst_adapter_source0_channel;                       // ogpu_raster_unit_tile1_s1_burst_adapter:source0_channel -> ogpu_raster_unit_tile1_s1_agent:cp_channel
	wire          ogpu_raster_unit_tile1_s1_burst_adapter_source0_startofpacket;                 // ogpu_raster_unit_tile1_s1_burst_adapter:source0_startofpacket -> ogpu_raster_unit_tile1_s1_agent:cp_startofpacket
	wire          ogpu_raster_unit_tile1_s1_burst_adapter_source0_endofpacket;                   // ogpu_raster_unit_tile1_s1_burst_adapter:source0_endofpacket -> ogpu_raster_unit_tile1_s1_agent:cp_endofpacket
	wire          ogpu_raster_unit_tile0_s1_burst_adapter_source0_valid;                         // ogpu_raster_unit_tile0_s1_burst_adapter:source0_valid -> ogpu_raster_unit_tile0_s1_agent:cp_valid
	wire  [130:0] ogpu_raster_unit_tile0_s1_burst_adapter_source0_data;                          // ogpu_raster_unit_tile0_s1_burst_adapter:source0_data -> ogpu_raster_unit_tile0_s1_agent:cp_data
	wire          ogpu_raster_unit_tile0_s1_burst_adapter_source0_ready;                         // ogpu_raster_unit_tile0_s1_agent:cp_ready -> ogpu_raster_unit_tile0_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_raster_unit_tile0_s1_burst_adapter_source0_channel;                       // ogpu_raster_unit_tile0_s1_burst_adapter:source0_channel -> ogpu_raster_unit_tile0_s1_agent:cp_channel
	wire          ogpu_raster_unit_tile0_s1_burst_adapter_source0_startofpacket;                 // ogpu_raster_unit_tile0_s1_burst_adapter:source0_startofpacket -> ogpu_raster_unit_tile0_s1_agent:cp_startofpacket
	wire          ogpu_raster_unit_tile0_s1_burst_adapter_source0_endofpacket;                   // ogpu_raster_unit_tile0_s1_burst_adapter:source0_endofpacket -> ogpu_raster_unit_tile0_s1_agent:cp_endofpacket
	wire          ogpu_raster_unit_clip_rect1_s1_burst_adapter_source0_valid;                    // ogpu_raster_unit_clip_rect1_s1_burst_adapter:source0_valid -> ogpu_raster_unit_clip_rect1_s1_agent:cp_valid
	wire  [130:0] ogpu_raster_unit_clip_rect1_s1_burst_adapter_source0_data;                     // ogpu_raster_unit_clip_rect1_s1_burst_adapter:source0_data -> ogpu_raster_unit_clip_rect1_s1_agent:cp_data
	wire          ogpu_raster_unit_clip_rect1_s1_burst_adapter_source0_ready;                    // ogpu_raster_unit_clip_rect1_s1_agent:cp_ready -> ogpu_raster_unit_clip_rect1_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_raster_unit_clip_rect1_s1_burst_adapter_source0_channel;                  // ogpu_raster_unit_clip_rect1_s1_burst_adapter:source0_channel -> ogpu_raster_unit_clip_rect1_s1_agent:cp_channel
	wire          ogpu_raster_unit_clip_rect1_s1_burst_adapter_source0_startofpacket;            // ogpu_raster_unit_clip_rect1_s1_burst_adapter:source0_startofpacket -> ogpu_raster_unit_clip_rect1_s1_agent:cp_startofpacket
	wire          ogpu_raster_unit_clip_rect1_s1_burst_adapter_source0_endofpacket;              // ogpu_raster_unit_clip_rect1_s1_burst_adapter:source0_endofpacket -> ogpu_raster_unit_clip_rect1_s1_agent:cp_endofpacket
	wire          ogpu_raster_unit_clip_rect0_s1_burst_adapter_source0_valid;                    // ogpu_raster_unit_clip_rect0_s1_burst_adapter:source0_valid -> ogpu_raster_unit_clip_rect0_s1_agent:cp_valid
	wire  [130:0] ogpu_raster_unit_clip_rect0_s1_burst_adapter_source0_data;                     // ogpu_raster_unit_clip_rect0_s1_burst_adapter:source0_data -> ogpu_raster_unit_clip_rect0_s1_agent:cp_data
	wire          ogpu_raster_unit_clip_rect0_s1_burst_adapter_source0_ready;                    // ogpu_raster_unit_clip_rect0_s1_agent:cp_ready -> ogpu_raster_unit_clip_rect0_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_raster_unit_clip_rect0_s1_burst_adapter_source0_channel;                  // ogpu_raster_unit_clip_rect0_s1_burst_adapter:source0_channel -> ogpu_raster_unit_clip_rect0_s1_agent:cp_channel
	wire          ogpu_raster_unit_clip_rect0_s1_burst_adapter_source0_startofpacket;            // ogpu_raster_unit_clip_rect0_s1_burst_adapter:source0_startofpacket -> ogpu_raster_unit_clip_rect0_s1_agent:cp_startofpacket
	wire          ogpu_raster_unit_clip_rect0_s1_burst_adapter_source0_endofpacket;              // ogpu_raster_unit_clip_rect0_s1_burst_adapter:source0_endofpacket -> ogpu_raster_unit_clip_rect0_s1_agent:cp_endofpacket
	wire          ogpu_raster_unit_command_s1_burst_adapter_source0_valid;                       // ogpu_raster_unit_command_s1_burst_adapter:source0_valid -> ogpu_raster_unit_command_s1_agent:cp_valid
	wire  [130:0] ogpu_raster_unit_command_s1_burst_adapter_source0_data;                        // ogpu_raster_unit_command_s1_burst_adapter:source0_data -> ogpu_raster_unit_command_s1_agent:cp_data
	wire          ogpu_raster_unit_command_s1_burst_adapter_source0_ready;                       // ogpu_raster_unit_command_s1_agent:cp_ready -> ogpu_raster_unit_command_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_raster_unit_command_s1_burst_adapter_source0_channel;                     // ogpu_raster_unit_command_s1_burst_adapter:source0_channel -> ogpu_raster_unit_command_s1_agent:cp_channel
	wire          ogpu_raster_unit_command_s1_burst_adapter_source0_startofpacket;               // ogpu_raster_unit_command_s1_burst_adapter:source0_startofpacket -> ogpu_raster_unit_command_s1_agent:cp_startofpacket
	wire          ogpu_raster_unit_command_s1_burst_adapter_source0_endofpacket;                 // ogpu_raster_unit_command_s1_burst_adapter:source0_endofpacket -> ogpu_raster_unit_command_s1_agent:cp_endofpacket
	wire          ogpu_raster_unit_status_s1_burst_adapter_source0_valid;                        // ogpu_raster_unit_status_s1_burst_adapter:source0_valid -> ogpu_raster_unit_status_s1_agent:cp_valid
	wire  [130:0] ogpu_raster_unit_status_s1_burst_adapter_source0_data;                         // ogpu_raster_unit_status_s1_burst_adapter:source0_data -> ogpu_raster_unit_status_s1_agent:cp_data
	wire          ogpu_raster_unit_status_s1_burst_adapter_source0_ready;                        // ogpu_raster_unit_status_s1_agent:cp_ready -> ogpu_raster_unit_status_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_raster_unit_status_s1_burst_adapter_source0_channel;                      // ogpu_raster_unit_status_s1_burst_adapter:source0_channel -> ogpu_raster_unit_status_s1_agent:cp_channel
	wire          ogpu_raster_unit_status_s1_burst_adapter_source0_startofpacket;                // ogpu_raster_unit_status_s1_burst_adapter:source0_startofpacket -> ogpu_raster_unit_status_s1_agent:cp_startofpacket
	wire          ogpu_raster_unit_status_s1_burst_adapter_source0_endofpacket;                  // ogpu_raster_unit_status_s1_burst_adapter:source0_endofpacket -> ogpu_raster_unit_status_s1_agent:cp_endofpacket
	wire          ogpu_raster_unit_v2z_s1_burst_adapter_source0_valid;                           // ogpu_raster_unit_v2z_s1_burst_adapter:source0_valid -> ogpu_raster_unit_v2z_s1_agent:cp_valid
	wire  [130:0] ogpu_raster_unit_v2z_s1_burst_adapter_source0_data;                            // ogpu_raster_unit_v2z_s1_burst_adapter:source0_data -> ogpu_raster_unit_v2z_s1_agent:cp_data
	wire          ogpu_raster_unit_v2z_s1_burst_adapter_source0_ready;                           // ogpu_raster_unit_v2z_s1_agent:cp_ready -> ogpu_raster_unit_v2z_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_raster_unit_v2z_s1_burst_adapter_source0_channel;                         // ogpu_raster_unit_v2z_s1_burst_adapter:source0_channel -> ogpu_raster_unit_v2z_s1_agent:cp_channel
	wire          ogpu_raster_unit_v2z_s1_burst_adapter_source0_startofpacket;                   // ogpu_raster_unit_v2z_s1_burst_adapter:source0_startofpacket -> ogpu_raster_unit_v2z_s1_agent:cp_startofpacket
	wire          ogpu_raster_unit_v2z_s1_burst_adapter_source0_endofpacket;                     // ogpu_raster_unit_v2z_s1_burst_adapter:source0_endofpacket -> ogpu_raster_unit_v2z_s1_agent:cp_endofpacket
	wire          ogpu_raster_unit_v2y_s1_burst_adapter_source0_valid;                           // ogpu_raster_unit_v2y_s1_burst_adapter:source0_valid -> ogpu_raster_unit_v2y_s1_agent:cp_valid
	wire  [130:0] ogpu_raster_unit_v2y_s1_burst_adapter_source0_data;                            // ogpu_raster_unit_v2y_s1_burst_adapter:source0_data -> ogpu_raster_unit_v2y_s1_agent:cp_data
	wire          ogpu_raster_unit_v2y_s1_burst_adapter_source0_ready;                           // ogpu_raster_unit_v2y_s1_agent:cp_ready -> ogpu_raster_unit_v2y_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_raster_unit_v2y_s1_burst_adapter_source0_channel;                         // ogpu_raster_unit_v2y_s1_burst_adapter:source0_channel -> ogpu_raster_unit_v2y_s1_agent:cp_channel
	wire          ogpu_raster_unit_v2y_s1_burst_adapter_source0_startofpacket;                   // ogpu_raster_unit_v2y_s1_burst_adapter:source0_startofpacket -> ogpu_raster_unit_v2y_s1_agent:cp_startofpacket
	wire          ogpu_raster_unit_v2y_s1_burst_adapter_source0_endofpacket;                     // ogpu_raster_unit_v2y_s1_burst_adapter:source0_endofpacket -> ogpu_raster_unit_v2y_s1_agent:cp_endofpacket
	wire          ogpu_raster_unit_v2x_s1_burst_adapter_source0_valid;                           // ogpu_raster_unit_v2x_s1_burst_adapter:source0_valid -> ogpu_raster_unit_v2x_s1_agent:cp_valid
	wire  [130:0] ogpu_raster_unit_v2x_s1_burst_adapter_source0_data;                            // ogpu_raster_unit_v2x_s1_burst_adapter:source0_data -> ogpu_raster_unit_v2x_s1_agent:cp_data
	wire          ogpu_raster_unit_v2x_s1_burst_adapter_source0_ready;                           // ogpu_raster_unit_v2x_s1_agent:cp_ready -> ogpu_raster_unit_v2x_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_raster_unit_v2x_s1_burst_adapter_source0_channel;                         // ogpu_raster_unit_v2x_s1_burst_adapter:source0_channel -> ogpu_raster_unit_v2x_s1_agent:cp_channel
	wire          ogpu_raster_unit_v2x_s1_burst_adapter_source0_startofpacket;                   // ogpu_raster_unit_v2x_s1_burst_adapter:source0_startofpacket -> ogpu_raster_unit_v2x_s1_agent:cp_startofpacket
	wire          ogpu_raster_unit_v2x_s1_burst_adapter_source0_endofpacket;                     // ogpu_raster_unit_v2x_s1_burst_adapter:source0_endofpacket -> ogpu_raster_unit_v2x_s1_agent:cp_endofpacket
	wire          ogpu_raster_unit_v1z_s1_burst_adapter_source0_valid;                           // ogpu_raster_unit_v1z_s1_burst_adapter:source0_valid -> ogpu_raster_unit_v1z_s1_agent:cp_valid
	wire  [130:0] ogpu_raster_unit_v1z_s1_burst_adapter_source0_data;                            // ogpu_raster_unit_v1z_s1_burst_adapter:source0_data -> ogpu_raster_unit_v1z_s1_agent:cp_data
	wire          ogpu_raster_unit_v1z_s1_burst_adapter_source0_ready;                           // ogpu_raster_unit_v1z_s1_agent:cp_ready -> ogpu_raster_unit_v1z_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_raster_unit_v1z_s1_burst_adapter_source0_channel;                         // ogpu_raster_unit_v1z_s1_burst_adapter:source0_channel -> ogpu_raster_unit_v1z_s1_agent:cp_channel
	wire          ogpu_raster_unit_v1z_s1_burst_adapter_source0_startofpacket;                   // ogpu_raster_unit_v1z_s1_burst_adapter:source0_startofpacket -> ogpu_raster_unit_v1z_s1_agent:cp_startofpacket
	wire          ogpu_raster_unit_v1z_s1_burst_adapter_source0_endofpacket;                     // ogpu_raster_unit_v1z_s1_burst_adapter:source0_endofpacket -> ogpu_raster_unit_v1z_s1_agent:cp_endofpacket
	wire          ogpu_raster_unit_v1y_s1_burst_adapter_source0_valid;                           // ogpu_raster_unit_v1y_s1_burst_adapter:source0_valid -> ogpu_raster_unit_v1y_s1_agent:cp_valid
	wire  [130:0] ogpu_raster_unit_v1y_s1_burst_adapter_source0_data;                            // ogpu_raster_unit_v1y_s1_burst_adapter:source0_data -> ogpu_raster_unit_v1y_s1_agent:cp_data
	wire          ogpu_raster_unit_v1y_s1_burst_adapter_source0_ready;                           // ogpu_raster_unit_v1y_s1_agent:cp_ready -> ogpu_raster_unit_v1y_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_raster_unit_v1y_s1_burst_adapter_source0_channel;                         // ogpu_raster_unit_v1y_s1_burst_adapter:source0_channel -> ogpu_raster_unit_v1y_s1_agent:cp_channel
	wire          ogpu_raster_unit_v1y_s1_burst_adapter_source0_startofpacket;                   // ogpu_raster_unit_v1y_s1_burst_adapter:source0_startofpacket -> ogpu_raster_unit_v1y_s1_agent:cp_startofpacket
	wire          ogpu_raster_unit_v1y_s1_burst_adapter_source0_endofpacket;                     // ogpu_raster_unit_v1y_s1_burst_adapter:source0_endofpacket -> ogpu_raster_unit_v1y_s1_agent:cp_endofpacket
	wire          ogpu_raster_unit_v1x_s1_burst_adapter_source0_valid;                           // ogpu_raster_unit_v1x_s1_burst_adapter:source0_valid -> ogpu_raster_unit_v1x_s1_agent:cp_valid
	wire  [130:0] ogpu_raster_unit_v1x_s1_burst_adapter_source0_data;                            // ogpu_raster_unit_v1x_s1_burst_adapter:source0_data -> ogpu_raster_unit_v1x_s1_agent:cp_data
	wire          ogpu_raster_unit_v1x_s1_burst_adapter_source0_ready;                           // ogpu_raster_unit_v1x_s1_agent:cp_ready -> ogpu_raster_unit_v1x_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_raster_unit_v1x_s1_burst_adapter_source0_channel;                         // ogpu_raster_unit_v1x_s1_burst_adapter:source0_channel -> ogpu_raster_unit_v1x_s1_agent:cp_channel
	wire          ogpu_raster_unit_v1x_s1_burst_adapter_source0_startofpacket;                   // ogpu_raster_unit_v1x_s1_burst_adapter:source0_startofpacket -> ogpu_raster_unit_v1x_s1_agent:cp_startofpacket
	wire          ogpu_raster_unit_v1x_s1_burst_adapter_source0_endofpacket;                     // ogpu_raster_unit_v1x_s1_burst_adapter:source0_endofpacket -> ogpu_raster_unit_v1x_s1_agent:cp_endofpacket
	wire          ogpu_raster_unit_v0z_s1_burst_adapter_source0_valid;                           // ogpu_raster_unit_v0z_s1_burst_adapter:source0_valid -> ogpu_raster_unit_v0z_s1_agent:cp_valid
	wire  [130:0] ogpu_raster_unit_v0z_s1_burst_adapter_source0_data;                            // ogpu_raster_unit_v0z_s1_burst_adapter:source0_data -> ogpu_raster_unit_v0z_s1_agent:cp_data
	wire          ogpu_raster_unit_v0z_s1_burst_adapter_source0_ready;                           // ogpu_raster_unit_v0z_s1_agent:cp_ready -> ogpu_raster_unit_v0z_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_raster_unit_v0z_s1_burst_adapter_source0_channel;                         // ogpu_raster_unit_v0z_s1_burst_adapter:source0_channel -> ogpu_raster_unit_v0z_s1_agent:cp_channel
	wire          ogpu_raster_unit_v0z_s1_burst_adapter_source0_startofpacket;                   // ogpu_raster_unit_v0z_s1_burst_adapter:source0_startofpacket -> ogpu_raster_unit_v0z_s1_agent:cp_startofpacket
	wire          ogpu_raster_unit_v0z_s1_burst_adapter_source0_endofpacket;                     // ogpu_raster_unit_v0z_s1_burst_adapter:source0_endofpacket -> ogpu_raster_unit_v0z_s1_agent:cp_endofpacket
	wire          ogpu_raster_unit_v0y_s1_burst_adapter_source0_valid;                           // ogpu_raster_unit_v0y_s1_burst_adapter:source0_valid -> ogpu_raster_unit_v0y_s1_agent:cp_valid
	wire  [130:0] ogpu_raster_unit_v0y_s1_burst_adapter_source0_data;                            // ogpu_raster_unit_v0y_s1_burst_adapter:source0_data -> ogpu_raster_unit_v0y_s1_agent:cp_data
	wire          ogpu_raster_unit_v0y_s1_burst_adapter_source0_ready;                           // ogpu_raster_unit_v0y_s1_agent:cp_ready -> ogpu_raster_unit_v0y_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_raster_unit_v0y_s1_burst_adapter_source0_channel;                         // ogpu_raster_unit_v0y_s1_burst_adapter:source0_channel -> ogpu_raster_unit_v0y_s1_agent:cp_channel
	wire          ogpu_raster_unit_v0y_s1_burst_adapter_source0_startofpacket;                   // ogpu_raster_unit_v0y_s1_burst_adapter:source0_startofpacket -> ogpu_raster_unit_v0y_s1_agent:cp_startofpacket
	wire          ogpu_raster_unit_v0y_s1_burst_adapter_source0_endofpacket;                     // ogpu_raster_unit_v0y_s1_burst_adapter:source0_endofpacket -> ogpu_raster_unit_v0y_s1_agent:cp_endofpacket
	wire          ogpu_raster_unit_v0x_s1_burst_adapter_source0_valid;                           // ogpu_raster_unit_v0x_s1_burst_adapter:source0_valid -> ogpu_raster_unit_v0x_s1_agent:cp_valid
	wire  [130:0] ogpu_raster_unit_v0x_s1_burst_adapter_source0_data;                            // ogpu_raster_unit_v0x_s1_burst_adapter:source0_data -> ogpu_raster_unit_v0x_s1_agent:cp_data
	wire          ogpu_raster_unit_v0x_s1_burst_adapter_source0_ready;                           // ogpu_raster_unit_v0x_s1_agent:cp_ready -> ogpu_raster_unit_v0x_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_raster_unit_v0x_s1_burst_adapter_source0_channel;                         // ogpu_raster_unit_v0x_s1_burst_adapter:source0_channel -> ogpu_raster_unit_v0x_s1_agent:cp_channel
	wire          ogpu_raster_unit_v0x_s1_burst_adapter_source0_startofpacket;                   // ogpu_raster_unit_v0x_s1_burst_adapter:source0_startofpacket -> ogpu_raster_unit_v0x_s1_agent:cp_startofpacket
	wire          ogpu_raster_unit_v0x_s1_burst_adapter_source0_endofpacket;                     // ogpu_raster_unit_v0x_s1_burst_adapter:source0_endofpacket -> ogpu_raster_unit_v0x_s1_agent:cp_endofpacket
	wire          ogpu_quad_store_req_s1_burst_adapter_source0_valid;                            // ogpu_quad_store_req_s1_burst_adapter:source0_valid -> ogpu_quad_store_req_s1_agent:cp_valid
	wire  [130:0] ogpu_quad_store_req_s1_burst_adapter_source0_data;                             // ogpu_quad_store_req_s1_burst_adapter:source0_data -> ogpu_quad_store_req_s1_agent:cp_data
	wire          ogpu_quad_store_req_s1_burst_adapter_source0_ready;                            // ogpu_quad_store_req_s1_agent:cp_ready -> ogpu_quad_store_req_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_quad_store_req_s1_burst_adapter_source0_channel;                          // ogpu_quad_store_req_s1_burst_adapter:source0_channel -> ogpu_quad_store_req_s1_agent:cp_channel
	wire          ogpu_quad_store_req_s1_burst_adapter_source0_startofpacket;                    // ogpu_quad_store_req_s1_burst_adapter:source0_startofpacket -> ogpu_quad_store_req_s1_agent:cp_startofpacket
	wire          ogpu_quad_store_req_s1_burst_adapter_source0_endofpacket;                      // ogpu_quad_store_req_s1_burst_adapter:source0_endofpacket -> ogpu_quad_store_req_s1_agent:cp_endofpacket
	wire          ogpu_quad_store_data_high_s1_burst_adapter_source0_valid;                      // ogpu_quad_store_data_high_s1_burst_adapter:source0_valid -> ogpu_quad_store_data_high_s1_agent:cp_valid
	wire  [130:0] ogpu_quad_store_data_high_s1_burst_adapter_source0_data;                       // ogpu_quad_store_data_high_s1_burst_adapter:source0_data -> ogpu_quad_store_data_high_s1_agent:cp_data
	wire          ogpu_quad_store_data_high_s1_burst_adapter_source0_ready;                      // ogpu_quad_store_data_high_s1_agent:cp_ready -> ogpu_quad_store_data_high_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_quad_store_data_high_s1_burst_adapter_source0_channel;                    // ogpu_quad_store_data_high_s1_burst_adapter:source0_channel -> ogpu_quad_store_data_high_s1_agent:cp_channel
	wire          ogpu_quad_store_data_high_s1_burst_adapter_source0_startofpacket;              // ogpu_quad_store_data_high_s1_burst_adapter:source0_startofpacket -> ogpu_quad_store_data_high_s1_agent:cp_startofpacket
	wire          ogpu_quad_store_data_high_s1_burst_adapter_source0_endofpacket;                // ogpu_quad_store_data_high_s1_burst_adapter:source0_endofpacket -> ogpu_quad_store_data_high_s1_agent:cp_endofpacket
	wire          ogpu_quad_store_data_low_s1_burst_adapter_source0_valid;                       // ogpu_quad_store_data_low_s1_burst_adapter:source0_valid -> ogpu_quad_store_data_low_s1_agent:cp_valid
	wire  [130:0] ogpu_quad_store_data_low_s1_burst_adapter_source0_data;                        // ogpu_quad_store_data_low_s1_burst_adapter:source0_data -> ogpu_quad_store_data_low_s1_agent:cp_data
	wire          ogpu_quad_store_data_low_s1_burst_adapter_source0_ready;                       // ogpu_quad_store_data_low_s1_agent:cp_ready -> ogpu_quad_store_data_low_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_quad_store_data_low_s1_burst_adapter_source0_channel;                     // ogpu_quad_store_data_low_s1_burst_adapter:source0_channel -> ogpu_quad_store_data_low_s1_agent:cp_channel
	wire          ogpu_quad_store_data_low_s1_burst_adapter_source0_startofpacket;               // ogpu_quad_store_data_low_s1_burst_adapter:source0_startofpacket -> ogpu_quad_store_data_low_s1_agent:cp_startofpacket
	wire          ogpu_quad_store_data_low_s1_burst_adapter_source0_endofpacket;                 // ogpu_quad_store_data_low_s1_burst_adapter:source0_endofpacket -> ogpu_quad_store_data_low_s1_agent:cp_endofpacket
	wire          ogpu_quad_store_ack_s1_burst_adapter_source0_valid;                            // ogpu_quad_store_ack_s1_burst_adapter:source0_valid -> ogpu_quad_store_ack_s1_agent:cp_valid
	wire  [130:0] ogpu_quad_store_ack_s1_burst_adapter_source0_data;                             // ogpu_quad_store_ack_s1_burst_adapter:source0_data -> ogpu_quad_store_ack_s1_agent:cp_data
	wire          ogpu_quad_store_ack_s1_burst_adapter_source0_ready;                            // ogpu_quad_store_ack_s1_agent:cp_ready -> ogpu_quad_store_ack_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_quad_store_ack_s1_burst_adapter_source0_channel;                          // ogpu_quad_store_ack_s1_burst_adapter:source0_channel -> ogpu_quad_store_ack_s1_agent:cp_channel
	wire          ogpu_quad_store_ack_s1_burst_adapter_source0_startofpacket;                    // ogpu_quad_store_ack_s1_burst_adapter:source0_startofpacket -> ogpu_quad_store_ack_s1_agent:cp_startofpacket
	wire          ogpu_quad_store_ack_s1_burst_adapter_source0_endofpacket;                      // ogpu_quad_store_ack_s1_burst_adapter:source0_endofpacket -> ogpu_quad_store_ack_s1_agent:cp_endofpacket
	wire          ogpu_reset_s1_burst_adapter_source0_valid;                                     // ogpu_reset_s1_burst_adapter:source0_valid -> ogpu_reset_s1_agent:cp_valid
	wire  [130:0] ogpu_reset_s1_burst_adapter_source0_data;                                      // ogpu_reset_s1_burst_adapter:source0_data -> ogpu_reset_s1_agent:cp_data
	wire          ogpu_reset_s1_burst_adapter_source0_ready;                                     // ogpu_reset_s1_agent:cp_ready -> ogpu_reset_s1_burst_adapter:source0_ready
	wire   [24:0] ogpu_reset_s1_burst_adapter_source0_channel;                                   // ogpu_reset_s1_burst_adapter:source0_channel -> ogpu_reset_s1_agent:cp_channel
	wire          ogpu_reset_s1_burst_adapter_source0_startofpacket;                             // ogpu_reset_s1_burst_adapter:source0_startofpacket -> ogpu_reset_s1_agent:cp_startofpacket
	wire          ogpu_reset_s1_burst_adapter_source0_endofpacket;                               // ogpu_reset_s1_burst_adapter:source0_endofpacket -> ogpu_reset_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                          // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [166:0] cmd_demux_src0_data;                                                           // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                          // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [24:0] cmd_demux_src0_channel;                                                        // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                  // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                    // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                          // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [166:0] cmd_demux_src1_data;                                                           // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                          // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [24:0] cmd_demux_src1_channel;                                                        // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                  // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                    // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                          // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [166:0] cmd_demux_src2_data;                                                           // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                          // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [24:0] cmd_demux_src2_channel;                                                        // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                  // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                    // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                          // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [166:0] cmd_demux_src3_data;                                                           // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                          // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [24:0] cmd_demux_src3_channel;                                                        // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                  // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                    // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                          // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [166:0] cmd_demux_src4_data;                                                           // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                          // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [24:0] cmd_demux_src4_channel;                                                        // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                  // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                    // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                          // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [166:0] cmd_demux_src5_data;                                                           // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                          // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [24:0] cmd_demux_src5_channel;                                                        // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                  // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                    // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                          // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [166:0] cmd_demux_src6_data;                                                           // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                          // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [24:0] cmd_demux_src6_channel;                                                        // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                  // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                    // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                          // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [166:0] cmd_demux_src7_data;                                                           // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                          // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [24:0] cmd_demux_src7_channel;                                                        // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                  // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                    // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                          // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [166:0] cmd_demux_src8_data;                                                           // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                          // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [24:0] cmd_demux_src8_channel;                                                        // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                  // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                    // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                          // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [166:0] cmd_demux_src9_data;                                                           // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                          // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [24:0] cmd_demux_src9_channel;                                                        // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                  // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                    // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                         // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [166:0] cmd_demux_src10_data;                                                          // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                         // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [24:0] cmd_demux_src10_channel;                                                       // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                 // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                   // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                         // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [166:0] cmd_demux_src11_data;                                                          // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                         // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [24:0] cmd_demux_src11_channel;                                                       // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                 // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                   // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                         // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [166:0] cmd_demux_src12_data;                                                          // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                         // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [24:0] cmd_demux_src12_channel;                                                       // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                                 // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                   // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                         // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [166:0] cmd_demux_src13_data;                                                          // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                         // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [24:0] cmd_demux_src13_channel;                                                       // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                                 // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                   // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                         // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [166:0] cmd_demux_src14_data;                                                          // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                         // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [24:0] cmd_demux_src14_channel;                                                       // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                                 // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                   // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                         // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [166:0] cmd_demux_src15_data;                                                          // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src15_ready;                                                         // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire   [24:0] cmd_demux_src15_channel;                                                       // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_startofpacket;                                                 // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                   // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                         // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [166:0] cmd_demux_src16_data;                                                          // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_src16_ready;                                                         // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire   [24:0] cmd_demux_src16_channel;                                                       // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_startofpacket;                                                 // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_src16_endofpacket;                                                   // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                         // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [166:0] cmd_demux_src17_data;                                                          // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_src17_ready;                                                         // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire   [24:0] cmd_demux_src17_channel;                                                       // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_src17_startofpacket;                                                 // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_src17_endofpacket;                                                   // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                         // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire  [166:0] cmd_demux_src18_data;                                                          // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_src18_ready;                                                         // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire   [24:0] cmd_demux_src18_channel;                                                       // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_src18_startofpacket;                                                 // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_src18_endofpacket;                                                   // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_src19_valid;                                                         // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire  [166:0] cmd_demux_src19_data;                                                          // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_src19_ready;                                                         // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire   [24:0] cmd_demux_src19_channel;                                                       // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_src19_startofpacket;                                                 // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_src19_endofpacket;                                                   // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_src20_valid;                                                         // cmd_demux:src20_valid -> cmd_mux_020:sink0_valid
	wire  [166:0] cmd_demux_src20_data;                                                          // cmd_demux:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_src20_ready;                                                         // cmd_mux_020:sink0_ready -> cmd_demux:src20_ready
	wire   [24:0] cmd_demux_src20_channel;                                                       // cmd_demux:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_src20_startofpacket;                                                 // cmd_demux:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_src20_endofpacket;                                                   // cmd_demux:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_src21_valid;                                                         // cmd_demux:src21_valid -> cmd_mux_021:sink0_valid
	wire  [166:0] cmd_demux_src21_data;                                                          // cmd_demux:src21_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_src21_ready;                                                         // cmd_mux_021:sink0_ready -> cmd_demux:src21_ready
	wire   [24:0] cmd_demux_src21_channel;                                                       // cmd_demux:src21_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_src21_startofpacket;                                                 // cmd_demux:src21_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_src21_endofpacket;                                                   // cmd_demux:src21_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_src22_valid;                                                         // cmd_demux:src22_valid -> cmd_mux_022:sink0_valid
	wire  [166:0] cmd_demux_src22_data;                                                          // cmd_demux:src22_data -> cmd_mux_022:sink0_data
	wire          cmd_demux_src22_ready;                                                         // cmd_mux_022:sink0_ready -> cmd_demux:src22_ready
	wire   [24:0] cmd_demux_src22_channel;                                                       // cmd_demux:src22_channel -> cmd_mux_022:sink0_channel
	wire          cmd_demux_src22_startofpacket;                                                 // cmd_demux:src22_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          cmd_demux_src22_endofpacket;                                                   // cmd_demux:src22_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_src23_valid;                                                         // cmd_demux:src23_valid -> cmd_mux_023:sink0_valid
	wire  [166:0] cmd_demux_src23_data;                                                          // cmd_demux:src23_data -> cmd_mux_023:sink0_data
	wire          cmd_demux_src23_ready;                                                         // cmd_mux_023:sink0_ready -> cmd_demux:src23_ready
	wire   [24:0] cmd_demux_src23_channel;                                                       // cmd_demux:src23_channel -> cmd_mux_023:sink0_channel
	wire          cmd_demux_src23_startofpacket;                                                 // cmd_demux:src23_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          cmd_demux_src23_endofpacket;                                                   // cmd_demux:src23_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_src24_valid;                                                         // cmd_demux:src24_valid -> cmd_mux_024:sink0_valid
	wire  [166:0] cmd_demux_src24_data;                                                          // cmd_demux:src24_data -> cmd_mux_024:sink0_data
	wire          cmd_demux_src24_ready;                                                         // cmd_mux_024:sink0_ready -> cmd_demux:src24_ready
	wire   [24:0] cmd_demux_src24_channel;                                                       // cmd_demux:src24_channel -> cmd_mux_024:sink0_channel
	wire          cmd_demux_src24_startofpacket;                                                 // cmd_demux:src24_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire          cmd_demux_src24_endofpacket;                                                   // cmd_demux:src24_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                      // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [166:0] cmd_demux_001_src0_data;                                                       // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                      // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [24:0] cmd_demux_001_src0_channel;                                                    // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                              // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                      // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [166:0] cmd_demux_001_src1_data;                                                       // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                                      // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire   [24:0] cmd_demux_001_src1_channel;                                                    // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                              // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                      // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [166:0] cmd_demux_001_src2_data;                                                       // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                                      // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire   [24:0] cmd_demux_001_src2_channel;                                                    // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                              // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                      // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [166:0] cmd_demux_001_src3_data;                                                       // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                                      // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire   [24:0] cmd_demux_001_src3_channel;                                                    // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                              // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                      // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [166:0] cmd_demux_001_src4_data;                                                       // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                                      // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire   [24:0] cmd_demux_001_src4_channel;                                                    // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                              // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                                      // cmd_demux_001:src5_valid -> cmd_mux_005:sink1_valid
	wire  [166:0] cmd_demux_001_src5_data;                                                       // cmd_demux_001:src5_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src5_ready;                                                      // cmd_mux_005:sink1_ready -> cmd_demux_001:src5_ready
	wire   [24:0] cmd_demux_001_src5_channel;                                                    // cmd_demux_001:src5_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                                              // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                                      // cmd_demux_001:src6_valid -> cmd_mux_006:sink1_valid
	wire  [166:0] cmd_demux_001_src6_data;                                                       // cmd_demux_001:src6_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src6_ready;                                                      // cmd_mux_006:sink1_ready -> cmd_demux_001:src6_ready
	wire   [24:0] cmd_demux_001_src6_channel;                                                    // cmd_demux_001:src6_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                                              // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                                      // cmd_demux_001:src7_valid -> cmd_mux_007:sink1_valid
	wire  [166:0] cmd_demux_001_src7_data;                                                       // cmd_demux_001:src7_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src7_ready;                                                      // cmd_mux_007:sink1_ready -> cmd_demux_001:src7_ready
	wire   [24:0] cmd_demux_001_src7_channel;                                                    // cmd_demux_001:src7_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src7_startofpacket;                                              // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                                      // cmd_demux_001:src8_valid -> cmd_mux_008:sink1_valid
	wire  [166:0] cmd_demux_001_src8_data;                                                       // cmd_demux_001:src8_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src8_ready;                                                      // cmd_mux_008:sink1_ready -> cmd_demux_001:src8_ready
	wire   [24:0] cmd_demux_001_src8_channel;                                                    // cmd_demux_001:src8_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src8_startofpacket;                                              // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                                // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src9_valid;                                                      // cmd_demux_001:src9_valid -> cmd_mux_009:sink1_valid
	wire  [166:0] cmd_demux_001_src9_data;                                                       // cmd_demux_001:src9_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_001_src9_ready;                                                      // cmd_mux_009:sink1_ready -> cmd_demux_001:src9_ready
	wire   [24:0] cmd_demux_001_src9_channel;                                                    // cmd_demux_001:src9_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_001_src9_startofpacket;                                              // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                                // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_001_src10_valid;                                                     // cmd_demux_001:src10_valid -> cmd_mux_010:sink1_valid
	wire  [166:0] cmd_demux_001_src10_data;                                                      // cmd_demux_001:src10_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_001_src10_ready;                                                     // cmd_mux_010:sink1_ready -> cmd_demux_001:src10_ready
	wire   [24:0] cmd_demux_001_src10_channel;                                                   // cmd_demux_001:src10_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_001_src10_startofpacket;                                             // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                               // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_001_src11_valid;                                                     // cmd_demux_001:src11_valid -> cmd_mux_011:sink1_valid
	wire  [166:0] cmd_demux_001_src11_data;                                                      // cmd_demux_001:src11_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_001_src11_ready;                                                     // cmd_mux_011:sink1_ready -> cmd_demux_001:src11_ready
	wire   [24:0] cmd_demux_001_src11_channel;                                                   // cmd_demux_001:src11_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_001_src11_startofpacket;                                             // cmd_demux_001:src11_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                                               // cmd_demux_001:src11_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_001_src12_valid;                                                     // cmd_demux_001:src12_valid -> cmd_mux_012:sink1_valid
	wire  [166:0] cmd_demux_001_src12_data;                                                      // cmd_demux_001:src12_data -> cmd_mux_012:sink1_data
	wire          cmd_demux_001_src12_ready;                                                     // cmd_mux_012:sink1_ready -> cmd_demux_001:src12_ready
	wire   [24:0] cmd_demux_001_src12_channel;                                                   // cmd_demux_001:src12_channel -> cmd_mux_012:sink1_channel
	wire          cmd_demux_001_src12_startofpacket;                                             // cmd_demux_001:src12_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          cmd_demux_001_src12_endofpacket;                                               // cmd_demux_001:src12_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_001_src13_valid;                                                     // cmd_demux_001:src13_valid -> cmd_mux_013:sink1_valid
	wire  [166:0] cmd_demux_001_src13_data;                                                      // cmd_demux_001:src13_data -> cmd_mux_013:sink1_data
	wire          cmd_demux_001_src13_ready;                                                     // cmd_mux_013:sink1_ready -> cmd_demux_001:src13_ready
	wire   [24:0] cmd_demux_001_src13_channel;                                                   // cmd_demux_001:src13_channel -> cmd_mux_013:sink1_channel
	wire          cmd_demux_001_src13_startofpacket;                                             // cmd_demux_001:src13_startofpacket -> cmd_mux_013:sink1_startofpacket
	wire          cmd_demux_001_src13_endofpacket;                                               // cmd_demux_001:src13_endofpacket -> cmd_mux_013:sink1_endofpacket
	wire          cmd_demux_001_src14_valid;                                                     // cmd_demux_001:src14_valid -> cmd_mux_014:sink1_valid
	wire  [166:0] cmd_demux_001_src14_data;                                                      // cmd_demux_001:src14_data -> cmd_mux_014:sink1_data
	wire          cmd_demux_001_src14_ready;                                                     // cmd_mux_014:sink1_ready -> cmd_demux_001:src14_ready
	wire   [24:0] cmd_demux_001_src14_channel;                                                   // cmd_demux_001:src14_channel -> cmd_mux_014:sink1_channel
	wire          cmd_demux_001_src14_startofpacket;                                             // cmd_demux_001:src14_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire          cmd_demux_001_src14_endofpacket;                                               // cmd_demux_001:src14_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire          cmd_demux_001_src15_valid;                                                     // cmd_demux_001:src15_valid -> cmd_mux_015:sink1_valid
	wire  [166:0] cmd_demux_001_src15_data;                                                      // cmd_demux_001:src15_data -> cmd_mux_015:sink1_data
	wire          cmd_demux_001_src15_ready;                                                     // cmd_mux_015:sink1_ready -> cmd_demux_001:src15_ready
	wire   [24:0] cmd_demux_001_src15_channel;                                                   // cmd_demux_001:src15_channel -> cmd_mux_015:sink1_channel
	wire          cmd_demux_001_src15_startofpacket;                                             // cmd_demux_001:src15_startofpacket -> cmd_mux_015:sink1_startofpacket
	wire          cmd_demux_001_src15_endofpacket;                                               // cmd_demux_001:src15_endofpacket -> cmd_mux_015:sink1_endofpacket
	wire          cmd_demux_001_src16_valid;                                                     // cmd_demux_001:src16_valid -> cmd_mux_016:sink1_valid
	wire  [166:0] cmd_demux_001_src16_data;                                                      // cmd_demux_001:src16_data -> cmd_mux_016:sink1_data
	wire          cmd_demux_001_src16_ready;                                                     // cmd_mux_016:sink1_ready -> cmd_demux_001:src16_ready
	wire   [24:0] cmd_demux_001_src16_channel;                                                   // cmd_demux_001:src16_channel -> cmd_mux_016:sink1_channel
	wire          cmd_demux_001_src16_startofpacket;                                             // cmd_demux_001:src16_startofpacket -> cmd_mux_016:sink1_startofpacket
	wire          cmd_demux_001_src16_endofpacket;                                               // cmd_demux_001:src16_endofpacket -> cmd_mux_016:sink1_endofpacket
	wire          cmd_demux_001_src17_valid;                                                     // cmd_demux_001:src17_valid -> cmd_mux_017:sink1_valid
	wire  [166:0] cmd_demux_001_src17_data;                                                      // cmd_demux_001:src17_data -> cmd_mux_017:sink1_data
	wire          cmd_demux_001_src17_ready;                                                     // cmd_mux_017:sink1_ready -> cmd_demux_001:src17_ready
	wire   [24:0] cmd_demux_001_src17_channel;                                                   // cmd_demux_001:src17_channel -> cmd_mux_017:sink1_channel
	wire          cmd_demux_001_src17_startofpacket;                                             // cmd_demux_001:src17_startofpacket -> cmd_mux_017:sink1_startofpacket
	wire          cmd_demux_001_src17_endofpacket;                                               // cmd_demux_001:src17_endofpacket -> cmd_mux_017:sink1_endofpacket
	wire          cmd_demux_001_src18_valid;                                                     // cmd_demux_001:src18_valid -> cmd_mux_018:sink1_valid
	wire  [166:0] cmd_demux_001_src18_data;                                                      // cmd_demux_001:src18_data -> cmd_mux_018:sink1_data
	wire          cmd_demux_001_src18_ready;                                                     // cmd_mux_018:sink1_ready -> cmd_demux_001:src18_ready
	wire   [24:0] cmd_demux_001_src18_channel;                                                   // cmd_demux_001:src18_channel -> cmd_mux_018:sink1_channel
	wire          cmd_demux_001_src18_startofpacket;                                             // cmd_demux_001:src18_startofpacket -> cmd_mux_018:sink1_startofpacket
	wire          cmd_demux_001_src18_endofpacket;                                               // cmd_demux_001:src18_endofpacket -> cmd_mux_018:sink1_endofpacket
	wire          cmd_demux_001_src19_valid;                                                     // cmd_demux_001:src19_valid -> cmd_mux_019:sink1_valid
	wire  [166:0] cmd_demux_001_src19_data;                                                      // cmd_demux_001:src19_data -> cmd_mux_019:sink1_data
	wire          cmd_demux_001_src19_ready;                                                     // cmd_mux_019:sink1_ready -> cmd_demux_001:src19_ready
	wire   [24:0] cmd_demux_001_src19_channel;                                                   // cmd_demux_001:src19_channel -> cmd_mux_019:sink1_channel
	wire          cmd_demux_001_src19_startofpacket;                                             // cmd_demux_001:src19_startofpacket -> cmd_mux_019:sink1_startofpacket
	wire          cmd_demux_001_src19_endofpacket;                                               // cmd_demux_001:src19_endofpacket -> cmd_mux_019:sink1_endofpacket
	wire          cmd_demux_001_src20_valid;                                                     // cmd_demux_001:src20_valid -> cmd_mux_020:sink1_valid
	wire  [166:0] cmd_demux_001_src20_data;                                                      // cmd_demux_001:src20_data -> cmd_mux_020:sink1_data
	wire          cmd_demux_001_src20_ready;                                                     // cmd_mux_020:sink1_ready -> cmd_demux_001:src20_ready
	wire   [24:0] cmd_demux_001_src20_channel;                                                   // cmd_demux_001:src20_channel -> cmd_mux_020:sink1_channel
	wire          cmd_demux_001_src20_startofpacket;                                             // cmd_demux_001:src20_startofpacket -> cmd_mux_020:sink1_startofpacket
	wire          cmd_demux_001_src20_endofpacket;                                               // cmd_demux_001:src20_endofpacket -> cmd_mux_020:sink1_endofpacket
	wire          cmd_demux_001_src21_valid;                                                     // cmd_demux_001:src21_valid -> cmd_mux_021:sink1_valid
	wire  [166:0] cmd_demux_001_src21_data;                                                      // cmd_demux_001:src21_data -> cmd_mux_021:sink1_data
	wire          cmd_demux_001_src21_ready;                                                     // cmd_mux_021:sink1_ready -> cmd_demux_001:src21_ready
	wire   [24:0] cmd_demux_001_src21_channel;                                                   // cmd_demux_001:src21_channel -> cmd_mux_021:sink1_channel
	wire          cmd_demux_001_src21_startofpacket;                                             // cmd_demux_001:src21_startofpacket -> cmd_mux_021:sink1_startofpacket
	wire          cmd_demux_001_src21_endofpacket;                                               // cmd_demux_001:src21_endofpacket -> cmd_mux_021:sink1_endofpacket
	wire          cmd_demux_001_src22_valid;                                                     // cmd_demux_001:src22_valid -> cmd_mux_022:sink1_valid
	wire  [166:0] cmd_demux_001_src22_data;                                                      // cmd_demux_001:src22_data -> cmd_mux_022:sink1_data
	wire          cmd_demux_001_src22_ready;                                                     // cmd_mux_022:sink1_ready -> cmd_demux_001:src22_ready
	wire   [24:0] cmd_demux_001_src22_channel;                                                   // cmd_demux_001:src22_channel -> cmd_mux_022:sink1_channel
	wire          cmd_demux_001_src22_startofpacket;                                             // cmd_demux_001:src22_startofpacket -> cmd_mux_022:sink1_startofpacket
	wire          cmd_demux_001_src22_endofpacket;                                               // cmd_demux_001:src22_endofpacket -> cmd_mux_022:sink1_endofpacket
	wire          cmd_demux_001_src23_valid;                                                     // cmd_demux_001:src23_valid -> cmd_mux_023:sink1_valid
	wire  [166:0] cmd_demux_001_src23_data;                                                      // cmd_demux_001:src23_data -> cmd_mux_023:sink1_data
	wire          cmd_demux_001_src23_ready;                                                     // cmd_mux_023:sink1_ready -> cmd_demux_001:src23_ready
	wire   [24:0] cmd_demux_001_src23_channel;                                                   // cmd_demux_001:src23_channel -> cmd_mux_023:sink1_channel
	wire          cmd_demux_001_src23_startofpacket;                                             // cmd_demux_001:src23_startofpacket -> cmd_mux_023:sink1_startofpacket
	wire          cmd_demux_001_src23_endofpacket;                                               // cmd_demux_001:src23_endofpacket -> cmd_mux_023:sink1_endofpacket
	wire          cmd_demux_001_src24_valid;                                                     // cmd_demux_001:src24_valid -> cmd_mux_024:sink1_valid
	wire  [166:0] cmd_demux_001_src24_data;                                                      // cmd_demux_001:src24_data -> cmd_mux_024:sink1_data
	wire          cmd_demux_001_src24_ready;                                                     // cmd_mux_024:sink1_ready -> cmd_demux_001:src24_ready
	wire   [24:0] cmd_demux_001_src24_channel;                                                   // cmd_demux_001:src24_channel -> cmd_mux_024:sink1_channel
	wire          cmd_demux_001_src24_startofpacket;                                             // cmd_demux_001:src24_startofpacket -> cmd_mux_024:sink1_startofpacket
	wire          cmd_demux_001_src24_endofpacket;                                               // cmd_demux_001:src24_endofpacket -> cmd_mux_024:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                          // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [166:0] rsp_demux_src0_data;                                                           // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                          // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [24:0] rsp_demux_src0_channel;                                                        // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                  // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                    // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                          // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [166:0] rsp_demux_src1_data;                                                           // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                          // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [24:0] rsp_demux_src1_channel;                                                        // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                  // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                    // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                      // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [166:0] rsp_demux_001_src0_data;                                                       // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                      // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [24:0] rsp_demux_001_src0_channel;                                                    // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                              // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                      // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [166:0] rsp_demux_001_src1_data;                                                       // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                                      // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire   [24:0] rsp_demux_001_src1_channel;                                                    // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                              // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                      // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [166:0] rsp_demux_002_src0_data;                                                       // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                      // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [24:0] rsp_demux_002_src0_channel;                                                    // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                              // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                      // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [166:0] rsp_demux_002_src1_data;                                                       // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                                      // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire   [24:0] rsp_demux_002_src1_channel;                                                    // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                              // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                      // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [166:0] rsp_demux_003_src0_data;                                                       // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                      // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [24:0] rsp_demux_003_src0_channel;                                                    // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                              // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                      // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [166:0] rsp_demux_003_src1_data;                                                       // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                                      // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire   [24:0] rsp_demux_003_src1_channel;                                                    // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                              // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                      // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [166:0] rsp_demux_004_src0_data;                                                       // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                      // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [24:0] rsp_demux_004_src0_channel;                                                    // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                              // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                      // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [166:0] rsp_demux_004_src1_data;                                                       // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                                      // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire   [24:0] rsp_demux_004_src1_channel;                                                    // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                                              // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                      // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [166:0] rsp_demux_005_src0_data;                                                       // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                      // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [24:0] rsp_demux_005_src0_channel;                                                    // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                              // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                      // rsp_demux_005:src1_valid -> rsp_mux_001:sink5_valid
	wire  [166:0] rsp_demux_005_src1_data;                                                       // rsp_demux_005:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src1_ready;                                                      // rsp_mux_001:sink5_ready -> rsp_demux_005:src1_ready
	wire   [24:0] rsp_demux_005_src1_channel;                                                    // rsp_demux_005:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src1_startofpacket;                                              // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                      // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [166:0] rsp_demux_006_src0_data;                                                       // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                      // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [24:0] rsp_demux_006_src0_channel;                                                    // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                              // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                      // rsp_demux_006:src1_valid -> rsp_mux_001:sink6_valid
	wire  [166:0] rsp_demux_006_src1_data;                                                       // rsp_demux_006:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src1_ready;                                                      // rsp_mux_001:sink6_ready -> rsp_demux_006:src1_ready
	wire   [24:0] rsp_demux_006_src1_channel;                                                    // rsp_demux_006:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src1_startofpacket;                                              // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                      // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [166:0] rsp_demux_007_src0_data;                                                       // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                      // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [24:0] rsp_demux_007_src0_channel;                                                    // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                              // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                      // rsp_demux_007:src1_valid -> rsp_mux_001:sink7_valid
	wire  [166:0] rsp_demux_007_src1_data;                                                       // rsp_demux_007:src1_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src1_ready;                                                      // rsp_mux_001:sink7_ready -> rsp_demux_007:src1_ready
	wire   [24:0] rsp_demux_007_src1_channel;                                                    // rsp_demux_007:src1_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src1_startofpacket;                                              // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                      // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [166:0] rsp_demux_008_src0_data;                                                       // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                      // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [24:0] rsp_demux_008_src0_channel;                                                    // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                              // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                      // rsp_demux_008:src1_valid -> rsp_mux_001:sink8_valid
	wire  [166:0] rsp_demux_008_src1_data;                                                       // rsp_demux_008:src1_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src1_ready;                                                      // rsp_mux_001:sink8_ready -> rsp_demux_008:src1_ready
	wire   [24:0] rsp_demux_008_src1_channel;                                                    // rsp_demux_008:src1_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src1_startofpacket;                                              // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                      // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [166:0] rsp_demux_009_src0_data;                                                       // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                      // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [24:0] rsp_demux_009_src0_channel;                                                    // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                              // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                                      // rsp_demux_009:src1_valid -> rsp_mux_001:sink9_valid
	wire  [166:0] rsp_demux_009_src1_data;                                                       // rsp_demux_009:src1_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_009_src1_ready;                                                      // rsp_mux_001:sink9_ready -> rsp_demux_009:src1_ready
	wire   [24:0] rsp_demux_009_src1_channel;                                                    // rsp_demux_009:src1_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_009_src1_startofpacket;                                              // rsp_demux_009:src1_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                // rsp_demux_009:src1_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                      // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [166:0] rsp_demux_010_src0_data;                                                       // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                      // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [24:0] rsp_demux_010_src0_channel;                                                    // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                              // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                                      // rsp_demux_010:src1_valid -> rsp_mux_001:sink10_valid
	wire  [166:0] rsp_demux_010_src1_data;                                                       // rsp_demux_010:src1_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_010_src1_ready;                                                      // rsp_mux_001:sink10_ready -> rsp_demux_010:src1_ready
	wire   [24:0] rsp_demux_010_src1_channel;                                                    // rsp_demux_010:src1_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_010_src1_startofpacket;                                              // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                                // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                      // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [166:0] rsp_demux_011_src0_data;                                                       // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                      // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [24:0] rsp_demux_011_src0_channel;                                                    // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                              // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_011_src1_valid;                                                      // rsp_demux_011:src1_valid -> rsp_mux_001:sink11_valid
	wire  [166:0] rsp_demux_011_src1_data;                                                       // rsp_demux_011:src1_data -> rsp_mux_001:sink11_data
	wire          rsp_demux_011_src1_ready;                                                      // rsp_mux_001:sink11_ready -> rsp_demux_011:src1_ready
	wire   [24:0] rsp_demux_011_src1_channel;                                                    // rsp_demux_011:src1_channel -> rsp_mux_001:sink11_channel
	wire          rsp_demux_011_src1_startofpacket;                                              // rsp_demux_011:src1_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                                // rsp_demux_011:src1_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                      // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [166:0] rsp_demux_012_src0_data;                                                       // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                      // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [24:0] rsp_demux_012_src0_channel;                                                    // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                              // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_012_src1_valid;                                                      // rsp_demux_012:src1_valid -> rsp_mux_001:sink12_valid
	wire  [166:0] rsp_demux_012_src1_data;                                                       // rsp_demux_012:src1_data -> rsp_mux_001:sink12_data
	wire          rsp_demux_012_src1_ready;                                                      // rsp_mux_001:sink12_ready -> rsp_demux_012:src1_ready
	wire   [24:0] rsp_demux_012_src1_channel;                                                    // rsp_demux_012:src1_channel -> rsp_mux_001:sink12_channel
	wire          rsp_demux_012_src1_startofpacket;                                              // rsp_demux_012:src1_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                                                // rsp_demux_012:src1_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                      // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [166:0] rsp_demux_013_src0_data;                                                       // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                      // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [24:0] rsp_demux_013_src0_channel;                                                    // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                              // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_013_src1_valid;                                                      // rsp_demux_013:src1_valid -> rsp_mux_001:sink13_valid
	wire  [166:0] rsp_demux_013_src1_data;                                                       // rsp_demux_013:src1_data -> rsp_mux_001:sink13_data
	wire          rsp_demux_013_src1_ready;                                                      // rsp_mux_001:sink13_ready -> rsp_demux_013:src1_ready
	wire   [24:0] rsp_demux_013_src1_channel;                                                    // rsp_demux_013:src1_channel -> rsp_mux_001:sink13_channel
	wire          rsp_demux_013_src1_startofpacket;                                              // rsp_demux_013:src1_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire          rsp_demux_013_src1_endofpacket;                                                // rsp_demux_013:src1_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                      // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [166:0] rsp_demux_014_src0_data;                                                       // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                      // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [24:0] rsp_demux_014_src0_channel;                                                    // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                              // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_014_src1_valid;                                                      // rsp_demux_014:src1_valid -> rsp_mux_001:sink14_valid
	wire  [166:0] rsp_demux_014_src1_data;                                                       // rsp_demux_014:src1_data -> rsp_mux_001:sink14_data
	wire          rsp_demux_014_src1_ready;                                                      // rsp_mux_001:sink14_ready -> rsp_demux_014:src1_ready
	wire   [24:0] rsp_demux_014_src1_channel;                                                    // rsp_demux_014:src1_channel -> rsp_mux_001:sink14_channel
	wire          rsp_demux_014_src1_startofpacket;                                              // rsp_demux_014:src1_startofpacket -> rsp_mux_001:sink14_startofpacket
	wire          rsp_demux_014_src1_endofpacket;                                                // rsp_demux_014:src1_endofpacket -> rsp_mux_001:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                      // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [166:0] rsp_demux_015_src0_data;                                                       // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire          rsp_demux_015_src0_ready;                                                      // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire   [24:0] rsp_demux_015_src0_channel;                                                    // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                              // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_015_src1_valid;                                                      // rsp_demux_015:src1_valid -> rsp_mux_001:sink15_valid
	wire  [166:0] rsp_demux_015_src1_data;                                                       // rsp_demux_015:src1_data -> rsp_mux_001:sink15_data
	wire          rsp_demux_015_src1_ready;                                                      // rsp_mux_001:sink15_ready -> rsp_demux_015:src1_ready
	wire   [24:0] rsp_demux_015_src1_channel;                                                    // rsp_demux_015:src1_channel -> rsp_mux_001:sink15_channel
	wire          rsp_demux_015_src1_startofpacket;                                              // rsp_demux_015:src1_startofpacket -> rsp_mux_001:sink15_startofpacket
	wire          rsp_demux_015_src1_endofpacket;                                                // rsp_demux_015:src1_endofpacket -> rsp_mux_001:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                      // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [166:0] rsp_demux_016_src0_data;                                                       // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire          rsp_demux_016_src0_ready;                                                      // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire   [24:0] rsp_demux_016_src0_channel;                                                    // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                              // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_016_src1_valid;                                                      // rsp_demux_016:src1_valid -> rsp_mux_001:sink16_valid
	wire  [166:0] rsp_demux_016_src1_data;                                                       // rsp_demux_016:src1_data -> rsp_mux_001:sink16_data
	wire          rsp_demux_016_src1_ready;                                                      // rsp_mux_001:sink16_ready -> rsp_demux_016:src1_ready
	wire   [24:0] rsp_demux_016_src1_channel;                                                    // rsp_demux_016:src1_channel -> rsp_mux_001:sink16_channel
	wire          rsp_demux_016_src1_startofpacket;                                              // rsp_demux_016:src1_startofpacket -> rsp_mux_001:sink16_startofpacket
	wire          rsp_demux_016_src1_endofpacket;                                                // rsp_demux_016:src1_endofpacket -> rsp_mux_001:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                                      // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [166:0] rsp_demux_017_src0_data;                                                       // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire          rsp_demux_017_src0_ready;                                                      // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire   [24:0] rsp_demux_017_src0_channel;                                                    // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                              // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_017_src1_valid;                                                      // rsp_demux_017:src1_valid -> rsp_mux_001:sink17_valid
	wire  [166:0] rsp_demux_017_src1_data;                                                       // rsp_demux_017:src1_data -> rsp_mux_001:sink17_data
	wire          rsp_demux_017_src1_ready;                                                      // rsp_mux_001:sink17_ready -> rsp_demux_017:src1_ready
	wire   [24:0] rsp_demux_017_src1_channel;                                                    // rsp_demux_017:src1_channel -> rsp_mux_001:sink17_channel
	wire          rsp_demux_017_src1_startofpacket;                                              // rsp_demux_017:src1_startofpacket -> rsp_mux_001:sink17_startofpacket
	wire          rsp_demux_017_src1_endofpacket;                                                // rsp_demux_017:src1_endofpacket -> rsp_mux_001:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                      // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire  [166:0] rsp_demux_018_src0_data;                                                       // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire          rsp_demux_018_src0_ready;                                                      // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire   [24:0] rsp_demux_018_src0_channel;                                                    // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                                              // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_018_src1_valid;                                                      // rsp_demux_018:src1_valid -> rsp_mux_001:sink18_valid
	wire  [166:0] rsp_demux_018_src1_data;                                                       // rsp_demux_018:src1_data -> rsp_mux_001:sink18_data
	wire          rsp_demux_018_src1_ready;                                                      // rsp_mux_001:sink18_ready -> rsp_demux_018:src1_ready
	wire   [24:0] rsp_demux_018_src1_channel;                                                    // rsp_demux_018:src1_channel -> rsp_mux_001:sink18_channel
	wire          rsp_demux_018_src1_startofpacket;                                              // rsp_demux_018:src1_startofpacket -> rsp_mux_001:sink18_startofpacket
	wire          rsp_demux_018_src1_endofpacket;                                                // rsp_demux_018:src1_endofpacket -> rsp_mux_001:sink18_endofpacket
	wire          rsp_demux_019_src0_valid;                                                      // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire  [166:0] rsp_demux_019_src0_data;                                                       // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire          rsp_demux_019_src0_ready;                                                      // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire   [24:0] rsp_demux_019_src0_channel;                                                    // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                                              // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_019_src1_valid;                                                      // rsp_demux_019:src1_valid -> rsp_mux_001:sink19_valid
	wire  [166:0] rsp_demux_019_src1_data;                                                       // rsp_demux_019:src1_data -> rsp_mux_001:sink19_data
	wire          rsp_demux_019_src1_ready;                                                      // rsp_mux_001:sink19_ready -> rsp_demux_019:src1_ready
	wire   [24:0] rsp_demux_019_src1_channel;                                                    // rsp_demux_019:src1_channel -> rsp_mux_001:sink19_channel
	wire          rsp_demux_019_src1_startofpacket;                                              // rsp_demux_019:src1_startofpacket -> rsp_mux_001:sink19_startofpacket
	wire          rsp_demux_019_src1_endofpacket;                                                // rsp_demux_019:src1_endofpacket -> rsp_mux_001:sink19_endofpacket
	wire          rsp_demux_020_src0_valid;                                                      // rsp_demux_020:src0_valid -> rsp_mux:sink20_valid
	wire  [166:0] rsp_demux_020_src0_data;                                                       // rsp_demux_020:src0_data -> rsp_mux:sink20_data
	wire          rsp_demux_020_src0_ready;                                                      // rsp_mux:sink20_ready -> rsp_demux_020:src0_ready
	wire   [24:0] rsp_demux_020_src0_channel;                                                    // rsp_demux_020:src0_channel -> rsp_mux:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                                              // rsp_demux_020:src0_startofpacket -> rsp_mux:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                // rsp_demux_020:src0_endofpacket -> rsp_mux:sink20_endofpacket
	wire          rsp_demux_020_src1_valid;                                                      // rsp_demux_020:src1_valid -> rsp_mux_001:sink20_valid
	wire  [166:0] rsp_demux_020_src1_data;                                                       // rsp_demux_020:src1_data -> rsp_mux_001:sink20_data
	wire          rsp_demux_020_src1_ready;                                                      // rsp_mux_001:sink20_ready -> rsp_demux_020:src1_ready
	wire   [24:0] rsp_demux_020_src1_channel;                                                    // rsp_demux_020:src1_channel -> rsp_mux_001:sink20_channel
	wire          rsp_demux_020_src1_startofpacket;                                              // rsp_demux_020:src1_startofpacket -> rsp_mux_001:sink20_startofpacket
	wire          rsp_demux_020_src1_endofpacket;                                                // rsp_demux_020:src1_endofpacket -> rsp_mux_001:sink20_endofpacket
	wire          rsp_demux_021_src0_valid;                                                      // rsp_demux_021:src0_valid -> rsp_mux:sink21_valid
	wire  [166:0] rsp_demux_021_src0_data;                                                       // rsp_demux_021:src0_data -> rsp_mux:sink21_data
	wire          rsp_demux_021_src0_ready;                                                      // rsp_mux:sink21_ready -> rsp_demux_021:src0_ready
	wire   [24:0] rsp_demux_021_src0_channel;                                                    // rsp_demux_021:src0_channel -> rsp_mux:sink21_channel
	wire          rsp_demux_021_src0_startofpacket;                                              // rsp_demux_021:src0_startofpacket -> rsp_mux:sink21_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                                // rsp_demux_021:src0_endofpacket -> rsp_mux:sink21_endofpacket
	wire          rsp_demux_021_src1_valid;                                                      // rsp_demux_021:src1_valid -> rsp_mux_001:sink21_valid
	wire  [166:0] rsp_demux_021_src1_data;                                                       // rsp_demux_021:src1_data -> rsp_mux_001:sink21_data
	wire          rsp_demux_021_src1_ready;                                                      // rsp_mux_001:sink21_ready -> rsp_demux_021:src1_ready
	wire   [24:0] rsp_demux_021_src1_channel;                                                    // rsp_demux_021:src1_channel -> rsp_mux_001:sink21_channel
	wire          rsp_demux_021_src1_startofpacket;                                              // rsp_demux_021:src1_startofpacket -> rsp_mux_001:sink21_startofpacket
	wire          rsp_demux_021_src1_endofpacket;                                                // rsp_demux_021:src1_endofpacket -> rsp_mux_001:sink21_endofpacket
	wire          rsp_demux_022_src0_valid;                                                      // rsp_demux_022:src0_valid -> rsp_mux:sink22_valid
	wire  [166:0] rsp_demux_022_src0_data;                                                       // rsp_demux_022:src0_data -> rsp_mux:sink22_data
	wire          rsp_demux_022_src0_ready;                                                      // rsp_mux:sink22_ready -> rsp_demux_022:src0_ready
	wire   [24:0] rsp_demux_022_src0_channel;                                                    // rsp_demux_022:src0_channel -> rsp_mux:sink22_channel
	wire          rsp_demux_022_src0_startofpacket;                                              // rsp_demux_022:src0_startofpacket -> rsp_mux:sink22_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                                // rsp_demux_022:src0_endofpacket -> rsp_mux:sink22_endofpacket
	wire          rsp_demux_022_src1_valid;                                                      // rsp_demux_022:src1_valid -> rsp_mux_001:sink22_valid
	wire  [166:0] rsp_demux_022_src1_data;                                                       // rsp_demux_022:src1_data -> rsp_mux_001:sink22_data
	wire          rsp_demux_022_src1_ready;                                                      // rsp_mux_001:sink22_ready -> rsp_demux_022:src1_ready
	wire   [24:0] rsp_demux_022_src1_channel;                                                    // rsp_demux_022:src1_channel -> rsp_mux_001:sink22_channel
	wire          rsp_demux_022_src1_startofpacket;                                              // rsp_demux_022:src1_startofpacket -> rsp_mux_001:sink22_startofpacket
	wire          rsp_demux_022_src1_endofpacket;                                                // rsp_demux_022:src1_endofpacket -> rsp_mux_001:sink22_endofpacket
	wire          rsp_demux_023_src0_valid;                                                      // rsp_demux_023:src0_valid -> rsp_mux:sink23_valid
	wire  [166:0] rsp_demux_023_src0_data;                                                       // rsp_demux_023:src0_data -> rsp_mux:sink23_data
	wire          rsp_demux_023_src0_ready;                                                      // rsp_mux:sink23_ready -> rsp_demux_023:src0_ready
	wire   [24:0] rsp_demux_023_src0_channel;                                                    // rsp_demux_023:src0_channel -> rsp_mux:sink23_channel
	wire          rsp_demux_023_src0_startofpacket;                                              // rsp_demux_023:src0_startofpacket -> rsp_mux:sink23_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                                // rsp_demux_023:src0_endofpacket -> rsp_mux:sink23_endofpacket
	wire          rsp_demux_023_src1_valid;                                                      // rsp_demux_023:src1_valid -> rsp_mux_001:sink23_valid
	wire  [166:0] rsp_demux_023_src1_data;                                                       // rsp_demux_023:src1_data -> rsp_mux_001:sink23_data
	wire          rsp_demux_023_src1_ready;                                                      // rsp_mux_001:sink23_ready -> rsp_demux_023:src1_ready
	wire   [24:0] rsp_demux_023_src1_channel;                                                    // rsp_demux_023:src1_channel -> rsp_mux_001:sink23_channel
	wire          rsp_demux_023_src1_startofpacket;                                              // rsp_demux_023:src1_startofpacket -> rsp_mux_001:sink23_startofpacket
	wire          rsp_demux_023_src1_endofpacket;                                                // rsp_demux_023:src1_endofpacket -> rsp_mux_001:sink23_endofpacket
	wire          rsp_demux_024_src0_valid;                                                      // rsp_demux_024:src0_valid -> rsp_mux:sink24_valid
	wire  [166:0] rsp_demux_024_src0_data;                                                       // rsp_demux_024:src0_data -> rsp_mux:sink24_data
	wire          rsp_demux_024_src0_ready;                                                      // rsp_mux:sink24_ready -> rsp_demux_024:src0_ready
	wire   [24:0] rsp_demux_024_src0_channel;                                                    // rsp_demux_024:src0_channel -> rsp_mux:sink24_channel
	wire          rsp_demux_024_src0_startofpacket;                                              // rsp_demux_024:src0_startofpacket -> rsp_mux:sink24_startofpacket
	wire          rsp_demux_024_src0_endofpacket;                                                // rsp_demux_024:src0_endofpacket -> rsp_mux:sink24_endofpacket
	wire          rsp_demux_024_src1_valid;                                                      // rsp_demux_024:src1_valid -> rsp_mux_001:sink24_valid
	wire  [166:0] rsp_demux_024_src1_data;                                                       // rsp_demux_024:src1_data -> rsp_mux_001:sink24_data
	wire          rsp_demux_024_src1_ready;                                                      // rsp_mux_001:sink24_ready -> rsp_demux_024:src1_ready
	wire   [24:0] rsp_demux_024_src1_channel;                                                    // rsp_demux_024:src1_channel -> rsp_mux_001:sink24_channel
	wire          rsp_demux_024_src1_startofpacket;                                              // rsp_demux_024:src1_startofpacket -> rsp_mux_001:sink24_startofpacket
	wire          rsp_demux_024_src1_endofpacket;                                                // rsp_demux_024:src1_endofpacket -> rsp_mux_001:sink24_endofpacket
	wire          router_002_src_valid;                                                          // router_002:src_valid -> ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_002_src_data;                                                           // router_002:src_data -> ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                                          // ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter:in_ready -> router_002:src_ready
	wire   [24:0] router_002_src_channel;                                                        // router_002:src_channel -> ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                                  // router_002:src_startofpacket -> ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                                    // router_002:src_endofpacket -> ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter_src_valid;         // ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [166:0] ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter_src_data;          // ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter_src_ready;         // rsp_demux:sink_ready -> ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter_src_channel;       // ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter_src_startofpacket; // ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter_src_endofpacket;   // ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_003_src_valid;                                                          // router_003:src_valid -> ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_003_src_data;                                                           // router_003:src_data -> ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                                          // ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter:in_ready -> router_003:src_ready
	wire   [24:0] router_003_src_channel;                                                        // router_003:src_channel -> ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                                  // router_003:src_startofpacket -> ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                                    // router_003:src_endofpacket -> ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter_src_valid;          // ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [166:0] ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter_src_data;           // ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter_src_ready;          // rsp_demux_001:sink_ready -> ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter_src_channel;        // ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter_src_startofpacket;  // ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter_src_endofpacket;    // ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_004_src_valid;                                                          // router_004:src_valid -> ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_004_src_data;                                                           // router_004:src_data -> ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter:in_data
	wire          router_004_src_ready;                                                          // ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter:in_ready -> router_004:src_ready
	wire   [24:0] router_004_src_channel;                                                        // router_004:src_channel -> ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter:in_channel
	wire          router_004_src_startofpacket;                                                  // router_004:src_startofpacket -> ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter:in_startofpacket
	wire          router_004_src_endofpacket;                                                    // router_004:src_endofpacket -> ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter_src_valid;                  // ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter:out_valid -> rsp_demux_002:sink_valid
	wire  [166:0] ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter_src_data;                   // ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter:out_data -> rsp_demux_002:sink_data
	wire          ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter_src_ready;                  // rsp_demux_002:sink_ready -> ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter_src_channel;                // ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter:out_channel -> rsp_demux_002:sink_channel
	wire          ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter_src_startofpacket;          // ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter_src_endofpacket;            // ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_005_src_valid;                                                          // router_005:src_valid -> ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_005_src_data;                                                           // router_005:src_data -> ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter:in_data
	wire          router_005_src_ready;                                                          // ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter:in_ready -> router_005:src_ready
	wire   [24:0] router_005_src_channel;                                                        // router_005:src_channel -> ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter:in_channel
	wire          router_005_src_startofpacket;                                                  // router_005:src_startofpacket -> ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter:in_startofpacket
	wire          router_005_src_endofpacket;                                                    // router_005:src_endofpacket -> ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter_src_valid;                  // ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire  [166:0] ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter_src_data;                   // ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire          ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter_src_ready;                  // rsp_demux_003:sink_ready -> ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter_src_channel;                // ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire          ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter_src_startofpacket;          // ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter_src_endofpacket;            // ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_006_src_valid;                                                          // router_006:src_valid -> ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_006_src_data;                                                           // router_006:src_data -> ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter:in_data
	wire          router_006_src_ready;                                                          // ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter:in_ready -> router_006:src_ready
	wire   [24:0] router_006_src_channel;                                                        // router_006:src_channel -> ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter:in_channel
	wire          router_006_src_startofpacket;                                                  // router_006:src_startofpacket -> ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter:in_startofpacket
	wire          router_006_src_endofpacket;                                                    // router_006:src_endofpacket -> ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter_src_valid;                  // ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter:out_valid -> rsp_demux_004:sink_valid
	wire  [166:0] ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter_src_data;                   // ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter:out_data -> rsp_demux_004:sink_data
	wire          ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter_src_ready;                  // rsp_demux_004:sink_ready -> ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter_src_channel;                // ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter:out_channel -> rsp_demux_004:sink_channel
	wire          ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter_src_startofpacket;          // ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter_src_endofpacket;            // ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_007_src_valid;                                                          // router_007:src_valid -> ogpu_raster_unit_tile1_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_007_src_data;                                                           // router_007:src_data -> ogpu_raster_unit_tile1_s1_rsp_width_adapter:in_data
	wire          router_007_src_ready;                                                          // ogpu_raster_unit_tile1_s1_rsp_width_adapter:in_ready -> router_007:src_ready
	wire   [24:0] router_007_src_channel;                                                        // router_007:src_channel -> ogpu_raster_unit_tile1_s1_rsp_width_adapter:in_channel
	wire          router_007_src_startofpacket;                                                  // router_007:src_startofpacket -> ogpu_raster_unit_tile1_s1_rsp_width_adapter:in_startofpacket
	wire          router_007_src_endofpacket;                                                    // router_007:src_endofpacket -> ogpu_raster_unit_tile1_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_tile1_s1_rsp_width_adapter_src_valid;                         // ogpu_raster_unit_tile1_s1_rsp_width_adapter:out_valid -> rsp_demux_005:sink_valid
	wire  [166:0] ogpu_raster_unit_tile1_s1_rsp_width_adapter_src_data;                          // ogpu_raster_unit_tile1_s1_rsp_width_adapter:out_data -> rsp_demux_005:sink_data
	wire          ogpu_raster_unit_tile1_s1_rsp_width_adapter_src_ready;                         // rsp_demux_005:sink_ready -> ogpu_raster_unit_tile1_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_tile1_s1_rsp_width_adapter_src_channel;                       // ogpu_raster_unit_tile1_s1_rsp_width_adapter:out_channel -> rsp_demux_005:sink_channel
	wire          ogpu_raster_unit_tile1_s1_rsp_width_adapter_src_startofpacket;                 // ogpu_raster_unit_tile1_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          ogpu_raster_unit_tile1_s1_rsp_width_adapter_src_endofpacket;                   // ogpu_raster_unit_tile1_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_008_src_valid;                                                          // router_008:src_valid -> ogpu_raster_unit_tile0_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_008_src_data;                                                           // router_008:src_data -> ogpu_raster_unit_tile0_s1_rsp_width_adapter:in_data
	wire          router_008_src_ready;                                                          // ogpu_raster_unit_tile0_s1_rsp_width_adapter:in_ready -> router_008:src_ready
	wire   [24:0] router_008_src_channel;                                                        // router_008:src_channel -> ogpu_raster_unit_tile0_s1_rsp_width_adapter:in_channel
	wire          router_008_src_startofpacket;                                                  // router_008:src_startofpacket -> ogpu_raster_unit_tile0_s1_rsp_width_adapter:in_startofpacket
	wire          router_008_src_endofpacket;                                                    // router_008:src_endofpacket -> ogpu_raster_unit_tile0_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_tile0_s1_rsp_width_adapter_src_valid;                         // ogpu_raster_unit_tile0_s1_rsp_width_adapter:out_valid -> rsp_demux_006:sink_valid
	wire  [166:0] ogpu_raster_unit_tile0_s1_rsp_width_adapter_src_data;                          // ogpu_raster_unit_tile0_s1_rsp_width_adapter:out_data -> rsp_demux_006:sink_data
	wire          ogpu_raster_unit_tile0_s1_rsp_width_adapter_src_ready;                         // rsp_demux_006:sink_ready -> ogpu_raster_unit_tile0_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_tile0_s1_rsp_width_adapter_src_channel;                       // ogpu_raster_unit_tile0_s1_rsp_width_adapter:out_channel -> rsp_demux_006:sink_channel
	wire          ogpu_raster_unit_tile0_s1_rsp_width_adapter_src_startofpacket;                 // ogpu_raster_unit_tile0_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          ogpu_raster_unit_tile0_s1_rsp_width_adapter_src_endofpacket;                   // ogpu_raster_unit_tile0_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_009_src_valid;                                                          // router_009:src_valid -> ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_009_src_data;                                                           // router_009:src_data -> ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter:in_data
	wire          router_009_src_ready;                                                          // ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter:in_ready -> router_009:src_ready
	wire   [24:0] router_009_src_channel;                                                        // router_009:src_channel -> ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter:in_channel
	wire          router_009_src_startofpacket;                                                  // router_009:src_startofpacket -> ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter:in_startofpacket
	wire          router_009_src_endofpacket;                                                    // router_009:src_endofpacket -> ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter_src_valid;                    // ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter:out_valid -> rsp_demux_007:sink_valid
	wire  [166:0] ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter_src_data;                     // ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter:out_data -> rsp_demux_007:sink_data
	wire          ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter_src_ready;                    // rsp_demux_007:sink_ready -> ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter_src_channel;                  // ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter:out_channel -> rsp_demux_007:sink_channel
	wire          ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter_src_startofpacket;            // ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter_src_endofpacket;              // ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_010_src_valid;                                                          // router_010:src_valid -> ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_010_src_data;                                                           // router_010:src_data -> ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter:in_data
	wire          router_010_src_ready;                                                          // ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter:in_ready -> router_010:src_ready
	wire   [24:0] router_010_src_channel;                                                        // router_010:src_channel -> ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter:in_channel
	wire          router_010_src_startofpacket;                                                  // router_010:src_startofpacket -> ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter:in_startofpacket
	wire          router_010_src_endofpacket;                                                    // router_010:src_endofpacket -> ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter_src_valid;                    // ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter:out_valid -> rsp_demux_008:sink_valid
	wire  [166:0] ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter_src_data;                     // ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter:out_data -> rsp_demux_008:sink_data
	wire          ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter_src_ready;                    // rsp_demux_008:sink_ready -> ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter_src_channel;                  // ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter:out_channel -> rsp_demux_008:sink_channel
	wire          ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter_src_startofpacket;            // ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter_src_endofpacket;              // ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          router_011_src_valid;                                                          // router_011:src_valid -> ogpu_raster_unit_command_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_011_src_data;                                                           // router_011:src_data -> ogpu_raster_unit_command_s1_rsp_width_adapter:in_data
	wire          router_011_src_ready;                                                          // ogpu_raster_unit_command_s1_rsp_width_adapter:in_ready -> router_011:src_ready
	wire   [24:0] router_011_src_channel;                                                        // router_011:src_channel -> ogpu_raster_unit_command_s1_rsp_width_adapter:in_channel
	wire          router_011_src_startofpacket;                                                  // router_011:src_startofpacket -> ogpu_raster_unit_command_s1_rsp_width_adapter:in_startofpacket
	wire          router_011_src_endofpacket;                                                    // router_011:src_endofpacket -> ogpu_raster_unit_command_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_command_s1_rsp_width_adapter_src_valid;                       // ogpu_raster_unit_command_s1_rsp_width_adapter:out_valid -> rsp_demux_009:sink_valid
	wire  [166:0] ogpu_raster_unit_command_s1_rsp_width_adapter_src_data;                        // ogpu_raster_unit_command_s1_rsp_width_adapter:out_data -> rsp_demux_009:sink_data
	wire          ogpu_raster_unit_command_s1_rsp_width_adapter_src_ready;                       // rsp_demux_009:sink_ready -> ogpu_raster_unit_command_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_command_s1_rsp_width_adapter_src_channel;                     // ogpu_raster_unit_command_s1_rsp_width_adapter:out_channel -> rsp_demux_009:sink_channel
	wire          ogpu_raster_unit_command_s1_rsp_width_adapter_src_startofpacket;               // ogpu_raster_unit_command_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          ogpu_raster_unit_command_s1_rsp_width_adapter_src_endofpacket;                 // ogpu_raster_unit_command_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          router_012_src_valid;                                                          // router_012:src_valid -> ogpu_raster_unit_status_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_012_src_data;                                                           // router_012:src_data -> ogpu_raster_unit_status_s1_rsp_width_adapter:in_data
	wire          router_012_src_ready;                                                          // ogpu_raster_unit_status_s1_rsp_width_adapter:in_ready -> router_012:src_ready
	wire   [24:0] router_012_src_channel;                                                        // router_012:src_channel -> ogpu_raster_unit_status_s1_rsp_width_adapter:in_channel
	wire          router_012_src_startofpacket;                                                  // router_012:src_startofpacket -> ogpu_raster_unit_status_s1_rsp_width_adapter:in_startofpacket
	wire          router_012_src_endofpacket;                                                    // router_012:src_endofpacket -> ogpu_raster_unit_status_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_status_s1_rsp_width_adapter_src_valid;                        // ogpu_raster_unit_status_s1_rsp_width_adapter:out_valid -> rsp_demux_010:sink_valid
	wire  [166:0] ogpu_raster_unit_status_s1_rsp_width_adapter_src_data;                         // ogpu_raster_unit_status_s1_rsp_width_adapter:out_data -> rsp_demux_010:sink_data
	wire          ogpu_raster_unit_status_s1_rsp_width_adapter_src_ready;                        // rsp_demux_010:sink_ready -> ogpu_raster_unit_status_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_status_s1_rsp_width_adapter_src_channel;                      // ogpu_raster_unit_status_s1_rsp_width_adapter:out_channel -> rsp_demux_010:sink_channel
	wire          ogpu_raster_unit_status_s1_rsp_width_adapter_src_startofpacket;                // ogpu_raster_unit_status_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          ogpu_raster_unit_status_s1_rsp_width_adapter_src_endofpacket;                  // ogpu_raster_unit_status_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_013_src_valid;                                                          // router_013:src_valid -> ogpu_raster_unit_v2z_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_013_src_data;                                                           // router_013:src_data -> ogpu_raster_unit_v2z_s1_rsp_width_adapter:in_data
	wire          router_013_src_ready;                                                          // ogpu_raster_unit_v2z_s1_rsp_width_adapter:in_ready -> router_013:src_ready
	wire   [24:0] router_013_src_channel;                                                        // router_013:src_channel -> ogpu_raster_unit_v2z_s1_rsp_width_adapter:in_channel
	wire          router_013_src_startofpacket;                                                  // router_013:src_startofpacket -> ogpu_raster_unit_v2z_s1_rsp_width_adapter:in_startofpacket
	wire          router_013_src_endofpacket;                                                    // router_013:src_endofpacket -> ogpu_raster_unit_v2z_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_v2z_s1_rsp_width_adapter_src_valid;                           // ogpu_raster_unit_v2z_s1_rsp_width_adapter:out_valid -> rsp_demux_011:sink_valid
	wire  [166:0] ogpu_raster_unit_v2z_s1_rsp_width_adapter_src_data;                            // ogpu_raster_unit_v2z_s1_rsp_width_adapter:out_data -> rsp_demux_011:sink_data
	wire          ogpu_raster_unit_v2z_s1_rsp_width_adapter_src_ready;                           // rsp_demux_011:sink_ready -> ogpu_raster_unit_v2z_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_v2z_s1_rsp_width_adapter_src_channel;                         // ogpu_raster_unit_v2z_s1_rsp_width_adapter:out_channel -> rsp_demux_011:sink_channel
	wire          ogpu_raster_unit_v2z_s1_rsp_width_adapter_src_startofpacket;                   // ogpu_raster_unit_v2z_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          ogpu_raster_unit_v2z_s1_rsp_width_adapter_src_endofpacket;                     // ogpu_raster_unit_v2z_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          router_014_src_valid;                                                          // router_014:src_valid -> ogpu_raster_unit_v2y_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_014_src_data;                                                           // router_014:src_data -> ogpu_raster_unit_v2y_s1_rsp_width_adapter:in_data
	wire          router_014_src_ready;                                                          // ogpu_raster_unit_v2y_s1_rsp_width_adapter:in_ready -> router_014:src_ready
	wire   [24:0] router_014_src_channel;                                                        // router_014:src_channel -> ogpu_raster_unit_v2y_s1_rsp_width_adapter:in_channel
	wire          router_014_src_startofpacket;                                                  // router_014:src_startofpacket -> ogpu_raster_unit_v2y_s1_rsp_width_adapter:in_startofpacket
	wire          router_014_src_endofpacket;                                                    // router_014:src_endofpacket -> ogpu_raster_unit_v2y_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_v2y_s1_rsp_width_adapter_src_valid;                           // ogpu_raster_unit_v2y_s1_rsp_width_adapter:out_valid -> rsp_demux_012:sink_valid
	wire  [166:0] ogpu_raster_unit_v2y_s1_rsp_width_adapter_src_data;                            // ogpu_raster_unit_v2y_s1_rsp_width_adapter:out_data -> rsp_demux_012:sink_data
	wire          ogpu_raster_unit_v2y_s1_rsp_width_adapter_src_ready;                           // rsp_demux_012:sink_ready -> ogpu_raster_unit_v2y_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_v2y_s1_rsp_width_adapter_src_channel;                         // ogpu_raster_unit_v2y_s1_rsp_width_adapter:out_channel -> rsp_demux_012:sink_channel
	wire          ogpu_raster_unit_v2y_s1_rsp_width_adapter_src_startofpacket;                   // ogpu_raster_unit_v2y_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          ogpu_raster_unit_v2y_s1_rsp_width_adapter_src_endofpacket;                     // ogpu_raster_unit_v2y_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          router_015_src_valid;                                                          // router_015:src_valid -> ogpu_raster_unit_v2x_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_015_src_data;                                                           // router_015:src_data -> ogpu_raster_unit_v2x_s1_rsp_width_adapter:in_data
	wire          router_015_src_ready;                                                          // ogpu_raster_unit_v2x_s1_rsp_width_adapter:in_ready -> router_015:src_ready
	wire   [24:0] router_015_src_channel;                                                        // router_015:src_channel -> ogpu_raster_unit_v2x_s1_rsp_width_adapter:in_channel
	wire          router_015_src_startofpacket;                                                  // router_015:src_startofpacket -> ogpu_raster_unit_v2x_s1_rsp_width_adapter:in_startofpacket
	wire          router_015_src_endofpacket;                                                    // router_015:src_endofpacket -> ogpu_raster_unit_v2x_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_v2x_s1_rsp_width_adapter_src_valid;                           // ogpu_raster_unit_v2x_s1_rsp_width_adapter:out_valid -> rsp_demux_013:sink_valid
	wire  [166:0] ogpu_raster_unit_v2x_s1_rsp_width_adapter_src_data;                            // ogpu_raster_unit_v2x_s1_rsp_width_adapter:out_data -> rsp_demux_013:sink_data
	wire          ogpu_raster_unit_v2x_s1_rsp_width_adapter_src_ready;                           // rsp_demux_013:sink_ready -> ogpu_raster_unit_v2x_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_v2x_s1_rsp_width_adapter_src_channel;                         // ogpu_raster_unit_v2x_s1_rsp_width_adapter:out_channel -> rsp_demux_013:sink_channel
	wire          ogpu_raster_unit_v2x_s1_rsp_width_adapter_src_startofpacket;                   // ogpu_raster_unit_v2x_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          ogpu_raster_unit_v2x_s1_rsp_width_adapter_src_endofpacket;                     // ogpu_raster_unit_v2x_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          router_016_src_valid;                                                          // router_016:src_valid -> ogpu_raster_unit_v1z_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_016_src_data;                                                           // router_016:src_data -> ogpu_raster_unit_v1z_s1_rsp_width_adapter:in_data
	wire          router_016_src_ready;                                                          // ogpu_raster_unit_v1z_s1_rsp_width_adapter:in_ready -> router_016:src_ready
	wire   [24:0] router_016_src_channel;                                                        // router_016:src_channel -> ogpu_raster_unit_v1z_s1_rsp_width_adapter:in_channel
	wire          router_016_src_startofpacket;                                                  // router_016:src_startofpacket -> ogpu_raster_unit_v1z_s1_rsp_width_adapter:in_startofpacket
	wire          router_016_src_endofpacket;                                                    // router_016:src_endofpacket -> ogpu_raster_unit_v1z_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_v1z_s1_rsp_width_adapter_src_valid;                           // ogpu_raster_unit_v1z_s1_rsp_width_adapter:out_valid -> rsp_demux_014:sink_valid
	wire  [166:0] ogpu_raster_unit_v1z_s1_rsp_width_adapter_src_data;                            // ogpu_raster_unit_v1z_s1_rsp_width_adapter:out_data -> rsp_demux_014:sink_data
	wire          ogpu_raster_unit_v1z_s1_rsp_width_adapter_src_ready;                           // rsp_demux_014:sink_ready -> ogpu_raster_unit_v1z_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_v1z_s1_rsp_width_adapter_src_channel;                         // ogpu_raster_unit_v1z_s1_rsp_width_adapter:out_channel -> rsp_demux_014:sink_channel
	wire          ogpu_raster_unit_v1z_s1_rsp_width_adapter_src_startofpacket;                   // ogpu_raster_unit_v1z_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          ogpu_raster_unit_v1z_s1_rsp_width_adapter_src_endofpacket;                     // ogpu_raster_unit_v1z_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          router_017_src_valid;                                                          // router_017:src_valid -> ogpu_raster_unit_v1y_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_017_src_data;                                                           // router_017:src_data -> ogpu_raster_unit_v1y_s1_rsp_width_adapter:in_data
	wire          router_017_src_ready;                                                          // ogpu_raster_unit_v1y_s1_rsp_width_adapter:in_ready -> router_017:src_ready
	wire   [24:0] router_017_src_channel;                                                        // router_017:src_channel -> ogpu_raster_unit_v1y_s1_rsp_width_adapter:in_channel
	wire          router_017_src_startofpacket;                                                  // router_017:src_startofpacket -> ogpu_raster_unit_v1y_s1_rsp_width_adapter:in_startofpacket
	wire          router_017_src_endofpacket;                                                    // router_017:src_endofpacket -> ogpu_raster_unit_v1y_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_v1y_s1_rsp_width_adapter_src_valid;                           // ogpu_raster_unit_v1y_s1_rsp_width_adapter:out_valid -> rsp_demux_015:sink_valid
	wire  [166:0] ogpu_raster_unit_v1y_s1_rsp_width_adapter_src_data;                            // ogpu_raster_unit_v1y_s1_rsp_width_adapter:out_data -> rsp_demux_015:sink_data
	wire          ogpu_raster_unit_v1y_s1_rsp_width_adapter_src_ready;                           // rsp_demux_015:sink_ready -> ogpu_raster_unit_v1y_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_v1y_s1_rsp_width_adapter_src_channel;                         // ogpu_raster_unit_v1y_s1_rsp_width_adapter:out_channel -> rsp_demux_015:sink_channel
	wire          ogpu_raster_unit_v1y_s1_rsp_width_adapter_src_startofpacket;                   // ogpu_raster_unit_v1y_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          ogpu_raster_unit_v1y_s1_rsp_width_adapter_src_endofpacket;                     // ogpu_raster_unit_v1y_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          router_018_src_valid;                                                          // router_018:src_valid -> ogpu_raster_unit_v1x_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_018_src_data;                                                           // router_018:src_data -> ogpu_raster_unit_v1x_s1_rsp_width_adapter:in_data
	wire          router_018_src_ready;                                                          // ogpu_raster_unit_v1x_s1_rsp_width_adapter:in_ready -> router_018:src_ready
	wire   [24:0] router_018_src_channel;                                                        // router_018:src_channel -> ogpu_raster_unit_v1x_s1_rsp_width_adapter:in_channel
	wire          router_018_src_startofpacket;                                                  // router_018:src_startofpacket -> ogpu_raster_unit_v1x_s1_rsp_width_adapter:in_startofpacket
	wire          router_018_src_endofpacket;                                                    // router_018:src_endofpacket -> ogpu_raster_unit_v1x_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_v1x_s1_rsp_width_adapter_src_valid;                           // ogpu_raster_unit_v1x_s1_rsp_width_adapter:out_valid -> rsp_demux_016:sink_valid
	wire  [166:0] ogpu_raster_unit_v1x_s1_rsp_width_adapter_src_data;                            // ogpu_raster_unit_v1x_s1_rsp_width_adapter:out_data -> rsp_demux_016:sink_data
	wire          ogpu_raster_unit_v1x_s1_rsp_width_adapter_src_ready;                           // rsp_demux_016:sink_ready -> ogpu_raster_unit_v1x_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_v1x_s1_rsp_width_adapter_src_channel;                         // ogpu_raster_unit_v1x_s1_rsp_width_adapter:out_channel -> rsp_demux_016:sink_channel
	wire          ogpu_raster_unit_v1x_s1_rsp_width_adapter_src_startofpacket;                   // ogpu_raster_unit_v1x_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          ogpu_raster_unit_v1x_s1_rsp_width_adapter_src_endofpacket;                     // ogpu_raster_unit_v1x_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          router_019_src_valid;                                                          // router_019:src_valid -> ogpu_raster_unit_v0z_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_019_src_data;                                                           // router_019:src_data -> ogpu_raster_unit_v0z_s1_rsp_width_adapter:in_data
	wire          router_019_src_ready;                                                          // ogpu_raster_unit_v0z_s1_rsp_width_adapter:in_ready -> router_019:src_ready
	wire   [24:0] router_019_src_channel;                                                        // router_019:src_channel -> ogpu_raster_unit_v0z_s1_rsp_width_adapter:in_channel
	wire          router_019_src_startofpacket;                                                  // router_019:src_startofpacket -> ogpu_raster_unit_v0z_s1_rsp_width_adapter:in_startofpacket
	wire          router_019_src_endofpacket;                                                    // router_019:src_endofpacket -> ogpu_raster_unit_v0z_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_v0z_s1_rsp_width_adapter_src_valid;                           // ogpu_raster_unit_v0z_s1_rsp_width_adapter:out_valid -> rsp_demux_017:sink_valid
	wire  [166:0] ogpu_raster_unit_v0z_s1_rsp_width_adapter_src_data;                            // ogpu_raster_unit_v0z_s1_rsp_width_adapter:out_data -> rsp_demux_017:sink_data
	wire          ogpu_raster_unit_v0z_s1_rsp_width_adapter_src_ready;                           // rsp_demux_017:sink_ready -> ogpu_raster_unit_v0z_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_v0z_s1_rsp_width_adapter_src_channel;                         // ogpu_raster_unit_v0z_s1_rsp_width_adapter:out_channel -> rsp_demux_017:sink_channel
	wire          ogpu_raster_unit_v0z_s1_rsp_width_adapter_src_startofpacket;                   // ogpu_raster_unit_v0z_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          ogpu_raster_unit_v0z_s1_rsp_width_adapter_src_endofpacket;                     // ogpu_raster_unit_v0z_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          router_020_src_valid;                                                          // router_020:src_valid -> ogpu_raster_unit_v0y_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_020_src_data;                                                           // router_020:src_data -> ogpu_raster_unit_v0y_s1_rsp_width_adapter:in_data
	wire          router_020_src_ready;                                                          // ogpu_raster_unit_v0y_s1_rsp_width_adapter:in_ready -> router_020:src_ready
	wire   [24:0] router_020_src_channel;                                                        // router_020:src_channel -> ogpu_raster_unit_v0y_s1_rsp_width_adapter:in_channel
	wire          router_020_src_startofpacket;                                                  // router_020:src_startofpacket -> ogpu_raster_unit_v0y_s1_rsp_width_adapter:in_startofpacket
	wire          router_020_src_endofpacket;                                                    // router_020:src_endofpacket -> ogpu_raster_unit_v0y_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_v0y_s1_rsp_width_adapter_src_valid;                           // ogpu_raster_unit_v0y_s1_rsp_width_adapter:out_valid -> rsp_demux_018:sink_valid
	wire  [166:0] ogpu_raster_unit_v0y_s1_rsp_width_adapter_src_data;                            // ogpu_raster_unit_v0y_s1_rsp_width_adapter:out_data -> rsp_demux_018:sink_data
	wire          ogpu_raster_unit_v0y_s1_rsp_width_adapter_src_ready;                           // rsp_demux_018:sink_ready -> ogpu_raster_unit_v0y_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_v0y_s1_rsp_width_adapter_src_channel;                         // ogpu_raster_unit_v0y_s1_rsp_width_adapter:out_channel -> rsp_demux_018:sink_channel
	wire          ogpu_raster_unit_v0y_s1_rsp_width_adapter_src_startofpacket;                   // ogpu_raster_unit_v0y_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          ogpu_raster_unit_v0y_s1_rsp_width_adapter_src_endofpacket;                     // ogpu_raster_unit_v0y_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          router_021_src_valid;                                                          // router_021:src_valid -> ogpu_raster_unit_v0x_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_021_src_data;                                                           // router_021:src_data -> ogpu_raster_unit_v0x_s1_rsp_width_adapter:in_data
	wire          router_021_src_ready;                                                          // ogpu_raster_unit_v0x_s1_rsp_width_adapter:in_ready -> router_021:src_ready
	wire   [24:0] router_021_src_channel;                                                        // router_021:src_channel -> ogpu_raster_unit_v0x_s1_rsp_width_adapter:in_channel
	wire          router_021_src_startofpacket;                                                  // router_021:src_startofpacket -> ogpu_raster_unit_v0x_s1_rsp_width_adapter:in_startofpacket
	wire          router_021_src_endofpacket;                                                    // router_021:src_endofpacket -> ogpu_raster_unit_v0x_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_v0x_s1_rsp_width_adapter_src_valid;                           // ogpu_raster_unit_v0x_s1_rsp_width_adapter:out_valid -> rsp_demux_019:sink_valid
	wire  [166:0] ogpu_raster_unit_v0x_s1_rsp_width_adapter_src_data;                            // ogpu_raster_unit_v0x_s1_rsp_width_adapter:out_data -> rsp_demux_019:sink_data
	wire          ogpu_raster_unit_v0x_s1_rsp_width_adapter_src_ready;                           // rsp_demux_019:sink_ready -> ogpu_raster_unit_v0x_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_v0x_s1_rsp_width_adapter_src_channel;                         // ogpu_raster_unit_v0x_s1_rsp_width_adapter:out_channel -> rsp_demux_019:sink_channel
	wire          ogpu_raster_unit_v0x_s1_rsp_width_adapter_src_startofpacket;                   // ogpu_raster_unit_v0x_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          ogpu_raster_unit_v0x_s1_rsp_width_adapter_src_endofpacket;                     // ogpu_raster_unit_v0x_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          router_022_src_valid;                                                          // router_022:src_valid -> ogpu_quad_store_req_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_022_src_data;                                                           // router_022:src_data -> ogpu_quad_store_req_s1_rsp_width_adapter:in_data
	wire          router_022_src_ready;                                                          // ogpu_quad_store_req_s1_rsp_width_adapter:in_ready -> router_022:src_ready
	wire   [24:0] router_022_src_channel;                                                        // router_022:src_channel -> ogpu_quad_store_req_s1_rsp_width_adapter:in_channel
	wire          router_022_src_startofpacket;                                                  // router_022:src_startofpacket -> ogpu_quad_store_req_s1_rsp_width_adapter:in_startofpacket
	wire          router_022_src_endofpacket;                                                    // router_022:src_endofpacket -> ogpu_quad_store_req_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_quad_store_req_s1_rsp_width_adapter_src_valid;                            // ogpu_quad_store_req_s1_rsp_width_adapter:out_valid -> rsp_demux_020:sink_valid
	wire  [166:0] ogpu_quad_store_req_s1_rsp_width_adapter_src_data;                             // ogpu_quad_store_req_s1_rsp_width_adapter:out_data -> rsp_demux_020:sink_data
	wire          ogpu_quad_store_req_s1_rsp_width_adapter_src_ready;                            // rsp_demux_020:sink_ready -> ogpu_quad_store_req_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_quad_store_req_s1_rsp_width_adapter_src_channel;                          // ogpu_quad_store_req_s1_rsp_width_adapter:out_channel -> rsp_demux_020:sink_channel
	wire          ogpu_quad_store_req_s1_rsp_width_adapter_src_startofpacket;                    // ogpu_quad_store_req_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          ogpu_quad_store_req_s1_rsp_width_adapter_src_endofpacket;                      // ogpu_quad_store_req_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          router_023_src_valid;                                                          // router_023:src_valid -> ogpu_quad_store_data_high_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_023_src_data;                                                           // router_023:src_data -> ogpu_quad_store_data_high_s1_rsp_width_adapter:in_data
	wire          router_023_src_ready;                                                          // ogpu_quad_store_data_high_s1_rsp_width_adapter:in_ready -> router_023:src_ready
	wire   [24:0] router_023_src_channel;                                                        // router_023:src_channel -> ogpu_quad_store_data_high_s1_rsp_width_adapter:in_channel
	wire          router_023_src_startofpacket;                                                  // router_023:src_startofpacket -> ogpu_quad_store_data_high_s1_rsp_width_adapter:in_startofpacket
	wire          router_023_src_endofpacket;                                                    // router_023:src_endofpacket -> ogpu_quad_store_data_high_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_quad_store_data_high_s1_rsp_width_adapter_src_valid;                      // ogpu_quad_store_data_high_s1_rsp_width_adapter:out_valid -> rsp_demux_021:sink_valid
	wire  [166:0] ogpu_quad_store_data_high_s1_rsp_width_adapter_src_data;                       // ogpu_quad_store_data_high_s1_rsp_width_adapter:out_data -> rsp_demux_021:sink_data
	wire          ogpu_quad_store_data_high_s1_rsp_width_adapter_src_ready;                      // rsp_demux_021:sink_ready -> ogpu_quad_store_data_high_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_quad_store_data_high_s1_rsp_width_adapter_src_channel;                    // ogpu_quad_store_data_high_s1_rsp_width_adapter:out_channel -> rsp_demux_021:sink_channel
	wire          ogpu_quad_store_data_high_s1_rsp_width_adapter_src_startofpacket;              // ogpu_quad_store_data_high_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          ogpu_quad_store_data_high_s1_rsp_width_adapter_src_endofpacket;                // ogpu_quad_store_data_high_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          router_024_src_valid;                                                          // router_024:src_valid -> ogpu_quad_store_data_low_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_024_src_data;                                                           // router_024:src_data -> ogpu_quad_store_data_low_s1_rsp_width_adapter:in_data
	wire          router_024_src_ready;                                                          // ogpu_quad_store_data_low_s1_rsp_width_adapter:in_ready -> router_024:src_ready
	wire   [24:0] router_024_src_channel;                                                        // router_024:src_channel -> ogpu_quad_store_data_low_s1_rsp_width_adapter:in_channel
	wire          router_024_src_startofpacket;                                                  // router_024:src_startofpacket -> ogpu_quad_store_data_low_s1_rsp_width_adapter:in_startofpacket
	wire          router_024_src_endofpacket;                                                    // router_024:src_endofpacket -> ogpu_quad_store_data_low_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_quad_store_data_low_s1_rsp_width_adapter_src_valid;                       // ogpu_quad_store_data_low_s1_rsp_width_adapter:out_valid -> rsp_demux_022:sink_valid
	wire  [166:0] ogpu_quad_store_data_low_s1_rsp_width_adapter_src_data;                        // ogpu_quad_store_data_low_s1_rsp_width_adapter:out_data -> rsp_demux_022:sink_data
	wire          ogpu_quad_store_data_low_s1_rsp_width_adapter_src_ready;                       // rsp_demux_022:sink_ready -> ogpu_quad_store_data_low_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_quad_store_data_low_s1_rsp_width_adapter_src_channel;                     // ogpu_quad_store_data_low_s1_rsp_width_adapter:out_channel -> rsp_demux_022:sink_channel
	wire          ogpu_quad_store_data_low_s1_rsp_width_adapter_src_startofpacket;               // ogpu_quad_store_data_low_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          ogpu_quad_store_data_low_s1_rsp_width_adapter_src_endofpacket;                 // ogpu_quad_store_data_low_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          router_025_src_valid;                                                          // router_025:src_valid -> ogpu_quad_store_ack_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_025_src_data;                                                           // router_025:src_data -> ogpu_quad_store_ack_s1_rsp_width_adapter:in_data
	wire          router_025_src_ready;                                                          // ogpu_quad_store_ack_s1_rsp_width_adapter:in_ready -> router_025:src_ready
	wire   [24:0] router_025_src_channel;                                                        // router_025:src_channel -> ogpu_quad_store_ack_s1_rsp_width_adapter:in_channel
	wire          router_025_src_startofpacket;                                                  // router_025:src_startofpacket -> ogpu_quad_store_ack_s1_rsp_width_adapter:in_startofpacket
	wire          router_025_src_endofpacket;                                                    // router_025:src_endofpacket -> ogpu_quad_store_ack_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_quad_store_ack_s1_rsp_width_adapter_src_valid;                            // ogpu_quad_store_ack_s1_rsp_width_adapter:out_valid -> rsp_demux_023:sink_valid
	wire  [166:0] ogpu_quad_store_ack_s1_rsp_width_adapter_src_data;                             // ogpu_quad_store_ack_s1_rsp_width_adapter:out_data -> rsp_demux_023:sink_data
	wire          ogpu_quad_store_ack_s1_rsp_width_adapter_src_ready;                            // rsp_demux_023:sink_ready -> ogpu_quad_store_ack_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_quad_store_ack_s1_rsp_width_adapter_src_channel;                          // ogpu_quad_store_ack_s1_rsp_width_adapter:out_channel -> rsp_demux_023:sink_channel
	wire          ogpu_quad_store_ack_s1_rsp_width_adapter_src_startofpacket;                    // ogpu_quad_store_ack_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          ogpu_quad_store_ack_s1_rsp_width_adapter_src_endofpacket;                      // ogpu_quad_store_ack_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          router_026_src_valid;                                                          // router_026:src_valid -> ogpu_reset_s1_rsp_width_adapter:in_valid
	wire  [130:0] router_026_src_data;                                                           // router_026:src_data -> ogpu_reset_s1_rsp_width_adapter:in_data
	wire          router_026_src_ready;                                                          // ogpu_reset_s1_rsp_width_adapter:in_ready -> router_026:src_ready
	wire   [24:0] router_026_src_channel;                                                        // router_026:src_channel -> ogpu_reset_s1_rsp_width_adapter:in_channel
	wire          router_026_src_startofpacket;                                                  // router_026:src_startofpacket -> ogpu_reset_s1_rsp_width_adapter:in_startofpacket
	wire          router_026_src_endofpacket;                                                    // router_026:src_endofpacket -> ogpu_reset_s1_rsp_width_adapter:in_endofpacket
	wire          ogpu_reset_s1_rsp_width_adapter_src_valid;                                     // ogpu_reset_s1_rsp_width_adapter:out_valid -> rsp_demux_024:sink_valid
	wire  [166:0] ogpu_reset_s1_rsp_width_adapter_src_data;                                      // ogpu_reset_s1_rsp_width_adapter:out_data -> rsp_demux_024:sink_data
	wire          ogpu_reset_s1_rsp_width_adapter_src_ready;                                     // rsp_demux_024:sink_ready -> ogpu_reset_s1_rsp_width_adapter:out_ready
	wire   [24:0] ogpu_reset_s1_rsp_width_adapter_src_channel;                                   // ogpu_reset_s1_rsp_width_adapter:out_channel -> rsp_demux_024:sink_channel
	wire          ogpu_reset_s1_rsp_width_adapter_src_startofpacket;                             // ogpu_reset_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_024:sink_startofpacket
	wire          ogpu_reset_s1_rsp_width_adapter_src_endofpacket;                               // ogpu_reset_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          cmd_mux_src_valid;                                                             // cmd_mux:src_valid -> ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_src_data;                                                              // cmd_mux:src_data -> ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                             // ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire   [24:0] cmd_mux_src_channel;                                                           // cmd_mux:src_channel -> ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                     // cmd_mux:src_startofpacket -> ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                       // cmd_mux:src_endofpacket -> ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter_src_valid;         // ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter:out_valid -> ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter_src_data;          // ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter:out_data -> ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter:sink0_data
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter_src_ready;         // ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter:sink0_ready -> ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter_src_channel;       // ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter:out_channel -> ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter:sink0_channel
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter_src_startofpacket; // ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter:out_startofpacket -> ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter_src_endofpacket;   // ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter:out_endofpacket -> ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                                         // cmd_mux_001:src_valid -> ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_001_src_data;                                                          // cmd_mux_001:src_data -> ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                                         // ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire   [24:0] cmd_mux_001_src_channel;                                                       // cmd_mux_001:src_channel -> ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                                 // cmd_mux_001:src_startofpacket -> ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                   // cmd_mux_001:src_endofpacket -> ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter_src_valid;          // ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter:out_valid -> ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter_src_data;           // ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter:out_data -> ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter:sink0_data
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter_src_ready;          // ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter:sink0_ready -> ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter_src_channel;        // ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter:out_channel -> ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter:sink0_channel
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter_src_startofpacket;  // ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter:out_startofpacket -> ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter_src_endofpacket;    // ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter:out_endofpacket -> ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_002_src_valid;                                                         // cmd_mux_002:src_valid -> ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_002_src_data;                                                          // cmd_mux_002:src_data -> ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter:in_data
	wire          cmd_mux_002_src_ready;                                                         // ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter:in_ready -> cmd_mux_002:src_ready
	wire   [24:0] cmd_mux_002_src_channel;                                                       // cmd_mux_002:src_channel -> ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_002_src_startofpacket;                                                 // cmd_mux_002:src_startofpacket -> ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                   // cmd_mux_002:src_endofpacket -> ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter_src_valid;                  // ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter:out_valid -> ogpu_raster_unit_depth_coef_c_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter_src_data;                   // ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter:out_data -> ogpu_raster_unit_depth_coef_c_s1_burst_adapter:sink0_data
	wire          ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter_src_ready;                  // ogpu_raster_unit_depth_coef_c_s1_burst_adapter:sink0_ready -> ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter_src_channel;                // ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter:out_channel -> ogpu_raster_unit_depth_coef_c_s1_burst_adapter:sink0_channel
	wire          ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter_src_startofpacket;          // ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter:out_startofpacket -> ogpu_raster_unit_depth_coef_c_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter_src_endofpacket;            // ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter:out_endofpacket -> ogpu_raster_unit_depth_coef_c_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                                         // cmd_mux_003:src_valid -> ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_003_src_data;                                                          // cmd_mux_003:src_data -> ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter:in_data
	wire          cmd_mux_003_src_ready;                                                         // ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire   [24:0] cmd_mux_003_src_channel;                                                       // cmd_mux_003:src_channel -> ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_003_src_startofpacket;                                                 // cmd_mux_003:src_startofpacket -> ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                   // cmd_mux_003:src_endofpacket -> ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter_src_valid;                  // ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter:out_valid -> ogpu_raster_unit_depth_coef_b_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter_src_data;                   // ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter:out_data -> ogpu_raster_unit_depth_coef_b_s1_burst_adapter:sink0_data
	wire          ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter_src_ready;                  // ogpu_raster_unit_depth_coef_b_s1_burst_adapter:sink0_ready -> ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter_src_channel;                // ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter:out_channel -> ogpu_raster_unit_depth_coef_b_s1_burst_adapter:sink0_channel
	wire          ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter_src_startofpacket;          // ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter:out_startofpacket -> ogpu_raster_unit_depth_coef_b_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter_src_endofpacket;            // ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter:out_endofpacket -> ogpu_raster_unit_depth_coef_b_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_004_src_valid;                                                         // cmd_mux_004:src_valid -> ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_004_src_data;                                                          // cmd_mux_004:src_data -> ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter:in_data
	wire          cmd_mux_004_src_ready;                                                         // ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter:in_ready -> cmd_mux_004:src_ready
	wire   [24:0] cmd_mux_004_src_channel;                                                       // cmd_mux_004:src_channel -> ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_004_src_startofpacket;                                                 // cmd_mux_004:src_startofpacket -> ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                   // cmd_mux_004:src_endofpacket -> ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter_src_valid;                  // ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter:out_valid -> ogpu_raster_unit_depth_coef_a_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter_src_data;                   // ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter:out_data -> ogpu_raster_unit_depth_coef_a_s1_burst_adapter:sink0_data
	wire          ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter_src_ready;                  // ogpu_raster_unit_depth_coef_a_s1_burst_adapter:sink0_ready -> ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter_src_channel;                // ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter:out_channel -> ogpu_raster_unit_depth_coef_a_s1_burst_adapter:sink0_channel
	wire          ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter_src_startofpacket;          // ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter:out_startofpacket -> ogpu_raster_unit_depth_coef_a_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter_src_endofpacket;            // ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter:out_endofpacket -> ogpu_raster_unit_depth_coef_a_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_005_src_valid;                                                         // cmd_mux_005:src_valid -> ogpu_raster_unit_tile1_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_005_src_data;                                                          // cmd_mux_005:src_data -> ogpu_raster_unit_tile1_s1_cmd_width_adapter:in_data
	wire          cmd_mux_005_src_ready;                                                         // ogpu_raster_unit_tile1_s1_cmd_width_adapter:in_ready -> cmd_mux_005:src_ready
	wire   [24:0] cmd_mux_005_src_channel;                                                       // cmd_mux_005:src_channel -> ogpu_raster_unit_tile1_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_005_src_startofpacket;                                                 // cmd_mux_005:src_startofpacket -> ogpu_raster_unit_tile1_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                   // cmd_mux_005:src_endofpacket -> ogpu_raster_unit_tile1_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_tile1_s1_cmd_width_adapter_src_valid;                         // ogpu_raster_unit_tile1_s1_cmd_width_adapter:out_valid -> ogpu_raster_unit_tile1_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_raster_unit_tile1_s1_cmd_width_adapter_src_data;                          // ogpu_raster_unit_tile1_s1_cmd_width_adapter:out_data -> ogpu_raster_unit_tile1_s1_burst_adapter:sink0_data
	wire          ogpu_raster_unit_tile1_s1_cmd_width_adapter_src_ready;                         // ogpu_raster_unit_tile1_s1_burst_adapter:sink0_ready -> ogpu_raster_unit_tile1_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_tile1_s1_cmd_width_adapter_src_channel;                       // ogpu_raster_unit_tile1_s1_cmd_width_adapter:out_channel -> ogpu_raster_unit_tile1_s1_burst_adapter:sink0_channel
	wire          ogpu_raster_unit_tile1_s1_cmd_width_adapter_src_startofpacket;                 // ogpu_raster_unit_tile1_s1_cmd_width_adapter:out_startofpacket -> ogpu_raster_unit_tile1_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_raster_unit_tile1_s1_cmd_width_adapter_src_endofpacket;                   // ogpu_raster_unit_tile1_s1_cmd_width_adapter:out_endofpacket -> ogpu_raster_unit_tile1_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_006_src_valid;                                                         // cmd_mux_006:src_valid -> ogpu_raster_unit_tile0_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_006_src_data;                                                          // cmd_mux_006:src_data -> ogpu_raster_unit_tile0_s1_cmd_width_adapter:in_data
	wire          cmd_mux_006_src_ready;                                                         // ogpu_raster_unit_tile0_s1_cmd_width_adapter:in_ready -> cmd_mux_006:src_ready
	wire   [24:0] cmd_mux_006_src_channel;                                                       // cmd_mux_006:src_channel -> ogpu_raster_unit_tile0_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_006_src_startofpacket;                                                 // cmd_mux_006:src_startofpacket -> ogpu_raster_unit_tile0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                   // cmd_mux_006:src_endofpacket -> ogpu_raster_unit_tile0_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_tile0_s1_cmd_width_adapter_src_valid;                         // ogpu_raster_unit_tile0_s1_cmd_width_adapter:out_valid -> ogpu_raster_unit_tile0_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_raster_unit_tile0_s1_cmd_width_adapter_src_data;                          // ogpu_raster_unit_tile0_s1_cmd_width_adapter:out_data -> ogpu_raster_unit_tile0_s1_burst_adapter:sink0_data
	wire          ogpu_raster_unit_tile0_s1_cmd_width_adapter_src_ready;                         // ogpu_raster_unit_tile0_s1_burst_adapter:sink0_ready -> ogpu_raster_unit_tile0_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_tile0_s1_cmd_width_adapter_src_channel;                       // ogpu_raster_unit_tile0_s1_cmd_width_adapter:out_channel -> ogpu_raster_unit_tile0_s1_burst_adapter:sink0_channel
	wire          ogpu_raster_unit_tile0_s1_cmd_width_adapter_src_startofpacket;                 // ogpu_raster_unit_tile0_s1_cmd_width_adapter:out_startofpacket -> ogpu_raster_unit_tile0_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_raster_unit_tile0_s1_cmd_width_adapter_src_endofpacket;                   // ogpu_raster_unit_tile0_s1_cmd_width_adapter:out_endofpacket -> ogpu_raster_unit_tile0_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_007_src_valid;                                                         // cmd_mux_007:src_valid -> ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_007_src_data;                                                          // cmd_mux_007:src_data -> ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter:in_data
	wire          cmd_mux_007_src_ready;                                                         // ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter:in_ready -> cmd_mux_007:src_ready
	wire   [24:0] cmd_mux_007_src_channel;                                                       // cmd_mux_007:src_channel -> ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_007_src_startofpacket;                                                 // cmd_mux_007:src_startofpacket -> ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                   // cmd_mux_007:src_endofpacket -> ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter_src_valid;                    // ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter:out_valid -> ogpu_raster_unit_clip_rect1_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter_src_data;                     // ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter:out_data -> ogpu_raster_unit_clip_rect1_s1_burst_adapter:sink0_data
	wire          ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter_src_ready;                    // ogpu_raster_unit_clip_rect1_s1_burst_adapter:sink0_ready -> ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter_src_channel;                  // ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter:out_channel -> ogpu_raster_unit_clip_rect1_s1_burst_adapter:sink0_channel
	wire          ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter_src_startofpacket;            // ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter:out_startofpacket -> ogpu_raster_unit_clip_rect1_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter_src_endofpacket;              // ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter:out_endofpacket -> ogpu_raster_unit_clip_rect1_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_008_src_valid;                                                         // cmd_mux_008:src_valid -> ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_008_src_data;                                                          // cmd_mux_008:src_data -> ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter:in_data
	wire          cmd_mux_008_src_ready;                                                         // ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter:in_ready -> cmd_mux_008:src_ready
	wire   [24:0] cmd_mux_008_src_channel;                                                       // cmd_mux_008:src_channel -> ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_008_src_startofpacket;                                                 // cmd_mux_008:src_startofpacket -> ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                   // cmd_mux_008:src_endofpacket -> ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter_src_valid;                    // ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter:out_valid -> ogpu_raster_unit_clip_rect0_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter_src_data;                     // ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter:out_data -> ogpu_raster_unit_clip_rect0_s1_burst_adapter:sink0_data
	wire          ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter_src_ready;                    // ogpu_raster_unit_clip_rect0_s1_burst_adapter:sink0_ready -> ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter_src_channel;                  // ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter:out_channel -> ogpu_raster_unit_clip_rect0_s1_burst_adapter:sink0_channel
	wire          ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter_src_startofpacket;            // ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter:out_startofpacket -> ogpu_raster_unit_clip_rect0_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter_src_endofpacket;              // ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter:out_endofpacket -> ogpu_raster_unit_clip_rect0_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_009_src_valid;                                                         // cmd_mux_009:src_valid -> ogpu_raster_unit_command_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_009_src_data;                                                          // cmd_mux_009:src_data -> ogpu_raster_unit_command_s1_cmd_width_adapter:in_data
	wire          cmd_mux_009_src_ready;                                                         // ogpu_raster_unit_command_s1_cmd_width_adapter:in_ready -> cmd_mux_009:src_ready
	wire   [24:0] cmd_mux_009_src_channel;                                                       // cmd_mux_009:src_channel -> ogpu_raster_unit_command_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_009_src_startofpacket;                                                 // cmd_mux_009:src_startofpacket -> ogpu_raster_unit_command_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                   // cmd_mux_009:src_endofpacket -> ogpu_raster_unit_command_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_command_s1_cmd_width_adapter_src_valid;                       // ogpu_raster_unit_command_s1_cmd_width_adapter:out_valid -> ogpu_raster_unit_command_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_raster_unit_command_s1_cmd_width_adapter_src_data;                        // ogpu_raster_unit_command_s1_cmd_width_adapter:out_data -> ogpu_raster_unit_command_s1_burst_adapter:sink0_data
	wire          ogpu_raster_unit_command_s1_cmd_width_adapter_src_ready;                       // ogpu_raster_unit_command_s1_burst_adapter:sink0_ready -> ogpu_raster_unit_command_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_command_s1_cmd_width_adapter_src_channel;                     // ogpu_raster_unit_command_s1_cmd_width_adapter:out_channel -> ogpu_raster_unit_command_s1_burst_adapter:sink0_channel
	wire          ogpu_raster_unit_command_s1_cmd_width_adapter_src_startofpacket;               // ogpu_raster_unit_command_s1_cmd_width_adapter:out_startofpacket -> ogpu_raster_unit_command_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_raster_unit_command_s1_cmd_width_adapter_src_endofpacket;                 // ogpu_raster_unit_command_s1_cmd_width_adapter:out_endofpacket -> ogpu_raster_unit_command_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_010_src_valid;                                                         // cmd_mux_010:src_valid -> ogpu_raster_unit_status_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_010_src_data;                                                          // cmd_mux_010:src_data -> ogpu_raster_unit_status_s1_cmd_width_adapter:in_data
	wire          cmd_mux_010_src_ready;                                                         // ogpu_raster_unit_status_s1_cmd_width_adapter:in_ready -> cmd_mux_010:src_ready
	wire   [24:0] cmd_mux_010_src_channel;                                                       // cmd_mux_010:src_channel -> ogpu_raster_unit_status_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_010_src_startofpacket;                                                 // cmd_mux_010:src_startofpacket -> ogpu_raster_unit_status_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                   // cmd_mux_010:src_endofpacket -> ogpu_raster_unit_status_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_status_s1_cmd_width_adapter_src_valid;                        // ogpu_raster_unit_status_s1_cmd_width_adapter:out_valid -> ogpu_raster_unit_status_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_raster_unit_status_s1_cmd_width_adapter_src_data;                         // ogpu_raster_unit_status_s1_cmd_width_adapter:out_data -> ogpu_raster_unit_status_s1_burst_adapter:sink0_data
	wire          ogpu_raster_unit_status_s1_cmd_width_adapter_src_ready;                        // ogpu_raster_unit_status_s1_burst_adapter:sink0_ready -> ogpu_raster_unit_status_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_status_s1_cmd_width_adapter_src_channel;                      // ogpu_raster_unit_status_s1_cmd_width_adapter:out_channel -> ogpu_raster_unit_status_s1_burst_adapter:sink0_channel
	wire          ogpu_raster_unit_status_s1_cmd_width_adapter_src_startofpacket;                // ogpu_raster_unit_status_s1_cmd_width_adapter:out_startofpacket -> ogpu_raster_unit_status_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_raster_unit_status_s1_cmd_width_adapter_src_endofpacket;                  // ogpu_raster_unit_status_s1_cmd_width_adapter:out_endofpacket -> ogpu_raster_unit_status_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_011_src_valid;                                                         // cmd_mux_011:src_valid -> ogpu_raster_unit_v2z_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_011_src_data;                                                          // cmd_mux_011:src_data -> ogpu_raster_unit_v2z_s1_cmd_width_adapter:in_data
	wire          cmd_mux_011_src_ready;                                                         // ogpu_raster_unit_v2z_s1_cmd_width_adapter:in_ready -> cmd_mux_011:src_ready
	wire   [24:0] cmd_mux_011_src_channel;                                                       // cmd_mux_011:src_channel -> ogpu_raster_unit_v2z_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_011_src_startofpacket;                                                 // cmd_mux_011:src_startofpacket -> ogpu_raster_unit_v2z_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                   // cmd_mux_011:src_endofpacket -> ogpu_raster_unit_v2z_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_v2z_s1_cmd_width_adapter_src_valid;                           // ogpu_raster_unit_v2z_s1_cmd_width_adapter:out_valid -> ogpu_raster_unit_v2z_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_raster_unit_v2z_s1_cmd_width_adapter_src_data;                            // ogpu_raster_unit_v2z_s1_cmd_width_adapter:out_data -> ogpu_raster_unit_v2z_s1_burst_adapter:sink0_data
	wire          ogpu_raster_unit_v2z_s1_cmd_width_adapter_src_ready;                           // ogpu_raster_unit_v2z_s1_burst_adapter:sink0_ready -> ogpu_raster_unit_v2z_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_v2z_s1_cmd_width_adapter_src_channel;                         // ogpu_raster_unit_v2z_s1_cmd_width_adapter:out_channel -> ogpu_raster_unit_v2z_s1_burst_adapter:sink0_channel
	wire          ogpu_raster_unit_v2z_s1_cmd_width_adapter_src_startofpacket;                   // ogpu_raster_unit_v2z_s1_cmd_width_adapter:out_startofpacket -> ogpu_raster_unit_v2z_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_raster_unit_v2z_s1_cmd_width_adapter_src_endofpacket;                     // ogpu_raster_unit_v2z_s1_cmd_width_adapter:out_endofpacket -> ogpu_raster_unit_v2z_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_012_src_valid;                                                         // cmd_mux_012:src_valid -> ogpu_raster_unit_v2y_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_012_src_data;                                                          // cmd_mux_012:src_data -> ogpu_raster_unit_v2y_s1_cmd_width_adapter:in_data
	wire          cmd_mux_012_src_ready;                                                         // ogpu_raster_unit_v2y_s1_cmd_width_adapter:in_ready -> cmd_mux_012:src_ready
	wire   [24:0] cmd_mux_012_src_channel;                                                       // cmd_mux_012:src_channel -> ogpu_raster_unit_v2y_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_012_src_startofpacket;                                                 // cmd_mux_012:src_startofpacket -> ogpu_raster_unit_v2y_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                   // cmd_mux_012:src_endofpacket -> ogpu_raster_unit_v2y_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_v2y_s1_cmd_width_adapter_src_valid;                           // ogpu_raster_unit_v2y_s1_cmd_width_adapter:out_valid -> ogpu_raster_unit_v2y_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_raster_unit_v2y_s1_cmd_width_adapter_src_data;                            // ogpu_raster_unit_v2y_s1_cmd_width_adapter:out_data -> ogpu_raster_unit_v2y_s1_burst_adapter:sink0_data
	wire          ogpu_raster_unit_v2y_s1_cmd_width_adapter_src_ready;                           // ogpu_raster_unit_v2y_s1_burst_adapter:sink0_ready -> ogpu_raster_unit_v2y_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_v2y_s1_cmd_width_adapter_src_channel;                         // ogpu_raster_unit_v2y_s1_cmd_width_adapter:out_channel -> ogpu_raster_unit_v2y_s1_burst_adapter:sink0_channel
	wire          ogpu_raster_unit_v2y_s1_cmd_width_adapter_src_startofpacket;                   // ogpu_raster_unit_v2y_s1_cmd_width_adapter:out_startofpacket -> ogpu_raster_unit_v2y_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_raster_unit_v2y_s1_cmd_width_adapter_src_endofpacket;                     // ogpu_raster_unit_v2y_s1_cmd_width_adapter:out_endofpacket -> ogpu_raster_unit_v2y_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_013_src_valid;                                                         // cmd_mux_013:src_valid -> ogpu_raster_unit_v2x_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_013_src_data;                                                          // cmd_mux_013:src_data -> ogpu_raster_unit_v2x_s1_cmd_width_adapter:in_data
	wire          cmd_mux_013_src_ready;                                                         // ogpu_raster_unit_v2x_s1_cmd_width_adapter:in_ready -> cmd_mux_013:src_ready
	wire   [24:0] cmd_mux_013_src_channel;                                                       // cmd_mux_013:src_channel -> ogpu_raster_unit_v2x_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_013_src_startofpacket;                                                 // cmd_mux_013:src_startofpacket -> ogpu_raster_unit_v2x_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                   // cmd_mux_013:src_endofpacket -> ogpu_raster_unit_v2x_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_v2x_s1_cmd_width_adapter_src_valid;                           // ogpu_raster_unit_v2x_s1_cmd_width_adapter:out_valid -> ogpu_raster_unit_v2x_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_raster_unit_v2x_s1_cmd_width_adapter_src_data;                            // ogpu_raster_unit_v2x_s1_cmd_width_adapter:out_data -> ogpu_raster_unit_v2x_s1_burst_adapter:sink0_data
	wire          ogpu_raster_unit_v2x_s1_cmd_width_adapter_src_ready;                           // ogpu_raster_unit_v2x_s1_burst_adapter:sink0_ready -> ogpu_raster_unit_v2x_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_v2x_s1_cmd_width_adapter_src_channel;                         // ogpu_raster_unit_v2x_s1_cmd_width_adapter:out_channel -> ogpu_raster_unit_v2x_s1_burst_adapter:sink0_channel
	wire          ogpu_raster_unit_v2x_s1_cmd_width_adapter_src_startofpacket;                   // ogpu_raster_unit_v2x_s1_cmd_width_adapter:out_startofpacket -> ogpu_raster_unit_v2x_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_raster_unit_v2x_s1_cmd_width_adapter_src_endofpacket;                     // ogpu_raster_unit_v2x_s1_cmd_width_adapter:out_endofpacket -> ogpu_raster_unit_v2x_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_014_src_valid;                                                         // cmd_mux_014:src_valid -> ogpu_raster_unit_v1z_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_014_src_data;                                                          // cmd_mux_014:src_data -> ogpu_raster_unit_v1z_s1_cmd_width_adapter:in_data
	wire          cmd_mux_014_src_ready;                                                         // ogpu_raster_unit_v1z_s1_cmd_width_adapter:in_ready -> cmd_mux_014:src_ready
	wire   [24:0] cmd_mux_014_src_channel;                                                       // cmd_mux_014:src_channel -> ogpu_raster_unit_v1z_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_014_src_startofpacket;                                                 // cmd_mux_014:src_startofpacket -> ogpu_raster_unit_v1z_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                   // cmd_mux_014:src_endofpacket -> ogpu_raster_unit_v1z_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_v1z_s1_cmd_width_adapter_src_valid;                           // ogpu_raster_unit_v1z_s1_cmd_width_adapter:out_valid -> ogpu_raster_unit_v1z_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_raster_unit_v1z_s1_cmd_width_adapter_src_data;                            // ogpu_raster_unit_v1z_s1_cmd_width_adapter:out_data -> ogpu_raster_unit_v1z_s1_burst_adapter:sink0_data
	wire          ogpu_raster_unit_v1z_s1_cmd_width_adapter_src_ready;                           // ogpu_raster_unit_v1z_s1_burst_adapter:sink0_ready -> ogpu_raster_unit_v1z_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_v1z_s1_cmd_width_adapter_src_channel;                         // ogpu_raster_unit_v1z_s1_cmd_width_adapter:out_channel -> ogpu_raster_unit_v1z_s1_burst_adapter:sink0_channel
	wire          ogpu_raster_unit_v1z_s1_cmd_width_adapter_src_startofpacket;                   // ogpu_raster_unit_v1z_s1_cmd_width_adapter:out_startofpacket -> ogpu_raster_unit_v1z_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_raster_unit_v1z_s1_cmd_width_adapter_src_endofpacket;                     // ogpu_raster_unit_v1z_s1_cmd_width_adapter:out_endofpacket -> ogpu_raster_unit_v1z_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_015_src_valid;                                                         // cmd_mux_015:src_valid -> ogpu_raster_unit_v1y_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_015_src_data;                                                          // cmd_mux_015:src_data -> ogpu_raster_unit_v1y_s1_cmd_width_adapter:in_data
	wire          cmd_mux_015_src_ready;                                                         // ogpu_raster_unit_v1y_s1_cmd_width_adapter:in_ready -> cmd_mux_015:src_ready
	wire   [24:0] cmd_mux_015_src_channel;                                                       // cmd_mux_015:src_channel -> ogpu_raster_unit_v1y_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_015_src_startofpacket;                                                 // cmd_mux_015:src_startofpacket -> ogpu_raster_unit_v1y_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                   // cmd_mux_015:src_endofpacket -> ogpu_raster_unit_v1y_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_v1y_s1_cmd_width_adapter_src_valid;                           // ogpu_raster_unit_v1y_s1_cmd_width_adapter:out_valid -> ogpu_raster_unit_v1y_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_raster_unit_v1y_s1_cmd_width_adapter_src_data;                            // ogpu_raster_unit_v1y_s1_cmd_width_adapter:out_data -> ogpu_raster_unit_v1y_s1_burst_adapter:sink0_data
	wire          ogpu_raster_unit_v1y_s1_cmd_width_adapter_src_ready;                           // ogpu_raster_unit_v1y_s1_burst_adapter:sink0_ready -> ogpu_raster_unit_v1y_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_v1y_s1_cmd_width_adapter_src_channel;                         // ogpu_raster_unit_v1y_s1_cmd_width_adapter:out_channel -> ogpu_raster_unit_v1y_s1_burst_adapter:sink0_channel
	wire          ogpu_raster_unit_v1y_s1_cmd_width_adapter_src_startofpacket;                   // ogpu_raster_unit_v1y_s1_cmd_width_adapter:out_startofpacket -> ogpu_raster_unit_v1y_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_raster_unit_v1y_s1_cmd_width_adapter_src_endofpacket;                     // ogpu_raster_unit_v1y_s1_cmd_width_adapter:out_endofpacket -> ogpu_raster_unit_v1y_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_016_src_valid;                                                         // cmd_mux_016:src_valid -> ogpu_raster_unit_v1x_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_016_src_data;                                                          // cmd_mux_016:src_data -> ogpu_raster_unit_v1x_s1_cmd_width_adapter:in_data
	wire          cmd_mux_016_src_ready;                                                         // ogpu_raster_unit_v1x_s1_cmd_width_adapter:in_ready -> cmd_mux_016:src_ready
	wire   [24:0] cmd_mux_016_src_channel;                                                       // cmd_mux_016:src_channel -> ogpu_raster_unit_v1x_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_016_src_startofpacket;                                                 // cmd_mux_016:src_startofpacket -> ogpu_raster_unit_v1x_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                   // cmd_mux_016:src_endofpacket -> ogpu_raster_unit_v1x_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_v1x_s1_cmd_width_adapter_src_valid;                           // ogpu_raster_unit_v1x_s1_cmd_width_adapter:out_valid -> ogpu_raster_unit_v1x_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_raster_unit_v1x_s1_cmd_width_adapter_src_data;                            // ogpu_raster_unit_v1x_s1_cmd_width_adapter:out_data -> ogpu_raster_unit_v1x_s1_burst_adapter:sink0_data
	wire          ogpu_raster_unit_v1x_s1_cmd_width_adapter_src_ready;                           // ogpu_raster_unit_v1x_s1_burst_adapter:sink0_ready -> ogpu_raster_unit_v1x_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_v1x_s1_cmd_width_adapter_src_channel;                         // ogpu_raster_unit_v1x_s1_cmd_width_adapter:out_channel -> ogpu_raster_unit_v1x_s1_burst_adapter:sink0_channel
	wire          ogpu_raster_unit_v1x_s1_cmd_width_adapter_src_startofpacket;                   // ogpu_raster_unit_v1x_s1_cmd_width_adapter:out_startofpacket -> ogpu_raster_unit_v1x_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_raster_unit_v1x_s1_cmd_width_adapter_src_endofpacket;                     // ogpu_raster_unit_v1x_s1_cmd_width_adapter:out_endofpacket -> ogpu_raster_unit_v1x_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_017_src_valid;                                                         // cmd_mux_017:src_valid -> ogpu_raster_unit_v0z_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_017_src_data;                                                          // cmd_mux_017:src_data -> ogpu_raster_unit_v0z_s1_cmd_width_adapter:in_data
	wire          cmd_mux_017_src_ready;                                                         // ogpu_raster_unit_v0z_s1_cmd_width_adapter:in_ready -> cmd_mux_017:src_ready
	wire   [24:0] cmd_mux_017_src_channel;                                                       // cmd_mux_017:src_channel -> ogpu_raster_unit_v0z_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_017_src_startofpacket;                                                 // cmd_mux_017:src_startofpacket -> ogpu_raster_unit_v0z_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                   // cmd_mux_017:src_endofpacket -> ogpu_raster_unit_v0z_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_v0z_s1_cmd_width_adapter_src_valid;                           // ogpu_raster_unit_v0z_s1_cmd_width_adapter:out_valid -> ogpu_raster_unit_v0z_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_raster_unit_v0z_s1_cmd_width_adapter_src_data;                            // ogpu_raster_unit_v0z_s1_cmd_width_adapter:out_data -> ogpu_raster_unit_v0z_s1_burst_adapter:sink0_data
	wire          ogpu_raster_unit_v0z_s1_cmd_width_adapter_src_ready;                           // ogpu_raster_unit_v0z_s1_burst_adapter:sink0_ready -> ogpu_raster_unit_v0z_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_v0z_s1_cmd_width_adapter_src_channel;                         // ogpu_raster_unit_v0z_s1_cmd_width_adapter:out_channel -> ogpu_raster_unit_v0z_s1_burst_adapter:sink0_channel
	wire          ogpu_raster_unit_v0z_s1_cmd_width_adapter_src_startofpacket;                   // ogpu_raster_unit_v0z_s1_cmd_width_adapter:out_startofpacket -> ogpu_raster_unit_v0z_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_raster_unit_v0z_s1_cmd_width_adapter_src_endofpacket;                     // ogpu_raster_unit_v0z_s1_cmd_width_adapter:out_endofpacket -> ogpu_raster_unit_v0z_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_018_src_valid;                                                         // cmd_mux_018:src_valid -> ogpu_raster_unit_v0y_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_018_src_data;                                                          // cmd_mux_018:src_data -> ogpu_raster_unit_v0y_s1_cmd_width_adapter:in_data
	wire          cmd_mux_018_src_ready;                                                         // ogpu_raster_unit_v0y_s1_cmd_width_adapter:in_ready -> cmd_mux_018:src_ready
	wire   [24:0] cmd_mux_018_src_channel;                                                       // cmd_mux_018:src_channel -> ogpu_raster_unit_v0y_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_018_src_startofpacket;                                                 // cmd_mux_018:src_startofpacket -> ogpu_raster_unit_v0y_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                   // cmd_mux_018:src_endofpacket -> ogpu_raster_unit_v0y_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_v0y_s1_cmd_width_adapter_src_valid;                           // ogpu_raster_unit_v0y_s1_cmd_width_adapter:out_valid -> ogpu_raster_unit_v0y_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_raster_unit_v0y_s1_cmd_width_adapter_src_data;                            // ogpu_raster_unit_v0y_s1_cmd_width_adapter:out_data -> ogpu_raster_unit_v0y_s1_burst_adapter:sink0_data
	wire          ogpu_raster_unit_v0y_s1_cmd_width_adapter_src_ready;                           // ogpu_raster_unit_v0y_s1_burst_adapter:sink0_ready -> ogpu_raster_unit_v0y_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_v0y_s1_cmd_width_adapter_src_channel;                         // ogpu_raster_unit_v0y_s1_cmd_width_adapter:out_channel -> ogpu_raster_unit_v0y_s1_burst_adapter:sink0_channel
	wire          ogpu_raster_unit_v0y_s1_cmd_width_adapter_src_startofpacket;                   // ogpu_raster_unit_v0y_s1_cmd_width_adapter:out_startofpacket -> ogpu_raster_unit_v0y_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_raster_unit_v0y_s1_cmd_width_adapter_src_endofpacket;                     // ogpu_raster_unit_v0y_s1_cmd_width_adapter:out_endofpacket -> ogpu_raster_unit_v0y_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_019_src_valid;                                                         // cmd_mux_019:src_valid -> ogpu_raster_unit_v0x_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_019_src_data;                                                          // cmd_mux_019:src_data -> ogpu_raster_unit_v0x_s1_cmd_width_adapter:in_data
	wire          cmd_mux_019_src_ready;                                                         // ogpu_raster_unit_v0x_s1_cmd_width_adapter:in_ready -> cmd_mux_019:src_ready
	wire   [24:0] cmd_mux_019_src_channel;                                                       // cmd_mux_019:src_channel -> ogpu_raster_unit_v0x_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_019_src_startofpacket;                                                 // cmd_mux_019:src_startofpacket -> ogpu_raster_unit_v0x_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                   // cmd_mux_019:src_endofpacket -> ogpu_raster_unit_v0x_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_raster_unit_v0x_s1_cmd_width_adapter_src_valid;                           // ogpu_raster_unit_v0x_s1_cmd_width_adapter:out_valid -> ogpu_raster_unit_v0x_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_raster_unit_v0x_s1_cmd_width_adapter_src_data;                            // ogpu_raster_unit_v0x_s1_cmd_width_adapter:out_data -> ogpu_raster_unit_v0x_s1_burst_adapter:sink0_data
	wire          ogpu_raster_unit_v0x_s1_cmd_width_adapter_src_ready;                           // ogpu_raster_unit_v0x_s1_burst_adapter:sink0_ready -> ogpu_raster_unit_v0x_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_raster_unit_v0x_s1_cmd_width_adapter_src_channel;                         // ogpu_raster_unit_v0x_s1_cmd_width_adapter:out_channel -> ogpu_raster_unit_v0x_s1_burst_adapter:sink0_channel
	wire          ogpu_raster_unit_v0x_s1_cmd_width_adapter_src_startofpacket;                   // ogpu_raster_unit_v0x_s1_cmd_width_adapter:out_startofpacket -> ogpu_raster_unit_v0x_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_raster_unit_v0x_s1_cmd_width_adapter_src_endofpacket;                     // ogpu_raster_unit_v0x_s1_cmd_width_adapter:out_endofpacket -> ogpu_raster_unit_v0x_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_020_src_valid;                                                         // cmd_mux_020:src_valid -> ogpu_quad_store_req_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_020_src_data;                                                          // cmd_mux_020:src_data -> ogpu_quad_store_req_s1_cmd_width_adapter:in_data
	wire          cmd_mux_020_src_ready;                                                         // ogpu_quad_store_req_s1_cmd_width_adapter:in_ready -> cmd_mux_020:src_ready
	wire   [24:0] cmd_mux_020_src_channel;                                                       // cmd_mux_020:src_channel -> ogpu_quad_store_req_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_020_src_startofpacket;                                                 // cmd_mux_020:src_startofpacket -> ogpu_quad_store_req_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                   // cmd_mux_020:src_endofpacket -> ogpu_quad_store_req_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_quad_store_req_s1_cmd_width_adapter_src_valid;                            // ogpu_quad_store_req_s1_cmd_width_adapter:out_valid -> ogpu_quad_store_req_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_quad_store_req_s1_cmd_width_adapter_src_data;                             // ogpu_quad_store_req_s1_cmd_width_adapter:out_data -> ogpu_quad_store_req_s1_burst_adapter:sink0_data
	wire          ogpu_quad_store_req_s1_cmd_width_adapter_src_ready;                            // ogpu_quad_store_req_s1_burst_adapter:sink0_ready -> ogpu_quad_store_req_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_quad_store_req_s1_cmd_width_adapter_src_channel;                          // ogpu_quad_store_req_s1_cmd_width_adapter:out_channel -> ogpu_quad_store_req_s1_burst_adapter:sink0_channel
	wire          ogpu_quad_store_req_s1_cmd_width_adapter_src_startofpacket;                    // ogpu_quad_store_req_s1_cmd_width_adapter:out_startofpacket -> ogpu_quad_store_req_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_quad_store_req_s1_cmd_width_adapter_src_endofpacket;                      // ogpu_quad_store_req_s1_cmd_width_adapter:out_endofpacket -> ogpu_quad_store_req_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_021_src_valid;                                                         // cmd_mux_021:src_valid -> ogpu_quad_store_data_high_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_021_src_data;                                                          // cmd_mux_021:src_data -> ogpu_quad_store_data_high_s1_cmd_width_adapter:in_data
	wire          cmd_mux_021_src_ready;                                                         // ogpu_quad_store_data_high_s1_cmd_width_adapter:in_ready -> cmd_mux_021:src_ready
	wire   [24:0] cmd_mux_021_src_channel;                                                       // cmd_mux_021:src_channel -> ogpu_quad_store_data_high_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_021_src_startofpacket;                                                 // cmd_mux_021:src_startofpacket -> ogpu_quad_store_data_high_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                   // cmd_mux_021:src_endofpacket -> ogpu_quad_store_data_high_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_quad_store_data_high_s1_cmd_width_adapter_src_valid;                      // ogpu_quad_store_data_high_s1_cmd_width_adapter:out_valid -> ogpu_quad_store_data_high_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_quad_store_data_high_s1_cmd_width_adapter_src_data;                       // ogpu_quad_store_data_high_s1_cmd_width_adapter:out_data -> ogpu_quad_store_data_high_s1_burst_adapter:sink0_data
	wire          ogpu_quad_store_data_high_s1_cmd_width_adapter_src_ready;                      // ogpu_quad_store_data_high_s1_burst_adapter:sink0_ready -> ogpu_quad_store_data_high_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_quad_store_data_high_s1_cmd_width_adapter_src_channel;                    // ogpu_quad_store_data_high_s1_cmd_width_adapter:out_channel -> ogpu_quad_store_data_high_s1_burst_adapter:sink0_channel
	wire          ogpu_quad_store_data_high_s1_cmd_width_adapter_src_startofpacket;              // ogpu_quad_store_data_high_s1_cmd_width_adapter:out_startofpacket -> ogpu_quad_store_data_high_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_quad_store_data_high_s1_cmd_width_adapter_src_endofpacket;                // ogpu_quad_store_data_high_s1_cmd_width_adapter:out_endofpacket -> ogpu_quad_store_data_high_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_022_src_valid;                                                         // cmd_mux_022:src_valid -> ogpu_quad_store_data_low_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_022_src_data;                                                          // cmd_mux_022:src_data -> ogpu_quad_store_data_low_s1_cmd_width_adapter:in_data
	wire          cmd_mux_022_src_ready;                                                         // ogpu_quad_store_data_low_s1_cmd_width_adapter:in_ready -> cmd_mux_022:src_ready
	wire   [24:0] cmd_mux_022_src_channel;                                                       // cmd_mux_022:src_channel -> ogpu_quad_store_data_low_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_022_src_startofpacket;                                                 // cmd_mux_022:src_startofpacket -> ogpu_quad_store_data_low_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                                   // cmd_mux_022:src_endofpacket -> ogpu_quad_store_data_low_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_quad_store_data_low_s1_cmd_width_adapter_src_valid;                       // ogpu_quad_store_data_low_s1_cmd_width_adapter:out_valid -> ogpu_quad_store_data_low_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_quad_store_data_low_s1_cmd_width_adapter_src_data;                        // ogpu_quad_store_data_low_s1_cmd_width_adapter:out_data -> ogpu_quad_store_data_low_s1_burst_adapter:sink0_data
	wire          ogpu_quad_store_data_low_s1_cmd_width_adapter_src_ready;                       // ogpu_quad_store_data_low_s1_burst_adapter:sink0_ready -> ogpu_quad_store_data_low_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_quad_store_data_low_s1_cmd_width_adapter_src_channel;                     // ogpu_quad_store_data_low_s1_cmd_width_adapter:out_channel -> ogpu_quad_store_data_low_s1_burst_adapter:sink0_channel
	wire          ogpu_quad_store_data_low_s1_cmd_width_adapter_src_startofpacket;               // ogpu_quad_store_data_low_s1_cmd_width_adapter:out_startofpacket -> ogpu_quad_store_data_low_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_quad_store_data_low_s1_cmd_width_adapter_src_endofpacket;                 // ogpu_quad_store_data_low_s1_cmd_width_adapter:out_endofpacket -> ogpu_quad_store_data_low_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_023_src_valid;                                                         // cmd_mux_023:src_valid -> ogpu_quad_store_ack_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_023_src_data;                                                          // cmd_mux_023:src_data -> ogpu_quad_store_ack_s1_cmd_width_adapter:in_data
	wire          cmd_mux_023_src_ready;                                                         // ogpu_quad_store_ack_s1_cmd_width_adapter:in_ready -> cmd_mux_023:src_ready
	wire   [24:0] cmd_mux_023_src_channel;                                                       // cmd_mux_023:src_channel -> ogpu_quad_store_ack_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_023_src_startofpacket;                                                 // cmd_mux_023:src_startofpacket -> ogpu_quad_store_ack_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                                   // cmd_mux_023:src_endofpacket -> ogpu_quad_store_ack_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_quad_store_ack_s1_cmd_width_adapter_src_valid;                            // ogpu_quad_store_ack_s1_cmd_width_adapter:out_valid -> ogpu_quad_store_ack_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_quad_store_ack_s1_cmd_width_adapter_src_data;                             // ogpu_quad_store_ack_s1_cmd_width_adapter:out_data -> ogpu_quad_store_ack_s1_burst_adapter:sink0_data
	wire          ogpu_quad_store_ack_s1_cmd_width_adapter_src_ready;                            // ogpu_quad_store_ack_s1_burst_adapter:sink0_ready -> ogpu_quad_store_ack_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_quad_store_ack_s1_cmd_width_adapter_src_channel;                          // ogpu_quad_store_ack_s1_cmd_width_adapter:out_channel -> ogpu_quad_store_ack_s1_burst_adapter:sink0_channel
	wire          ogpu_quad_store_ack_s1_cmd_width_adapter_src_startofpacket;                    // ogpu_quad_store_ack_s1_cmd_width_adapter:out_startofpacket -> ogpu_quad_store_ack_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_quad_store_ack_s1_cmd_width_adapter_src_endofpacket;                      // ogpu_quad_store_ack_s1_cmd_width_adapter:out_endofpacket -> ogpu_quad_store_ack_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_024_src_valid;                                                         // cmd_mux_024:src_valid -> ogpu_reset_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_024_src_data;                                                          // cmd_mux_024:src_data -> ogpu_reset_s1_cmd_width_adapter:in_data
	wire          cmd_mux_024_src_ready;                                                         // ogpu_reset_s1_cmd_width_adapter:in_ready -> cmd_mux_024:src_ready
	wire   [24:0] cmd_mux_024_src_channel;                                                       // cmd_mux_024:src_channel -> ogpu_reset_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_024_src_startofpacket;                                                 // cmd_mux_024:src_startofpacket -> ogpu_reset_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_024_src_endofpacket;                                                   // cmd_mux_024:src_endofpacket -> ogpu_reset_s1_cmd_width_adapter:in_endofpacket
	wire          ogpu_reset_s1_cmd_width_adapter_src_valid;                                     // ogpu_reset_s1_cmd_width_adapter:out_valid -> ogpu_reset_s1_burst_adapter:sink0_valid
	wire  [130:0] ogpu_reset_s1_cmd_width_adapter_src_data;                                      // ogpu_reset_s1_cmd_width_adapter:out_data -> ogpu_reset_s1_burst_adapter:sink0_data
	wire          ogpu_reset_s1_cmd_width_adapter_src_ready;                                     // ogpu_reset_s1_burst_adapter:sink0_ready -> ogpu_reset_s1_cmd_width_adapter:out_ready
	wire   [24:0] ogpu_reset_s1_cmd_width_adapter_src_channel;                                   // ogpu_reset_s1_cmd_width_adapter:out_channel -> ogpu_reset_s1_burst_adapter:sink0_channel
	wire          ogpu_reset_s1_cmd_width_adapter_src_startofpacket;                             // ogpu_reset_s1_cmd_width_adapter:out_startofpacket -> ogpu_reset_s1_burst_adapter:sink0_startofpacket
	wire          ogpu_reset_s1_cmd_width_adapter_src_endofpacket;                               // ogpu_reset_s1_cmd_width_adapter:out_endofpacket -> ogpu_reset_s1_burst_adapter:sink0_endofpacket
	wire   [24:0] hps_0_h2f_axi_master_wr_limiter_cmd_valid_data;                                // hps_0_h2f_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [24:0] hps_0_h2f_axi_master_rd_limiter_cmd_valid_data;                                // hps_0_h2f_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo_out_valid;          // ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo_out_data;           // ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo_out_ready;          // avalon_st_adapter:in_0_ready -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                 // avalon_st_adapter:out_0_valid -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                  // avalon_st_adapter:out_0_data -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                 // ogpu_raster_unit_quad_buffer_addr_high_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                 // avalon_st_adapter:out_0_error -> ogpu_raster_unit_quad_buffer_addr_high_s1_agent:rdata_fifo_sink_error
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo_out_valid;           // ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo_out_data;            // ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo_out_ready;           // avalon_st_adapter_001:in_0_ready -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                             // avalon_st_adapter_001:out_0_valid -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                              // avalon_st_adapter_001:out_0_data -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                             // ogpu_raster_unit_quad_buffer_addr_low_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                             // avalon_st_adapter_001:out_0_error -> ogpu_raster_unit_quad_buffer_addr_low_s1_agent:rdata_fifo_sink_error
	wire          ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo_out_valid;                   // ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo_out_data;                    // ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo_out_ready;                   // avalon_st_adapter_002:in_0_ready -> ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                             // avalon_st_adapter_002:out_0_valid -> ogpu_raster_unit_depth_coef_c_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                              // avalon_st_adapter_002:out_0_data -> ogpu_raster_unit_depth_coef_c_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                             // ogpu_raster_unit_depth_coef_c_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                             // avalon_st_adapter_002:out_0_error -> ogpu_raster_unit_depth_coef_c_s1_agent:rdata_fifo_sink_error
	wire          ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo_out_valid;                   // ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo_out_data;                    // ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo_out_ready;                   // avalon_st_adapter_003:in_0_ready -> ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                             // avalon_st_adapter_003:out_0_valid -> ogpu_raster_unit_depth_coef_b_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                              // avalon_st_adapter_003:out_0_data -> ogpu_raster_unit_depth_coef_b_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                             // ogpu_raster_unit_depth_coef_b_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                             // avalon_st_adapter_003:out_0_error -> ogpu_raster_unit_depth_coef_b_s1_agent:rdata_fifo_sink_error
	wire          ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo_out_valid;                   // ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo_out_data;                    // ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo_out_ready;                   // avalon_st_adapter_004:in_0_ready -> ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                             // avalon_st_adapter_004:out_0_valid -> ogpu_raster_unit_depth_coef_a_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                              // avalon_st_adapter_004:out_0_data -> ogpu_raster_unit_depth_coef_a_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                             // ogpu_raster_unit_depth_coef_a_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                             // avalon_st_adapter_004:out_0_error -> ogpu_raster_unit_depth_coef_a_s1_agent:rdata_fifo_sink_error
	wire          ogpu_raster_unit_tile1_s1_agent_rdata_fifo_out_valid;                          // ogpu_raster_unit_tile1_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] ogpu_raster_unit_tile1_s1_agent_rdata_fifo_out_data;                           // ogpu_raster_unit_tile1_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          ogpu_raster_unit_tile1_s1_agent_rdata_fifo_out_ready;                          // avalon_st_adapter_005:in_0_ready -> ogpu_raster_unit_tile1_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                             // avalon_st_adapter_005:out_0_valid -> ogpu_raster_unit_tile1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                              // avalon_st_adapter_005:out_0_data -> ogpu_raster_unit_tile1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                             // ogpu_raster_unit_tile1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                             // avalon_st_adapter_005:out_0_error -> ogpu_raster_unit_tile1_s1_agent:rdata_fifo_sink_error
	wire          ogpu_raster_unit_tile0_s1_agent_rdata_fifo_out_valid;                          // ogpu_raster_unit_tile0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] ogpu_raster_unit_tile0_s1_agent_rdata_fifo_out_data;                           // ogpu_raster_unit_tile0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          ogpu_raster_unit_tile0_s1_agent_rdata_fifo_out_ready;                          // avalon_st_adapter_006:in_0_ready -> ogpu_raster_unit_tile0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                             // avalon_st_adapter_006:out_0_valid -> ogpu_raster_unit_tile0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                              // avalon_st_adapter_006:out_0_data -> ogpu_raster_unit_tile0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                             // ogpu_raster_unit_tile0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                             // avalon_st_adapter_006:out_0_error -> ogpu_raster_unit_tile0_s1_agent:rdata_fifo_sink_error
	wire          ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo_out_valid;                     // ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo_out_data;                      // ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo_out_ready;                     // avalon_st_adapter_007:in_0_ready -> ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                             // avalon_st_adapter_007:out_0_valid -> ogpu_raster_unit_clip_rect1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                              // avalon_st_adapter_007:out_0_data -> ogpu_raster_unit_clip_rect1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                             // ogpu_raster_unit_clip_rect1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                             // avalon_st_adapter_007:out_0_error -> ogpu_raster_unit_clip_rect1_s1_agent:rdata_fifo_sink_error
	wire          ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo_out_valid;                     // ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo_out_data;                      // ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo_out_ready;                     // avalon_st_adapter_008:in_0_ready -> ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                             // avalon_st_adapter_008:out_0_valid -> ogpu_raster_unit_clip_rect0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                              // avalon_st_adapter_008:out_0_data -> ogpu_raster_unit_clip_rect0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                             // ogpu_raster_unit_clip_rect0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                             // avalon_st_adapter_008:out_0_error -> ogpu_raster_unit_clip_rect0_s1_agent:rdata_fifo_sink_error
	wire          ogpu_raster_unit_command_s1_agent_rdata_fifo_out_valid;                        // ogpu_raster_unit_command_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] ogpu_raster_unit_command_s1_agent_rdata_fifo_out_data;                         // ogpu_raster_unit_command_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          ogpu_raster_unit_command_s1_agent_rdata_fifo_out_ready;                        // avalon_st_adapter_009:in_0_ready -> ogpu_raster_unit_command_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                             // avalon_st_adapter_009:out_0_valid -> ogpu_raster_unit_command_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                              // avalon_st_adapter_009:out_0_data -> ogpu_raster_unit_command_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                             // ogpu_raster_unit_command_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                             // avalon_st_adapter_009:out_0_error -> ogpu_raster_unit_command_s1_agent:rdata_fifo_sink_error
	wire          ogpu_raster_unit_status_s1_agent_rdata_fifo_out_valid;                         // ogpu_raster_unit_status_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] ogpu_raster_unit_status_s1_agent_rdata_fifo_out_data;                          // ogpu_raster_unit_status_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          ogpu_raster_unit_status_s1_agent_rdata_fifo_out_ready;                         // avalon_st_adapter_010:in_0_ready -> ogpu_raster_unit_status_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                             // avalon_st_adapter_010:out_0_valid -> ogpu_raster_unit_status_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                              // avalon_st_adapter_010:out_0_data -> ogpu_raster_unit_status_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                             // ogpu_raster_unit_status_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                             // avalon_st_adapter_010:out_0_error -> ogpu_raster_unit_status_s1_agent:rdata_fifo_sink_error
	wire          ogpu_raster_unit_v2z_s1_agent_rdata_fifo_out_valid;                            // ogpu_raster_unit_v2z_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] ogpu_raster_unit_v2z_s1_agent_rdata_fifo_out_data;                             // ogpu_raster_unit_v2z_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          ogpu_raster_unit_v2z_s1_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_011:in_0_ready -> ogpu_raster_unit_v2z_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                             // avalon_st_adapter_011:out_0_valid -> ogpu_raster_unit_v2z_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                              // avalon_st_adapter_011:out_0_data -> ogpu_raster_unit_v2z_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                             // ogpu_raster_unit_v2z_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                             // avalon_st_adapter_011:out_0_error -> ogpu_raster_unit_v2z_s1_agent:rdata_fifo_sink_error
	wire          ogpu_raster_unit_v2y_s1_agent_rdata_fifo_out_valid;                            // ogpu_raster_unit_v2y_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] ogpu_raster_unit_v2y_s1_agent_rdata_fifo_out_data;                             // ogpu_raster_unit_v2y_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          ogpu_raster_unit_v2y_s1_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_012:in_0_ready -> ogpu_raster_unit_v2y_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                                             // avalon_st_adapter_012:out_0_valid -> ogpu_raster_unit_v2y_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                              // avalon_st_adapter_012:out_0_data -> ogpu_raster_unit_v2y_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                             // ogpu_raster_unit_v2y_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                             // avalon_st_adapter_012:out_0_error -> ogpu_raster_unit_v2y_s1_agent:rdata_fifo_sink_error
	wire          ogpu_raster_unit_v2x_s1_agent_rdata_fifo_out_valid;                            // ogpu_raster_unit_v2x_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] ogpu_raster_unit_v2x_s1_agent_rdata_fifo_out_data;                             // ogpu_raster_unit_v2x_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_013:in_0_data
	wire          ogpu_raster_unit_v2x_s1_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_013:in_0_ready -> ogpu_raster_unit_v2x_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_013_out_0_valid;                                             // avalon_st_adapter_013:out_0_valid -> ogpu_raster_unit_v2x_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                              // avalon_st_adapter_013:out_0_data -> ogpu_raster_unit_v2x_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                             // ogpu_raster_unit_v2x_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                             // avalon_st_adapter_013:out_0_error -> ogpu_raster_unit_v2x_s1_agent:rdata_fifo_sink_error
	wire          ogpu_raster_unit_v1z_s1_agent_rdata_fifo_out_valid;                            // ogpu_raster_unit_v1z_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] ogpu_raster_unit_v1z_s1_agent_rdata_fifo_out_data;                             // ogpu_raster_unit_v1z_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_014:in_0_data
	wire          ogpu_raster_unit_v1z_s1_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_014:in_0_ready -> ogpu_raster_unit_v1z_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_014_out_0_valid;                                             // avalon_st_adapter_014:out_0_valid -> ogpu_raster_unit_v1z_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                              // avalon_st_adapter_014:out_0_data -> ogpu_raster_unit_v1z_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                             // ogpu_raster_unit_v1z_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                             // avalon_st_adapter_014:out_0_error -> ogpu_raster_unit_v1z_s1_agent:rdata_fifo_sink_error
	wire          ogpu_raster_unit_v1y_s1_agent_rdata_fifo_out_valid;                            // ogpu_raster_unit_v1y_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] ogpu_raster_unit_v1y_s1_agent_rdata_fifo_out_data;                             // ogpu_raster_unit_v1y_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_015:in_0_data
	wire          ogpu_raster_unit_v1y_s1_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_015:in_0_ready -> ogpu_raster_unit_v1y_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_015_out_0_valid;                                             // avalon_st_adapter_015:out_0_valid -> ogpu_raster_unit_v1y_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                              // avalon_st_adapter_015:out_0_data -> ogpu_raster_unit_v1y_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                             // ogpu_raster_unit_v1y_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                             // avalon_st_adapter_015:out_0_error -> ogpu_raster_unit_v1y_s1_agent:rdata_fifo_sink_error
	wire          ogpu_raster_unit_v1x_s1_agent_rdata_fifo_out_valid;                            // ogpu_raster_unit_v1x_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] ogpu_raster_unit_v1x_s1_agent_rdata_fifo_out_data;                             // ogpu_raster_unit_v1x_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_016:in_0_data
	wire          ogpu_raster_unit_v1x_s1_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_016:in_0_ready -> ogpu_raster_unit_v1x_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_016_out_0_valid;                                             // avalon_st_adapter_016:out_0_valid -> ogpu_raster_unit_v1x_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                              // avalon_st_adapter_016:out_0_data -> ogpu_raster_unit_v1x_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                             // ogpu_raster_unit_v1x_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                             // avalon_st_adapter_016:out_0_error -> ogpu_raster_unit_v1x_s1_agent:rdata_fifo_sink_error
	wire          ogpu_raster_unit_v0z_s1_agent_rdata_fifo_out_valid;                            // ogpu_raster_unit_v0z_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] ogpu_raster_unit_v0z_s1_agent_rdata_fifo_out_data;                             // ogpu_raster_unit_v0z_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_017:in_0_data
	wire          ogpu_raster_unit_v0z_s1_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_017:in_0_ready -> ogpu_raster_unit_v0z_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_017_out_0_valid;                                             // avalon_st_adapter_017:out_0_valid -> ogpu_raster_unit_v0z_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                              // avalon_st_adapter_017:out_0_data -> ogpu_raster_unit_v0z_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                             // ogpu_raster_unit_v0z_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                             // avalon_st_adapter_017:out_0_error -> ogpu_raster_unit_v0z_s1_agent:rdata_fifo_sink_error
	wire          ogpu_raster_unit_v0y_s1_agent_rdata_fifo_out_valid;                            // ogpu_raster_unit_v0y_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] ogpu_raster_unit_v0y_s1_agent_rdata_fifo_out_data;                             // ogpu_raster_unit_v0y_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_018:in_0_data
	wire          ogpu_raster_unit_v0y_s1_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_018:in_0_ready -> ogpu_raster_unit_v0y_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_018_out_0_valid;                                             // avalon_st_adapter_018:out_0_valid -> ogpu_raster_unit_v0y_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                              // avalon_st_adapter_018:out_0_data -> ogpu_raster_unit_v0y_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                             // ogpu_raster_unit_v0y_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                             // avalon_st_adapter_018:out_0_error -> ogpu_raster_unit_v0y_s1_agent:rdata_fifo_sink_error
	wire          ogpu_raster_unit_v0x_s1_agent_rdata_fifo_out_valid;                            // ogpu_raster_unit_v0x_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] ogpu_raster_unit_v0x_s1_agent_rdata_fifo_out_data;                             // ogpu_raster_unit_v0x_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_019:in_0_data
	wire          ogpu_raster_unit_v0x_s1_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_019:in_0_ready -> ogpu_raster_unit_v0x_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_019_out_0_valid;                                             // avalon_st_adapter_019:out_0_valid -> ogpu_raster_unit_v0x_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                              // avalon_st_adapter_019:out_0_data -> ogpu_raster_unit_v0x_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                             // ogpu_raster_unit_v0x_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                             // avalon_st_adapter_019:out_0_error -> ogpu_raster_unit_v0x_s1_agent:rdata_fifo_sink_error
	wire          ogpu_quad_store_req_s1_agent_rdata_fifo_out_valid;                             // ogpu_quad_store_req_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] ogpu_quad_store_req_s1_agent_rdata_fifo_out_data;                              // ogpu_quad_store_req_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_020:in_0_data
	wire          ogpu_quad_store_req_s1_agent_rdata_fifo_out_ready;                             // avalon_st_adapter_020:in_0_ready -> ogpu_quad_store_req_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_020_out_0_valid;                                             // avalon_st_adapter_020:out_0_valid -> ogpu_quad_store_req_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                                              // avalon_st_adapter_020:out_0_data -> ogpu_quad_store_req_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                             // ogpu_quad_store_req_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                             // avalon_st_adapter_020:out_0_error -> ogpu_quad_store_req_s1_agent:rdata_fifo_sink_error
	wire          ogpu_quad_store_data_high_s1_agent_rdata_fifo_out_valid;                       // ogpu_quad_store_data_high_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_021:in_0_valid
	wire   [33:0] ogpu_quad_store_data_high_s1_agent_rdata_fifo_out_data;                        // ogpu_quad_store_data_high_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_021:in_0_data
	wire          ogpu_quad_store_data_high_s1_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_021:in_0_ready -> ogpu_quad_store_data_high_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_021_out_0_valid;                                             // avalon_st_adapter_021:out_0_valid -> ogpu_quad_store_data_high_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_021_out_0_data;                                              // avalon_st_adapter_021:out_0_data -> ogpu_quad_store_data_high_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_021_out_0_ready;                                             // ogpu_quad_store_data_high_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_021:out_0_ready
	wire    [0:0] avalon_st_adapter_021_out_0_error;                                             // avalon_st_adapter_021:out_0_error -> ogpu_quad_store_data_high_s1_agent:rdata_fifo_sink_error
	wire          ogpu_quad_store_data_low_s1_agent_rdata_fifo_out_valid;                        // ogpu_quad_store_data_low_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_022:in_0_valid
	wire   [33:0] ogpu_quad_store_data_low_s1_agent_rdata_fifo_out_data;                         // ogpu_quad_store_data_low_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_022:in_0_data
	wire          ogpu_quad_store_data_low_s1_agent_rdata_fifo_out_ready;                        // avalon_st_adapter_022:in_0_ready -> ogpu_quad_store_data_low_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_022_out_0_valid;                                             // avalon_st_adapter_022:out_0_valid -> ogpu_quad_store_data_low_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_022_out_0_data;                                              // avalon_st_adapter_022:out_0_data -> ogpu_quad_store_data_low_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_022_out_0_ready;                                             // ogpu_quad_store_data_low_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_022:out_0_ready
	wire    [0:0] avalon_st_adapter_022_out_0_error;                                             // avalon_st_adapter_022:out_0_error -> ogpu_quad_store_data_low_s1_agent:rdata_fifo_sink_error
	wire          ogpu_quad_store_ack_s1_agent_rdata_fifo_out_valid;                             // ogpu_quad_store_ack_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_023:in_0_valid
	wire   [33:0] ogpu_quad_store_ack_s1_agent_rdata_fifo_out_data;                              // ogpu_quad_store_ack_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_023:in_0_data
	wire          ogpu_quad_store_ack_s1_agent_rdata_fifo_out_ready;                             // avalon_st_adapter_023:in_0_ready -> ogpu_quad_store_ack_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_023_out_0_valid;                                             // avalon_st_adapter_023:out_0_valid -> ogpu_quad_store_ack_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_023_out_0_data;                                              // avalon_st_adapter_023:out_0_data -> ogpu_quad_store_ack_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_023_out_0_ready;                                             // ogpu_quad_store_ack_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_023:out_0_ready
	wire    [0:0] avalon_st_adapter_023_out_0_error;                                             // avalon_st_adapter_023:out_0_error -> ogpu_quad_store_ack_s1_agent:rdata_fifo_sink_error
	wire          ogpu_reset_s1_agent_rdata_fifo_out_valid;                                      // ogpu_reset_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_024:in_0_valid
	wire   [33:0] ogpu_reset_s1_agent_rdata_fifo_out_data;                                       // ogpu_reset_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_024:in_0_data
	wire          ogpu_reset_s1_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_024:in_0_ready -> ogpu_reset_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_024_out_0_valid;                                             // avalon_st_adapter_024:out_0_valid -> ogpu_reset_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_024_out_0_data;                                              // avalon_st_adapter_024:out_0_data -> ogpu_reset_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_024_out_0_ready;                                             // ogpu_reset_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_024:out_0_ready
	wire    [0:0] avalon_st_adapter_024_out_0_error;                                             // avalon_st_adapter_024:out_0_error -> ogpu_reset_s1_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_raster_unit_quad_buffer_addr_high_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_read),                  //                         .read
		.uav_write              (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (ogpu_raster_unit_quad_buffer_addr_high_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (ogpu_raster_unit_quad_buffer_addr_high_s1_write),                          //                         .write
		.av_readdata            (ogpu_raster_unit_quad_buffer_addr_high_s1_readdata),                       //                         .readdata
		.av_writedata           (ogpu_raster_unit_quad_buffer_addr_high_s1_writedata),                      //                         .writedata
		.av_chipselect          (ogpu_raster_unit_quad_buffer_addr_high_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_raster_unit_quad_buffer_addr_low_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_read),                   //                         .read
		.uav_write              (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (ogpu_raster_unit_quad_buffer_addr_low_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (ogpu_raster_unit_quad_buffer_addr_low_s1_write),                           //                         .write
		.av_readdata            (ogpu_raster_unit_quad_buffer_addr_low_s1_readdata),                        //                         .readdata
		.av_writedata           (ogpu_raster_unit_quad_buffer_addr_low_s1_writedata),                       //                         .writedata
		.av_chipselect          (ogpu_raster_unit_quad_buffer_addr_low_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_raster_unit_depth_coef_c_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_raster_unit_depth_coef_c_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_raster_unit_depth_coef_c_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (ogpu_raster_unit_depth_coef_c_s1_agent_m0_read),                           //                         .read
		.uav_write              (ogpu_raster_unit_depth_coef_c_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (ogpu_raster_unit_depth_coef_c_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (ogpu_raster_unit_depth_coef_c_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (ogpu_raster_unit_depth_coef_c_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (ogpu_raster_unit_depth_coef_c_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (ogpu_raster_unit_depth_coef_c_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (ogpu_raster_unit_depth_coef_c_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (ogpu_raster_unit_depth_coef_c_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (ogpu_raster_unit_depth_coef_c_s1_address),                                 //      avalon_anti_slave_0.address
		.av_write               (ogpu_raster_unit_depth_coef_c_s1_write),                                   //                         .write
		.av_readdata            (ogpu_raster_unit_depth_coef_c_s1_readdata),                                //                         .readdata
		.av_writedata           (ogpu_raster_unit_depth_coef_c_s1_writedata),                               //                         .writedata
		.av_chipselect          (ogpu_raster_unit_depth_coef_c_s1_chipselect),                              //                         .chipselect
		.av_read                (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_raster_unit_depth_coef_b_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_raster_unit_depth_coef_b_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_raster_unit_depth_coef_b_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (ogpu_raster_unit_depth_coef_b_s1_agent_m0_read),                           //                         .read
		.uav_write              (ogpu_raster_unit_depth_coef_b_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (ogpu_raster_unit_depth_coef_b_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (ogpu_raster_unit_depth_coef_b_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (ogpu_raster_unit_depth_coef_b_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (ogpu_raster_unit_depth_coef_b_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (ogpu_raster_unit_depth_coef_b_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (ogpu_raster_unit_depth_coef_b_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (ogpu_raster_unit_depth_coef_b_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (ogpu_raster_unit_depth_coef_b_s1_address),                                 //      avalon_anti_slave_0.address
		.av_write               (ogpu_raster_unit_depth_coef_b_s1_write),                                   //                         .write
		.av_readdata            (ogpu_raster_unit_depth_coef_b_s1_readdata),                                //                         .readdata
		.av_writedata           (ogpu_raster_unit_depth_coef_b_s1_writedata),                               //                         .writedata
		.av_chipselect          (ogpu_raster_unit_depth_coef_b_s1_chipselect),                              //                         .chipselect
		.av_read                (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_raster_unit_depth_coef_a_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_raster_unit_depth_coef_a_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_raster_unit_depth_coef_a_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (ogpu_raster_unit_depth_coef_a_s1_agent_m0_read),                           //                         .read
		.uav_write              (ogpu_raster_unit_depth_coef_a_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (ogpu_raster_unit_depth_coef_a_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (ogpu_raster_unit_depth_coef_a_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (ogpu_raster_unit_depth_coef_a_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (ogpu_raster_unit_depth_coef_a_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (ogpu_raster_unit_depth_coef_a_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (ogpu_raster_unit_depth_coef_a_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (ogpu_raster_unit_depth_coef_a_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (ogpu_raster_unit_depth_coef_a_s1_address),                                 //      avalon_anti_slave_0.address
		.av_write               (ogpu_raster_unit_depth_coef_a_s1_write),                                   //                         .write
		.av_readdata            (ogpu_raster_unit_depth_coef_a_s1_readdata),                                //                         .readdata
		.av_writedata           (ogpu_raster_unit_depth_coef_a_s1_writedata),                               //                         .writedata
		.av_chipselect          (ogpu_raster_unit_depth_coef_a_s1_chipselect),                              //                         .chipselect
		.av_read                (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_raster_unit_tile1_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_raster_unit_tile1_s1_agent_m0_address),                               // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_raster_unit_tile1_s1_agent_m0_burstcount),                            //                         .burstcount
		.uav_read               (ogpu_raster_unit_tile1_s1_agent_m0_read),                                  //                         .read
		.uav_write              (ogpu_raster_unit_tile1_s1_agent_m0_write),                                 //                         .write
		.uav_waitrequest        (ogpu_raster_unit_tile1_s1_agent_m0_waitrequest),                           //                         .waitrequest
		.uav_readdatavalid      (ogpu_raster_unit_tile1_s1_agent_m0_readdatavalid),                         //                         .readdatavalid
		.uav_byteenable         (ogpu_raster_unit_tile1_s1_agent_m0_byteenable),                            //                         .byteenable
		.uav_readdata           (ogpu_raster_unit_tile1_s1_agent_m0_readdata),                              //                         .readdata
		.uav_writedata          (ogpu_raster_unit_tile1_s1_agent_m0_writedata),                             //                         .writedata
		.uav_lock               (ogpu_raster_unit_tile1_s1_agent_m0_lock),                                  //                         .lock
		.uav_debugaccess        (ogpu_raster_unit_tile1_s1_agent_m0_debugaccess),                           //                         .debugaccess
		.av_address             (ogpu_raster_unit_tile1_s1_address),                                        //      avalon_anti_slave_0.address
		.av_write               (ogpu_raster_unit_tile1_s1_write),                                          //                         .write
		.av_readdata            (ogpu_raster_unit_tile1_s1_readdata),                                       //                         .readdata
		.av_writedata           (ogpu_raster_unit_tile1_s1_writedata),                                      //                         .writedata
		.av_chipselect          (ogpu_raster_unit_tile1_s1_chipselect),                                     //                         .chipselect
		.av_read                (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_raster_unit_tile0_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_raster_unit_tile0_s1_agent_m0_address),                               // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_raster_unit_tile0_s1_agent_m0_burstcount),                            //                         .burstcount
		.uav_read               (ogpu_raster_unit_tile0_s1_agent_m0_read),                                  //                         .read
		.uav_write              (ogpu_raster_unit_tile0_s1_agent_m0_write),                                 //                         .write
		.uav_waitrequest        (ogpu_raster_unit_tile0_s1_agent_m0_waitrequest),                           //                         .waitrequest
		.uav_readdatavalid      (ogpu_raster_unit_tile0_s1_agent_m0_readdatavalid),                         //                         .readdatavalid
		.uav_byteenable         (ogpu_raster_unit_tile0_s1_agent_m0_byteenable),                            //                         .byteenable
		.uav_readdata           (ogpu_raster_unit_tile0_s1_agent_m0_readdata),                              //                         .readdata
		.uav_writedata          (ogpu_raster_unit_tile0_s1_agent_m0_writedata),                             //                         .writedata
		.uav_lock               (ogpu_raster_unit_tile0_s1_agent_m0_lock),                                  //                         .lock
		.uav_debugaccess        (ogpu_raster_unit_tile0_s1_agent_m0_debugaccess),                           //                         .debugaccess
		.av_address             (ogpu_raster_unit_tile0_s1_address),                                        //      avalon_anti_slave_0.address
		.av_write               (ogpu_raster_unit_tile0_s1_write),                                          //                         .write
		.av_readdata            (ogpu_raster_unit_tile0_s1_readdata),                                       //                         .readdata
		.av_writedata           (ogpu_raster_unit_tile0_s1_writedata),                                      //                         .writedata
		.av_chipselect          (ogpu_raster_unit_tile0_s1_chipselect),                                     //                         .chipselect
		.av_read                (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_raster_unit_clip_rect1_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_raster_unit_clip_rect1_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_raster_unit_clip_rect1_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (ogpu_raster_unit_clip_rect1_s1_agent_m0_read),                             //                         .read
		.uav_write              (ogpu_raster_unit_clip_rect1_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest        (ogpu_raster_unit_clip_rect1_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (ogpu_raster_unit_clip_rect1_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (ogpu_raster_unit_clip_rect1_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (ogpu_raster_unit_clip_rect1_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (ogpu_raster_unit_clip_rect1_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (ogpu_raster_unit_clip_rect1_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (ogpu_raster_unit_clip_rect1_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (ogpu_raster_unit_clip_rect1_s1_address),                                   //      avalon_anti_slave_0.address
		.av_write               (ogpu_raster_unit_clip_rect1_s1_write),                                     //                         .write
		.av_readdata            (ogpu_raster_unit_clip_rect1_s1_readdata),                                  //                         .readdata
		.av_writedata           (ogpu_raster_unit_clip_rect1_s1_writedata),                                 //                         .writedata
		.av_chipselect          (ogpu_raster_unit_clip_rect1_s1_chipselect),                                //                         .chipselect
		.av_read                (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_raster_unit_clip_rect0_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_raster_unit_clip_rect0_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_raster_unit_clip_rect0_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (ogpu_raster_unit_clip_rect0_s1_agent_m0_read),                             //                         .read
		.uav_write              (ogpu_raster_unit_clip_rect0_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest        (ogpu_raster_unit_clip_rect0_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (ogpu_raster_unit_clip_rect0_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (ogpu_raster_unit_clip_rect0_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (ogpu_raster_unit_clip_rect0_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (ogpu_raster_unit_clip_rect0_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (ogpu_raster_unit_clip_rect0_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (ogpu_raster_unit_clip_rect0_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (ogpu_raster_unit_clip_rect0_s1_address),                                   //      avalon_anti_slave_0.address
		.av_write               (ogpu_raster_unit_clip_rect0_s1_write),                                     //                         .write
		.av_readdata            (ogpu_raster_unit_clip_rect0_s1_readdata),                                  //                         .readdata
		.av_writedata           (ogpu_raster_unit_clip_rect0_s1_writedata),                                 //                         .writedata
		.av_chipselect          (ogpu_raster_unit_clip_rect0_s1_chipselect),                                //                         .chipselect
		.av_read                (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_raster_unit_command_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_raster_unit_command_s1_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_raster_unit_command_s1_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (ogpu_raster_unit_command_s1_agent_m0_read),                                //                         .read
		.uav_write              (ogpu_raster_unit_command_s1_agent_m0_write),                               //                         .write
		.uav_waitrequest        (ogpu_raster_unit_command_s1_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (ogpu_raster_unit_command_s1_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (ogpu_raster_unit_command_s1_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (ogpu_raster_unit_command_s1_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (ogpu_raster_unit_command_s1_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (ogpu_raster_unit_command_s1_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (ogpu_raster_unit_command_s1_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (ogpu_raster_unit_command_s1_address),                                      //      avalon_anti_slave_0.address
		.av_write               (ogpu_raster_unit_command_s1_write),                                        //                         .write
		.av_readdata            (ogpu_raster_unit_command_s1_readdata),                                     //                         .readdata
		.av_writedata           (ogpu_raster_unit_command_s1_writedata),                                    //                         .writedata
		.av_chipselect          (ogpu_raster_unit_command_s1_chipselect),                                   //                         .chipselect
		.av_read                (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_raster_unit_status_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_raster_unit_status_s1_agent_m0_address),                              // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_raster_unit_status_s1_agent_m0_burstcount),                           //                         .burstcount
		.uav_read               (ogpu_raster_unit_status_s1_agent_m0_read),                                 //                         .read
		.uav_write              (ogpu_raster_unit_status_s1_agent_m0_write),                                //                         .write
		.uav_waitrequest        (ogpu_raster_unit_status_s1_agent_m0_waitrequest),                          //                         .waitrequest
		.uav_readdatavalid      (ogpu_raster_unit_status_s1_agent_m0_readdatavalid),                        //                         .readdatavalid
		.uav_byteenable         (ogpu_raster_unit_status_s1_agent_m0_byteenable),                           //                         .byteenable
		.uav_readdata           (ogpu_raster_unit_status_s1_agent_m0_readdata),                             //                         .readdata
		.uav_writedata          (ogpu_raster_unit_status_s1_agent_m0_writedata),                            //                         .writedata
		.uav_lock               (ogpu_raster_unit_status_s1_agent_m0_lock),                                 //                         .lock
		.uav_debugaccess        (ogpu_raster_unit_status_s1_agent_m0_debugaccess),                          //                         .debugaccess
		.av_address             (ogpu_raster_unit_status_s1_address),                                       //      avalon_anti_slave_0.address
		.av_readdata            (ogpu_raster_unit_status_s1_readdata),                                      //                         .readdata
		.av_write               (),                                                                         //              (terminated)
		.av_read                (),                                                                         //              (terminated)
		.av_writedata           (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_chipselect          (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_raster_unit_v2z_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_raster_unit_v2z_s1_agent_m0_address),                                 // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_raster_unit_v2z_s1_agent_m0_burstcount),                              //                         .burstcount
		.uav_read               (ogpu_raster_unit_v2z_s1_agent_m0_read),                                    //                         .read
		.uav_write              (ogpu_raster_unit_v2z_s1_agent_m0_write),                                   //                         .write
		.uav_waitrequest        (ogpu_raster_unit_v2z_s1_agent_m0_waitrequest),                             //                         .waitrequest
		.uav_readdatavalid      (ogpu_raster_unit_v2z_s1_agent_m0_readdatavalid),                           //                         .readdatavalid
		.uav_byteenable         (ogpu_raster_unit_v2z_s1_agent_m0_byteenable),                              //                         .byteenable
		.uav_readdata           (ogpu_raster_unit_v2z_s1_agent_m0_readdata),                                //                         .readdata
		.uav_writedata          (ogpu_raster_unit_v2z_s1_agent_m0_writedata),                               //                         .writedata
		.uav_lock               (ogpu_raster_unit_v2z_s1_agent_m0_lock),                                    //                         .lock
		.uav_debugaccess        (ogpu_raster_unit_v2z_s1_agent_m0_debugaccess),                             //                         .debugaccess
		.av_address             (ogpu_raster_unit_v2z_s1_address),                                          //      avalon_anti_slave_0.address
		.av_write               (ogpu_raster_unit_v2z_s1_write),                                            //                         .write
		.av_readdata            (ogpu_raster_unit_v2z_s1_readdata),                                         //                         .readdata
		.av_writedata           (ogpu_raster_unit_v2z_s1_writedata),                                        //                         .writedata
		.av_chipselect          (ogpu_raster_unit_v2z_s1_chipselect),                                       //                         .chipselect
		.av_read                (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_raster_unit_v2y_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_raster_unit_v2y_s1_agent_m0_address),                                 // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_raster_unit_v2y_s1_agent_m0_burstcount),                              //                         .burstcount
		.uav_read               (ogpu_raster_unit_v2y_s1_agent_m0_read),                                    //                         .read
		.uav_write              (ogpu_raster_unit_v2y_s1_agent_m0_write),                                   //                         .write
		.uav_waitrequest        (ogpu_raster_unit_v2y_s1_agent_m0_waitrequest),                             //                         .waitrequest
		.uav_readdatavalid      (ogpu_raster_unit_v2y_s1_agent_m0_readdatavalid),                           //                         .readdatavalid
		.uav_byteenable         (ogpu_raster_unit_v2y_s1_agent_m0_byteenable),                              //                         .byteenable
		.uav_readdata           (ogpu_raster_unit_v2y_s1_agent_m0_readdata),                                //                         .readdata
		.uav_writedata          (ogpu_raster_unit_v2y_s1_agent_m0_writedata),                               //                         .writedata
		.uav_lock               (ogpu_raster_unit_v2y_s1_agent_m0_lock),                                    //                         .lock
		.uav_debugaccess        (ogpu_raster_unit_v2y_s1_agent_m0_debugaccess),                             //                         .debugaccess
		.av_address             (ogpu_raster_unit_v2y_s1_address),                                          //      avalon_anti_slave_0.address
		.av_write               (ogpu_raster_unit_v2y_s1_write),                                            //                         .write
		.av_readdata            (ogpu_raster_unit_v2y_s1_readdata),                                         //                         .readdata
		.av_writedata           (ogpu_raster_unit_v2y_s1_writedata),                                        //                         .writedata
		.av_chipselect          (ogpu_raster_unit_v2y_s1_chipselect),                                       //                         .chipselect
		.av_read                (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_raster_unit_v2x_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_raster_unit_v2x_s1_agent_m0_address),                                 // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_raster_unit_v2x_s1_agent_m0_burstcount),                              //                         .burstcount
		.uav_read               (ogpu_raster_unit_v2x_s1_agent_m0_read),                                    //                         .read
		.uav_write              (ogpu_raster_unit_v2x_s1_agent_m0_write),                                   //                         .write
		.uav_waitrequest        (ogpu_raster_unit_v2x_s1_agent_m0_waitrequest),                             //                         .waitrequest
		.uav_readdatavalid      (ogpu_raster_unit_v2x_s1_agent_m0_readdatavalid),                           //                         .readdatavalid
		.uav_byteenable         (ogpu_raster_unit_v2x_s1_agent_m0_byteenable),                              //                         .byteenable
		.uav_readdata           (ogpu_raster_unit_v2x_s1_agent_m0_readdata),                                //                         .readdata
		.uav_writedata          (ogpu_raster_unit_v2x_s1_agent_m0_writedata),                               //                         .writedata
		.uav_lock               (ogpu_raster_unit_v2x_s1_agent_m0_lock),                                    //                         .lock
		.uav_debugaccess        (ogpu_raster_unit_v2x_s1_agent_m0_debugaccess),                             //                         .debugaccess
		.av_address             (ogpu_raster_unit_v2x_s1_address),                                          //      avalon_anti_slave_0.address
		.av_write               (ogpu_raster_unit_v2x_s1_write),                                            //                         .write
		.av_readdata            (ogpu_raster_unit_v2x_s1_readdata),                                         //                         .readdata
		.av_writedata           (ogpu_raster_unit_v2x_s1_writedata),                                        //                         .writedata
		.av_chipselect          (ogpu_raster_unit_v2x_s1_chipselect),                                       //                         .chipselect
		.av_read                (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_raster_unit_v1z_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_raster_unit_v1z_s1_agent_m0_address),                                 // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_raster_unit_v1z_s1_agent_m0_burstcount),                              //                         .burstcount
		.uav_read               (ogpu_raster_unit_v1z_s1_agent_m0_read),                                    //                         .read
		.uav_write              (ogpu_raster_unit_v1z_s1_agent_m0_write),                                   //                         .write
		.uav_waitrequest        (ogpu_raster_unit_v1z_s1_agent_m0_waitrequest),                             //                         .waitrequest
		.uav_readdatavalid      (ogpu_raster_unit_v1z_s1_agent_m0_readdatavalid),                           //                         .readdatavalid
		.uav_byteenable         (ogpu_raster_unit_v1z_s1_agent_m0_byteenable),                              //                         .byteenable
		.uav_readdata           (ogpu_raster_unit_v1z_s1_agent_m0_readdata),                                //                         .readdata
		.uav_writedata          (ogpu_raster_unit_v1z_s1_agent_m0_writedata),                               //                         .writedata
		.uav_lock               (ogpu_raster_unit_v1z_s1_agent_m0_lock),                                    //                         .lock
		.uav_debugaccess        (ogpu_raster_unit_v1z_s1_agent_m0_debugaccess),                             //                         .debugaccess
		.av_address             (ogpu_raster_unit_v1z_s1_address),                                          //      avalon_anti_slave_0.address
		.av_write               (ogpu_raster_unit_v1z_s1_write),                                            //                         .write
		.av_readdata            (ogpu_raster_unit_v1z_s1_readdata),                                         //                         .readdata
		.av_writedata           (ogpu_raster_unit_v1z_s1_writedata),                                        //                         .writedata
		.av_chipselect          (ogpu_raster_unit_v1z_s1_chipselect),                                       //                         .chipselect
		.av_read                (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_raster_unit_v1y_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_raster_unit_v1y_s1_agent_m0_address),                                 // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_raster_unit_v1y_s1_agent_m0_burstcount),                              //                         .burstcount
		.uav_read               (ogpu_raster_unit_v1y_s1_agent_m0_read),                                    //                         .read
		.uav_write              (ogpu_raster_unit_v1y_s1_agent_m0_write),                                   //                         .write
		.uav_waitrequest        (ogpu_raster_unit_v1y_s1_agent_m0_waitrequest),                             //                         .waitrequest
		.uav_readdatavalid      (ogpu_raster_unit_v1y_s1_agent_m0_readdatavalid),                           //                         .readdatavalid
		.uav_byteenable         (ogpu_raster_unit_v1y_s1_agent_m0_byteenable),                              //                         .byteenable
		.uav_readdata           (ogpu_raster_unit_v1y_s1_agent_m0_readdata),                                //                         .readdata
		.uav_writedata          (ogpu_raster_unit_v1y_s1_agent_m0_writedata),                               //                         .writedata
		.uav_lock               (ogpu_raster_unit_v1y_s1_agent_m0_lock),                                    //                         .lock
		.uav_debugaccess        (ogpu_raster_unit_v1y_s1_agent_m0_debugaccess),                             //                         .debugaccess
		.av_address             (ogpu_raster_unit_v1y_s1_address),                                          //      avalon_anti_slave_0.address
		.av_write               (ogpu_raster_unit_v1y_s1_write),                                            //                         .write
		.av_readdata            (ogpu_raster_unit_v1y_s1_readdata),                                         //                         .readdata
		.av_writedata           (ogpu_raster_unit_v1y_s1_writedata),                                        //                         .writedata
		.av_chipselect          (ogpu_raster_unit_v1y_s1_chipselect),                                       //                         .chipselect
		.av_read                (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_raster_unit_v1x_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_raster_unit_v1x_s1_agent_m0_address),                                 // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_raster_unit_v1x_s1_agent_m0_burstcount),                              //                         .burstcount
		.uav_read               (ogpu_raster_unit_v1x_s1_agent_m0_read),                                    //                         .read
		.uav_write              (ogpu_raster_unit_v1x_s1_agent_m0_write),                                   //                         .write
		.uav_waitrequest        (ogpu_raster_unit_v1x_s1_agent_m0_waitrequest),                             //                         .waitrequest
		.uav_readdatavalid      (ogpu_raster_unit_v1x_s1_agent_m0_readdatavalid),                           //                         .readdatavalid
		.uav_byteenable         (ogpu_raster_unit_v1x_s1_agent_m0_byteenable),                              //                         .byteenable
		.uav_readdata           (ogpu_raster_unit_v1x_s1_agent_m0_readdata),                                //                         .readdata
		.uav_writedata          (ogpu_raster_unit_v1x_s1_agent_m0_writedata),                               //                         .writedata
		.uav_lock               (ogpu_raster_unit_v1x_s1_agent_m0_lock),                                    //                         .lock
		.uav_debugaccess        (ogpu_raster_unit_v1x_s1_agent_m0_debugaccess),                             //                         .debugaccess
		.av_address             (ogpu_raster_unit_v1x_s1_address),                                          //      avalon_anti_slave_0.address
		.av_write               (ogpu_raster_unit_v1x_s1_write),                                            //                         .write
		.av_readdata            (ogpu_raster_unit_v1x_s1_readdata),                                         //                         .readdata
		.av_writedata           (ogpu_raster_unit_v1x_s1_writedata),                                        //                         .writedata
		.av_chipselect          (ogpu_raster_unit_v1x_s1_chipselect),                                       //                         .chipselect
		.av_read                (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_raster_unit_v0z_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_raster_unit_v0z_s1_agent_m0_address),                                 // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_raster_unit_v0z_s1_agent_m0_burstcount),                              //                         .burstcount
		.uav_read               (ogpu_raster_unit_v0z_s1_agent_m0_read),                                    //                         .read
		.uav_write              (ogpu_raster_unit_v0z_s1_agent_m0_write),                                   //                         .write
		.uav_waitrequest        (ogpu_raster_unit_v0z_s1_agent_m0_waitrequest),                             //                         .waitrequest
		.uav_readdatavalid      (ogpu_raster_unit_v0z_s1_agent_m0_readdatavalid),                           //                         .readdatavalid
		.uav_byteenable         (ogpu_raster_unit_v0z_s1_agent_m0_byteenable),                              //                         .byteenable
		.uav_readdata           (ogpu_raster_unit_v0z_s1_agent_m0_readdata),                                //                         .readdata
		.uav_writedata          (ogpu_raster_unit_v0z_s1_agent_m0_writedata),                               //                         .writedata
		.uav_lock               (ogpu_raster_unit_v0z_s1_agent_m0_lock),                                    //                         .lock
		.uav_debugaccess        (ogpu_raster_unit_v0z_s1_agent_m0_debugaccess),                             //                         .debugaccess
		.av_address             (ogpu_raster_unit_v0z_s1_address),                                          //      avalon_anti_slave_0.address
		.av_write               (ogpu_raster_unit_v0z_s1_write),                                            //                         .write
		.av_readdata            (ogpu_raster_unit_v0z_s1_readdata),                                         //                         .readdata
		.av_writedata           (ogpu_raster_unit_v0z_s1_writedata),                                        //                         .writedata
		.av_chipselect          (ogpu_raster_unit_v0z_s1_chipselect),                                       //                         .chipselect
		.av_read                (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_raster_unit_v0y_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_raster_unit_v0y_s1_agent_m0_address),                                 // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_raster_unit_v0y_s1_agent_m0_burstcount),                              //                         .burstcount
		.uav_read               (ogpu_raster_unit_v0y_s1_agent_m0_read),                                    //                         .read
		.uav_write              (ogpu_raster_unit_v0y_s1_agent_m0_write),                                   //                         .write
		.uav_waitrequest        (ogpu_raster_unit_v0y_s1_agent_m0_waitrequest),                             //                         .waitrequest
		.uav_readdatavalid      (ogpu_raster_unit_v0y_s1_agent_m0_readdatavalid),                           //                         .readdatavalid
		.uav_byteenable         (ogpu_raster_unit_v0y_s1_agent_m0_byteenable),                              //                         .byteenable
		.uav_readdata           (ogpu_raster_unit_v0y_s1_agent_m0_readdata),                                //                         .readdata
		.uav_writedata          (ogpu_raster_unit_v0y_s1_agent_m0_writedata),                               //                         .writedata
		.uav_lock               (ogpu_raster_unit_v0y_s1_agent_m0_lock),                                    //                         .lock
		.uav_debugaccess        (ogpu_raster_unit_v0y_s1_agent_m0_debugaccess),                             //                         .debugaccess
		.av_address             (ogpu_raster_unit_v0y_s1_address),                                          //      avalon_anti_slave_0.address
		.av_write               (ogpu_raster_unit_v0y_s1_write),                                            //                         .write
		.av_readdata            (ogpu_raster_unit_v0y_s1_readdata),                                         //                         .readdata
		.av_writedata           (ogpu_raster_unit_v0y_s1_writedata),                                        //                         .writedata
		.av_chipselect          (ogpu_raster_unit_v0y_s1_chipselect),                                       //                         .chipselect
		.av_read                (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_raster_unit_v0x_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_raster_unit_v0x_s1_agent_m0_address),                                 // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_raster_unit_v0x_s1_agent_m0_burstcount),                              //                         .burstcount
		.uav_read               (ogpu_raster_unit_v0x_s1_agent_m0_read),                                    //                         .read
		.uav_write              (ogpu_raster_unit_v0x_s1_agent_m0_write),                                   //                         .write
		.uav_waitrequest        (ogpu_raster_unit_v0x_s1_agent_m0_waitrequest),                             //                         .waitrequest
		.uav_readdatavalid      (ogpu_raster_unit_v0x_s1_agent_m0_readdatavalid),                           //                         .readdatavalid
		.uav_byteenable         (ogpu_raster_unit_v0x_s1_agent_m0_byteenable),                              //                         .byteenable
		.uav_readdata           (ogpu_raster_unit_v0x_s1_agent_m0_readdata),                                //                         .readdata
		.uav_writedata          (ogpu_raster_unit_v0x_s1_agent_m0_writedata),                               //                         .writedata
		.uav_lock               (ogpu_raster_unit_v0x_s1_agent_m0_lock),                                    //                         .lock
		.uav_debugaccess        (ogpu_raster_unit_v0x_s1_agent_m0_debugaccess),                             //                         .debugaccess
		.av_address             (ogpu_raster_unit_v0x_s1_address),                                          //      avalon_anti_slave_0.address
		.av_write               (ogpu_raster_unit_v0x_s1_write),                                            //                         .write
		.av_readdata            (ogpu_raster_unit_v0x_s1_readdata),                                         //                         .readdata
		.av_writedata           (ogpu_raster_unit_v0x_s1_writedata),                                        //                         .writedata
		.av_chipselect          (ogpu_raster_unit_v0x_s1_chipselect),                                       //                         .chipselect
		.av_read                (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_quad_store_req_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_quad_store_req_s1_agent_m0_address),                                  // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_quad_store_req_s1_agent_m0_burstcount),                               //                         .burstcount
		.uav_read               (ogpu_quad_store_req_s1_agent_m0_read),                                     //                         .read
		.uav_write              (ogpu_quad_store_req_s1_agent_m0_write),                                    //                         .write
		.uav_waitrequest        (ogpu_quad_store_req_s1_agent_m0_waitrequest),                              //                         .waitrequest
		.uav_readdatavalid      (ogpu_quad_store_req_s1_agent_m0_readdatavalid),                            //                         .readdatavalid
		.uav_byteenable         (ogpu_quad_store_req_s1_agent_m0_byteenable),                               //                         .byteenable
		.uav_readdata           (ogpu_quad_store_req_s1_agent_m0_readdata),                                 //                         .readdata
		.uav_writedata          (ogpu_quad_store_req_s1_agent_m0_writedata),                                //                         .writedata
		.uav_lock               (ogpu_quad_store_req_s1_agent_m0_lock),                                     //                         .lock
		.uav_debugaccess        (ogpu_quad_store_req_s1_agent_m0_debugaccess),                              //                         .debugaccess
		.av_address             (ogpu_quad_store_req_s1_address),                                           //      avalon_anti_slave_0.address
		.av_readdata            (ogpu_quad_store_req_s1_readdata),                                          //                         .readdata
		.av_write               (),                                                                         //              (terminated)
		.av_read                (),                                                                         //              (terminated)
		.av_writedata           (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_chipselect          (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_quad_store_data_high_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_quad_store_data_high_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_quad_store_data_high_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (ogpu_quad_store_data_high_s1_agent_m0_read),                               //                         .read
		.uav_write              (ogpu_quad_store_data_high_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest        (ogpu_quad_store_data_high_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (ogpu_quad_store_data_high_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (ogpu_quad_store_data_high_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (ogpu_quad_store_data_high_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (ogpu_quad_store_data_high_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (ogpu_quad_store_data_high_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (ogpu_quad_store_data_high_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (ogpu_quad_store_data_high_s1_address),                                     //      avalon_anti_slave_0.address
		.av_readdata            (ogpu_quad_store_data_high_s1_readdata),                                    //                         .readdata
		.av_write               (),                                                                         //              (terminated)
		.av_read                (),                                                                         //              (terminated)
		.av_writedata           (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_chipselect          (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_quad_store_data_low_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_quad_store_data_low_s1_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_quad_store_data_low_s1_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (ogpu_quad_store_data_low_s1_agent_m0_read),                                //                         .read
		.uav_write              (ogpu_quad_store_data_low_s1_agent_m0_write),                               //                         .write
		.uav_waitrequest        (ogpu_quad_store_data_low_s1_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (ogpu_quad_store_data_low_s1_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (ogpu_quad_store_data_low_s1_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (ogpu_quad_store_data_low_s1_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (ogpu_quad_store_data_low_s1_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (ogpu_quad_store_data_low_s1_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (ogpu_quad_store_data_low_s1_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (ogpu_quad_store_data_low_s1_address),                                      //      avalon_anti_slave_0.address
		.av_readdata            (ogpu_quad_store_data_low_s1_readdata),                                     //                         .readdata
		.av_write               (),                                                                         //              (terminated)
		.av_read                (),                                                                         //              (terminated)
		.av_writedata           (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_chipselect          (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_quad_store_ack_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_quad_store_ack_s1_agent_m0_address),                                  // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_quad_store_ack_s1_agent_m0_burstcount),                               //                         .burstcount
		.uav_read               (ogpu_quad_store_ack_s1_agent_m0_read),                                     //                         .read
		.uav_write              (ogpu_quad_store_ack_s1_agent_m0_write),                                    //                         .write
		.uav_waitrequest        (ogpu_quad_store_ack_s1_agent_m0_waitrequest),                              //                         .waitrequest
		.uav_readdatavalid      (ogpu_quad_store_ack_s1_agent_m0_readdatavalid),                            //                         .readdatavalid
		.uav_byteenable         (ogpu_quad_store_ack_s1_agent_m0_byteenable),                               //                         .byteenable
		.uav_readdata           (ogpu_quad_store_ack_s1_agent_m0_readdata),                                 //                         .readdata
		.uav_writedata          (ogpu_quad_store_ack_s1_agent_m0_writedata),                                //                         .writedata
		.uav_lock               (ogpu_quad_store_ack_s1_agent_m0_lock),                                     //                         .lock
		.uav_debugaccess        (ogpu_quad_store_ack_s1_agent_m0_debugaccess),                              //                         .debugaccess
		.av_address             (ogpu_quad_store_ack_s1_address),                                           //      avalon_anti_slave_0.address
		.av_write               (ogpu_quad_store_ack_s1_write),                                             //                         .write
		.av_readdata            (ogpu_quad_store_ack_s1_readdata),                                          //                         .readdata
		.av_writedata           (ogpu_quad_store_ack_s1_writedata),                                         //                         .writedata
		.av_chipselect          (ogpu_quad_store_ack_s1_chipselect),                                        //                         .chipselect
		.av_read                (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ogpu_reset_s1_translator (
		.clk                    (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                  (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ogpu_reset_s1_agent_m0_address),                                           // avalon_universal_slave_0.address
		.uav_burstcount         (ogpu_reset_s1_agent_m0_burstcount),                                        //                         .burstcount
		.uav_read               (ogpu_reset_s1_agent_m0_read),                                              //                         .read
		.uav_write              (ogpu_reset_s1_agent_m0_write),                                             //                         .write
		.uav_waitrequest        (ogpu_reset_s1_agent_m0_waitrequest),                                       //                         .waitrequest
		.uav_readdatavalid      (ogpu_reset_s1_agent_m0_readdatavalid),                                     //                         .readdatavalid
		.uav_byteenable         (ogpu_reset_s1_agent_m0_byteenable),                                        //                         .byteenable
		.uav_readdata           (ogpu_reset_s1_agent_m0_readdata),                                          //                         .readdata
		.uav_writedata          (ogpu_reset_s1_agent_m0_writedata),                                         //                         .writedata
		.uav_lock               (ogpu_reset_s1_agent_m0_lock),                                              //                         .lock
		.uav_debugaccess        (ogpu_reset_s1_agent_m0_debugaccess),                                       //                         .debugaccess
		.av_address             (ogpu_reset_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write               (ogpu_reset_s1_write),                                                      //                         .write
		.av_readdata            (ogpu_reset_s1_readdata),                                                   //                         .readdata
		.av_writedata           (ogpu_reset_s1_writedata),                                                  //                         .writedata
		.av_chipselect          (ogpu_reset_s1_chipselect),                                                 //                         .chipselect
		.av_read                (),                                                                         //              (terminated)
		.av_begintransfer       (),                                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                                         //              (terminated)
		.av_burstcount          (),                                                                         //              (terminated)
		.av_byteenable          (),                                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                                     //              (terminated)
		.av_writebyteenable     (),                                                                         //              (terminated)
		.av_lock                (),                                                                         //              (terminated)
		.av_clken               (),                                                                         //              (terminated)
		.uav_clken              (1'b0),                                                                     //              (terminated)
		.av_debugaccess         (),                                                                         //              (terminated)
		.av_outputenable        (),                                                                         //              (terminated)
		.uav_response           (),                                                                         //              (terminated)
		.av_response            (2'b00),                                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (64),
		.WDATA_WIDTH               (64),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (131),
		.PKT_CACHE_H               (161),
		.PKT_CACHE_L               (158),
		.PKT_ADDR_SIDEBAND_H       (129),
		.PKT_ADDR_SIDEBAND_L       (129),
		.PKT_PROTECTION_H          (157),
		.PKT_PROTECTION_L          (155),
		.PKT_BURST_SIZE_H          (126),
		.PKT_BURST_SIZE_L          (124),
		.PKT_BURST_TYPE_H          (128),
		.PKT_BURST_TYPE_L          (127),
		.PKT_RESPONSE_STATUS_L     (162),
		.PKT_RESPONSE_STATUS_H     (163),
		.PKT_BURSTWRAP_H           (123),
		.PKT_BURSTWRAP_L           (116),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (108),
		.PKT_ADDR_H                (101),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_EXCLUSIVE       (107),
		.PKT_TRANS_LOCK            (106),
		.PKT_TRANS_COMPRESSED_READ (102),
		.PKT_TRANS_POSTED          (103),
		.PKT_TRANS_WRITE           (104),
		.PKT_TRANS_READ            (105),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (137),
		.PKT_SRC_ID_L              (133),
		.PKT_DEST_ID_H             (142),
		.PKT_DEST_ID_L             (138),
		.PKT_THREAD_ID_H           (154),
		.PKT_THREAD_ID_L           (143),
		.PKT_QOS_L                 (132),
		.PKT_QOS_H                 (132),
		.PKT_ORI_BURST_SIZE_L      (164),
		.PKT_ORI_BURST_SIZE_H      (166),
		.PKT_DATA_SIDEBAND_H       (130),
		.PKT_DATA_SIDEBAND_L       (130),
		.ST_DATA_W                 (167),
		.ST_CHANNEL_W              (25),
		.ID                        (0)
	) hps_0_h2f_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                     //              clk.clk
		.aresetn                (~hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                              //      (terminated)
		.aruser                 (1'b0),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                           //      (terminated)
		.arqos                  (4'b0000),                                                           //      (terminated)
		.awregion               (4'b0000),                                                           //      (terminated)
		.arregion               (4'b0000),                                                           //      (terminated)
		.wuser                  (1'b0),                                                              //      (terminated)
		.ruser                  (),                                                                  //      (terminated)
		.buser                  ()                                                                   //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_raster_unit_quad_buffer_addr_high_s1_agent (
		.clk                     (clk_0_clk_clk),                                                                 //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                                 //                .error
		.rdata_fifo_src_ready    (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                              //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                      // (terminated)
		.csr_read          (1'b0),                                                                       // (terminated)
		.csr_write         (1'b0),                                                                       // (terminated)
		.csr_readdata      (),                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                       // (terminated)
		.almost_full_data  (),                                                                           // (terminated)
		.almost_empty_data (),                                                                           // (terminated)
		.in_empty          (1'b0),                                                                       // (terminated)
		.out_empty         (),                                                                           // (terminated)
		.in_error          (1'b0),                                                                       // (terminated)
		.out_error         (),                                                                           // (terminated)
		.in_channel        (1'b0),                                                                       // (terminated)
		.out_channel       ()                                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_raster_unit_quad_buffer_addr_low_s1_agent (
		.clk                     (clk_0_clk_clk),                                                                //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                            //                .error
		.rdata_fifo_src_ready    (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                             //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_raster_unit_depth_coef_c_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_raster_unit_depth_coef_c_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (ogpu_raster_unit_depth_coef_c_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (ogpu_raster_unit_depth_coef_c_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (ogpu_raster_unit_depth_coef_c_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (ogpu_raster_unit_depth_coef_c_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (ogpu_raster_unit_depth_coef_c_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (ogpu_raster_unit_depth_coef_c_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (ogpu_raster_unit_depth_coef_c_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (ogpu_raster_unit_depth_coef_c_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (ogpu_raster_unit_depth_coef_c_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (ogpu_raster_unit_depth_coef_c_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (ogpu_raster_unit_depth_coef_c_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (ogpu_raster_unit_depth_coef_c_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (ogpu_raster_unit_depth_coef_c_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (ogpu_raster_unit_depth_coef_c_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (ogpu_raster_unit_depth_coef_c_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (ogpu_raster_unit_depth_coef_c_s1_burst_adapter_source0_ready),             //              cp.ready
		.cp_valid                (ogpu_raster_unit_depth_coef_c_s1_burst_adapter_source0_valid),             //                .valid
		.cp_data                 (ogpu_raster_unit_depth_coef_c_s1_burst_adapter_source0_data),              //                .data
		.cp_startofpacket        (ogpu_raster_unit_depth_coef_c_s1_burst_adapter_source0_startofpacket),     //                .startofpacket
		.cp_endofpacket          (ogpu_raster_unit_depth_coef_c_s1_burst_adapter_source0_endofpacket),       //                .endofpacket
		.cp_channel              (ogpu_raster_unit_depth_coef_c_s1_burst_adapter_source0_channel),           //                .channel
		.rf_sink_ready           (ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (ogpu_raster_unit_depth_coef_c_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (ogpu_raster_unit_depth_coef_c_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (ogpu_raster_unit_depth_coef_c_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (ogpu_raster_unit_depth_coef_c_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (ogpu_raster_unit_depth_coef_c_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_depth_coef_c_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (ogpu_raster_unit_depth_coef_c_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (ogpu_raster_unit_depth_coef_c_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (ogpu_raster_unit_depth_coef_c_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (ogpu_raster_unit_depth_coef_c_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (ogpu_raster_unit_depth_coef_c_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_raster_unit_depth_coef_b_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_raster_unit_depth_coef_b_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (ogpu_raster_unit_depth_coef_b_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (ogpu_raster_unit_depth_coef_b_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (ogpu_raster_unit_depth_coef_b_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (ogpu_raster_unit_depth_coef_b_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (ogpu_raster_unit_depth_coef_b_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (ogpu_raster_unit_depth_coef_b_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (ogpu_raster_unit_depth_coef_b_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (ogpu_raster_unit_depth_coef_b_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (ogpu_raster_unit_depth_coef_b_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (ogpu_raster_unit_depth_coef_b_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (ogpu_raster_unit_depth_coef_b_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (ogpu_raster_unit_depth_coef_b_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (ogpu_raster_unit_depth_coef_b_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (ogpu_raster_unit_depth_coef_b_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (ogpu_raster_unit_depth_coef_b_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (ogpu_raster_unit_depth_coef_b_s1_burst_adapter_source0_ready),             //              cp.ready
		.cp_valid                (ogpu_raster_unit_depth_coef_b_s1_burst_adapter_source0_valid),             //                .valid
		.cp_data                 (ogpu_raster_unit_depth_coef_b_s1_burst_adapter_source0_data),              //                .data
		.cp_startofpacket        (ogpu_raster_unit_depth_coef_b_s1_burst_adapter_source0_startofpacket),     //                .startofpacket
		.cp_endofpacket          (ogpu_raster_unit_depth_coef_b_s1_burst_adapter_source0_endofpacket),       //                .endofpacket
		.cp_channel              (ogpu_raster_unit_depth_coef_b_s1_burst_adapter_source0_channel),           //                .channel
		.rf_sink_ready           (ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (ogpu_raster_unit_depth_coef_b_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (ogpu_raster_unit_depth_coef_b_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (ogpu_raster_unit_depth_coef_b_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (ogpu_raster_unit_depth_coef_b_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (ogpu_raster_unit_depth_coef_b_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_depth_coef_b_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (ogpu_raster_unit_depth_coef_b_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (ogpu_raster_unit_depth_coef_b_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (ogpu_raster_unit_depth_coef_b_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (ogpu_raster_unit_depth_coef_b_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (ogpu_raster_unit_depth_coef_b_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_raster_unit_depth_coef_a_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_raster_unit_depth_coef_a_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (ogpu_raster_unit_depth_coef_a_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (ogpu_raster_unit_depth_coef_a_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (ogpu_raster_unit_depth_coef_a_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (ogpu_raster_unit_depth_coef_a_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (ogpu_raster_unit_depth_coef_a_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (ogpu_raster_unit_depth_coef_a_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (ogpu_raster_unit_depth_coef_a_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (ogpu_raster_unit_depth_coef_a_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (ogpu_raster_unit_depth_coef_a_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (ogpu_raster_unit_depth_coef_a_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (ogpu_raster_unit_depth_coef_a_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (ogpu_raster_unit_depth_coef_a_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (ogpu_raster_unit_depth_coef_a_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (ogpu_raster_unit_depth_coef_a_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (ogpu_raster_unit_depth_coef_a_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (ogpu_raster_unit_depth_coef_a_s1_burst_adapter_source0_ready),             //              cp.ready
		.cp_valid                (ogpu_raster_unit_depth_coef_a_s1_burst_adapter_source0_valid),             //                .valid
		.cp_data                 (ogpu_raster_unit_depth_coef_a_s1_burst_adapter_source0_data),              //                .data
		.cp_startofpacket        (ogpu_raster_unit_depth_coef_a_s1_burst_adapter_source0_startofpacket),     //                .startofpacket
		.cp_endofpacket          (ogpu_raster_unit_depth_coef_a_s1_burst_adapter_source0_endofpacket),       //                .endofpacket
		.cp_channel              (ogpu_raster_unit_depth_coef_a_s1_burst_adapter_source0_channel),           //                .channel
		.rf_sink_ready           (ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (ogpu_raster_unit_depth_coef_a_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (ogpu_raster_unit_depth_coef_a_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (ogpu_raster_unit_depth_coef_a_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (ogpu_raster_unit_depth_coef_a_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (ogpu_raster_unit_depth_coef_a_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_depth_coef_a_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (ogpu_raster_unit_depth_coef_a_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (ogpu_raster_unit_depth_coef_a_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (ogpu_raster_unit_depth_coef_a_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (ogpu_raster_unit_depth_coef_a_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (ogpu_raster_unit_depth_coef_a_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_raster_unit_tile1_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_raster_unit_tile1_s1_agent_m0_address),                               //              m0.address
		.m0_burstcount           (ogpu_raster_unit_tile1_s1_agent_m0_burstcount),                            //                .burstcount
		.m0_byteenable           (ogpu_raster_unit_tile1_s1_agent_m0_byteenable),                            //                .byteenable
		.m0_debugaccess          (ogpu_raster_unit_tile1_s1_agent_m0_debugaccess),                           //                .debugaccess
		.m0_lock                 (ogpu_raster_unit_tile1_s1_agent_m0_lock),                                  //                .lock
		.m0_readdata             (ogpu_raster_unit_tile1_s1_agent_m0_readdata),                              //                .readdata
		.m0_readdatavalid        (ogpu_raster_unit_tile1_s1_agent_m0_readdatavalid),                         //                .readdatavalid
		.m0_read                 (ogpu_raster_unit_tile1_s1_agent_m0_read),                                  //                .read
		.m0_waitrequest          (ogpu_raster_unit_tile1_s1_agent_m0_waitrequest),                           //                .waitrequest
		.m0_writedata            (ogpu_raster_unit_tile1_s1_agent_m0_writedata),                             //                .writedata
		.m0_write                (ogpu_raster_unit_tile1_s1_agent_m0_write),                                 //                .write
		.rp_endofpacket          (ogpu_raster_unit_tile1_s1_agent_rp_endofpacket),                           //              rp.endofpacket
		.rp_ready                (ogpu_raster_unit_tile1_s1_agent_rp_ready),                                 //                .ready
		.rp_valid                (ogpu_raster_unit_tile1_s1_agent_rp_valid),                                 //                .valid
		.rp_data                 (ogpu_raster_unit_tile1_s1_agent_rp_data),                                  //                .data
		.rp_startofpacket        (ogpu_raster_unit_tile1_s1_agent_rp_startofpacket),                         //                .startofpacket
		.cp_ready                (ogpu_raster_unit_tile1_s1_burst_adapter_source0_ready),                    //              cp.ready
		.cp_valid                (ogpu_raster_unit_tile1_s1_burst_adapter_source0_valid),                    //                .valid
		.cp_data                 (ogpu_raster_unit_tile1_s1_burst_adapter_source0_data),                     //                .data
		.cp_startofpacket        (ogpu_raster_unit_tile1_s1_burst_adapter_source0_startofpacket),            //                .startofpacket
		.cp_endofpacket          (ogpu_raster_unit_tile1_s1_burst_adapter_source0_endofpacket),              //                .endofpacket
		.cp_channel              (ogpu_raster_unit_tile1_s1_burst_adapter_source0_channel),                  //                .channel
		.rf_sink_ready           (ogpu_raster_unit_tile1_s1_agent_rsp_fifo_out_ready),                       //         rf_sink.ready
		.rf_sink_valid           (ogpu_raster_unit_tile1_s1_agent_rsp_fifo_out_valid),                       //                .valid
		.rf_sink_startofpacket   (ogpu_raster_unit_tile1_s1_agent_rsp_fifo_out_startofpacket),               //                .startofpacket
		.rf_sink_endofpacket     (ogpu_raster_unit_tile1_s1_agent_rsp_fifo_out_endofpacket),                 //                .endofpacket
		.rf_sink_data            (ogpu_raster_unit_tile1_s1_agent_rsp_fifo_out_data),                        //                .data
		.rf_source_ready         (ogpu_raster_unit_tile1_s1_agent_rf_source_ready),                          //       rf_source.ready
		.rf_source_valid         (ogpu_raster_unit_tile1_s1_agent_rf_source_valid),                          //                .valid
		.rf_source_startofpacket (ogpu_raster_unit_tile1_s1_agent_rf_source_startofpacket),                  //                .startofpacket
		.rf_source_endofpacket   (ogpu_raster_unit_tile1_s1_agent_rf_source_endofpacket),                    //                .endofpacket
		.rf_source_data          (ogpu_raster_unit_tile1_s1_agent_rf_source_data),                           //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_raster_unit_tile1_s1_agent_rdata_fifo_src_ready),                     //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_raster_unit_tile1_s1_agent_rdata_fifo_src_valid),                     //                .valid
		.rdata_fifo_src_data     (ogpu_raster_unit_tile1_s1_agent_rdata_fifo_src_data),                      //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_tile1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_tile1_s1_agent_rf_source_data),                           //        in.data
		.in_valid          (ogpu_raster_unit_tile1_s1_agent_rf_source_valid),                          //          .valid
		.in_ready          (ogpu_raster_unit_tile1_s1_agent_rf_source_ready),                          //          .ready
		.in_startofpacket  (ogpu_raster_unit_tile1_s1_agent_rf_source_startofpacket),                  //          .startofpacket
		.in_endofpacket    (ogpu_raster_unit_tile1_s1_agent_rf_source_endofpacket),                    //          .endofpacket
		.out_data          (ogpu_raster_unit_tile1_s1_agent_rsp_fifo_out_data),                        //       out.data
		.out_valid         (ogpu_raster_unit_tile1_s1_agent_rsp_fifo_out_valid),                       //          .valid
		.out_ready         (ogpu_raster_unit_tile1_s1_agent_rsp_fifo_out_ready),                       //          .ready
		.out_startofpacket (ogpu_raster_unit_tile1_s1_agent_rsp_fifo_out_startofpacket),               //          .startofpacket
		.out_endofpacket   (ogpu_raster_unit_tile1_s1_agent_rsp_fifo_out_endofpacket),                 //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_tile1_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_tile1_s1_agent_rdata_fifo_src_data),                      //        in.data
		.in_valid          (ogpu_raster_unit_tile1_s1_agent_rdata_fifo_src_valid),                     //          .valid
		.in_ready          (ogpu_raster_unit_tile1_s1_agent_rdata_fifo_src_ready),                     //          .ready
		.out_data          (ogpu_raster_unit_tile1_s1_agent_rdata_fifo_out_data),                      //       out.data
		.out_valid         (ogpu_raster_unit_tile1_s1_agent_rdata_fifo_out_valid),                     //          .valid
		.out_ready         (ogpu_raster_unit_tile1_s1_agent_rdata_fifo_out_ready),                     //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_raster_unit_tile0_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_raster_unit_tile0_s1_agent_m0_address),                               //              m0.address
		.m0_burstcount           (ogpu_raster_unit_tile0_s1_agent_m0_burstcount),                            //                .burstcount
		.m0_byteenable           (ogpu_raster_unit_tile0_s1_agent_m0_byteenable),                            //                .byteenable
		.m0_debugaccess          (ogpu_raster_unit_tile0_s1_agent_m0_debugaccess),                           //                .debugaccess
		.m0_lock                 (ogpu_raster_unit_tile0_s1_agent_m0_lock),                                  //                .lock
		.m0_readdata             (ogpu_raster_unit_tile0_s1_agent_m0_readdata),                              //                .readdata
		.m0_readdatavalid        (ogpu_raster_unit_tile0_s1_agent_m0_readdatavalid),                         //                .readdatavalid
		.m0_read                 (ogpu_raster_unit_tile0_s1_agent_m0_read),                                  //                .read
		.m0_waitrequest          (ogpu_raster_unit_tile0_s1_agent_m0_waitrequest),                           //                .waitrequest
		.m0_writedata            (ogpu_raster_unit_tile0_s1_agent_m0_writedata),                             //                .writedata
		.m0_write                (ogpu_raster_unit_tile0_s1_agent_m0_write),                                 //                .write
		.rp_endofpacket          (ogpu_raster_unit_tile0_s1_agent_rp_endofpacket),                           //              rp.endofpacket
		.rp_ready                (ogpu_raster_unit_tile0_s1_agent_rp_ready),                                 //                .ready
		.rp_valid                (ogpu_raster_unit_tile0_s1_agent_rp_valid),                                 //                .valid
		.rp_data                 (ogpu_raster_unit_tile0_s1_agent_rp_data),                                  //                .data
		.rp_startofpacket        (ogpu_raster_unit_tile0_s1_agent_rp_startofpacket),                         //                .startofpacket
		.cp_ready                (ogpu_raster_unit_tile0_s1_burst_adapter_source0_ready),                    //              cp.ready
		.cp_valid                (ogpu_raster_unit_tile0_s1_burst_adapter_source0_valid),                    //                .valid
		.cp_data                 (ogpu_raster_unit_tile0_s1_burst_adapter_source0_data),                     //                .data
		.cp_startofpacket        (ogpu_raster_unit_tile0_s1_burst_adapter_source0_startofpacket),            //                .startofpacket
		.cp_endofpacket          (ogpu_raster_unit_tile0_s1_burst_adapter_source0_endofpacket),              //                .endofpacket
		.cp_channel              (ogpu_raster_unit_tile0_s1_burst_adapter_source0_channel),                  //                .channel
		.rf_sink_ready           (ogpu_raster_unit_tile0_s1_agent_rsp_fifo_out_ready),                       //         rf_sink.ready
		.rf_sink_valid           (ogpu_raster_unit_tile0_s1_agent_rsp_fifo_out_valid),                       //                .valid
		.rf_sink_startofpacket   (ogpu_raster_unit_tile0_s1_agent_rsp_fifo_out_startofpacket),               //                .startofpacket
		.rf_sink_endofpacket     (ogpu_raster_unit_tile0_s1_agent_rsp_fifo_out_endofpacket),                 //                .endofpacket
		.rf_sink_data            (ogpu_raster_unit_tile0_s1_agent_rsp_fifo_out_data),                        //                .data
		.rf_source_ready         (ogpu_raster_unit_tile0_s1_agent_rf_source_ready),                          //       rf_source.ready
		.rf_source_valid         (ogpu_raster_unit_tile0_s1_agent_rf_source_valid),                          //                .valid
		.rf_source_startofpacket (ogpu_raster_unit_tile0_s1_agent_rf_source_startofpacket),                  //                .startofpacket
		.rf_source_endofpacket   (ogpu_raster_unit_tile0_s1_agent_rf_source_endofpacket),                    //                .endofpacket
		.rf_source_data          (ogpu_raster_unit_tile0_s1_agent_rf_source_data),                           //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_raster_unit_tile0_s1_agent_rdata_fifo_src_ready),                     //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_raster_unit_tile0_s1_agent_rdata_fifo_src_valid),                     //                .valid
		.rdata_fifo_src_data     (ogpu_raster_unit_tile0_s1_agent_rdata_fifo_src_data),                      //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_tile0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_tile0_s1_agent_rf_source_data),                           //        in.data
		.in_valid          (ogpu_raster_unit_tile0_s1_agent_rf_source_valid),                          //          .valid
		.in_ready          (ogpu_raster_unit_tile0_s1_agent_rf_source_ready),                          //          .ready
		.in_startofpacket  (ogpu_raster_unit_tile0_s1_agent_rf_source_startofpacket),                  //          .startofpacket
		.in_endofpacket    (ogpu_raster_unit_tile0_s1_agent_rf_source_endofpacket),                    //          .endofpacket
		.out_data          (ogpu_raster_unit_tile0_s1_agent_rsp_fifo_out_data),                        //       out.data
		.out_valid         (ogpu_raster_unit_tile0_s1_agent_rsp_fifo_out_valid),                       //          .valid
		.out_ready         (ogpu_raster_unit_tile0_s1_agent_rsp_fifo_out_ready),                       //          .ready
		.out_startofpacket (ogpu_raster_unit_tile0_s1_agent_rsp_fifo_out_startofpacket),               //          .startofpacket
		.out_endofpacket   (ogpu_raster_unit_tile0_s1_agent_rsp_fifo_out_endofpacket),                 //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_tile0_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_tile0_s1_agent_rdata_fifo_src_data),                      //        in.data
		.in_valid          (ogpu_raster_unit_tile0_s1_agent_rdata_fifo_src_valid),                     //          .valid
		.in_ready          (ogpu_raster_unit_tile0_s1_agent_rdata_fifo_src_ready),                     //          .ready
		.out_data          (ogpu_raster_unit_tile0_s1_agent_rdata_fifo_out_data),                      //       out.data
		.out_valid         (ogpu_raster_unit_tile0_s1_agent_rdata_fifo_out_valid),                     //          .valid
		.out_ready         (ogpu_raster_unit_tile0_s1_agent_rdata_fifo_out_ready),                     //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_raster_unit_clip_rect1_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_raster_unit_clip_rect1_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (ogpu_raster_unit_clip_rect1_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (ogpu_raster_unit_clip_rect1_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (ogpu_raster_unit_clip_rect1_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (ogpu_raster_unit_clip_rect1_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (ogpu_raster_unit_clip_rect1_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (ogpu_raster_unit_clip_rect1_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (ogpu_raster_unit_clip_rect1_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (ogpu_raster_unit_clip_rect1_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (ogpu_raster_unit_clip_rect1_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (ogpu_raster_unit_clip_rect1_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (ogpu_raster_unit_clip_rect1_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (ogpu_raster_unit_clip_rect1_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (ogpu_raster_unit_clip_rect1_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (ogpu_raster_unit_clip_rect1_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (ogpu_raster_unit_clip_rect1_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (ogpu_raster_unit_clip_rect1_s1_burst_adapter_source0_ready),               //              cp.ready
		.cp_valid                (ogpu_raster_unit_clip_rect1_s1_burst_adapter_source0_valid),               //                .valid
		.cp_data                 (ogpu_raster_unit_clip_rect1_s1_burst_adapter_source0_data),                //                .data
		.cp_startofpacket        (ogpu_raster_unit_clip_rect1_s1_burst_adapter_source0_startofpacket),       //                .startofpacket
		.cp_endofpacket          (ogpu_raster_unit_clip_rect1_s1_burst_adapter_source0_endofpacket),         //                .endofpacket
		.cp_channel              (ogpu_raster_unit_clip_rect1_s1_burst_adapter_source0_channel),             //                .channel
		.rf_sink_ready           (ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (ogpu_raster_unit_clip_rect1_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (ogpu_raster_unit_clip_rect1_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (ogpu_raster_unit_clip_rect1_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (ogpu_raster_unit_clip_rect1_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (ogpu_raster_unit_clip_rect1_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_clip_rect1_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (ogpu_raster_unit_clip_rect1_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (ogpu_raster_unit_clip_rect1_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (ogpu_raster_unit_clip_rect1_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (ogpu_raster_unit_clip_rect1_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (ogpu_raster_unit_clip_rect1_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo_src_data),                 //        in.data
		.in_valid          (ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo_src_valid),                //          .valid
		.in_ready          (ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo_src_ready),                //          .ready
		.out_data          (ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo_out_data),                 //       out.data
		.out_valid         (ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo_out_valid),                //          .valid
		.out_ready         (ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo_out_ready),                //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_raster_unit_clip_rect0_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_raster_unit_clip_rect0_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (ogpu_raster_unit_clip_rect0_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (ogpu_raster_unit_clip_rect0_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (ogpu_raster_unit_clip_rect0_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (ogpu_raster_unit_clip_rect0_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (ogpu_raster_unit_clip_rect0_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (ogpu_raster_unit_clip_rect0_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (ogpu_raster_unit_clip_rect0_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (ogpu_raster_unit_clip_rect0_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (ogpu_raster_unit_clip_rect0_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (ogpu_raster_unit_clip_rect0_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (ogpu_raster_unit_clip_rect0_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (ogpu_raster_unit_clip_rect0_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (ogpu_raster_unit_clip_rect0_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (ogpu_raster_unit_clip_rect0_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (ogpu_raster_unit_clip_rect0_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (ogpu_raster_unit_clip_rect0_s1_burst_adapter_source0_ready),               //              cp.ready
		.cp_valid                (ogpu_raster_unit_clip_rect0_s1_burst_adapter_source0_valid),               //                .valid
		.cp_data                 (ogpu_raster_unit_clip_rect0_s1_burst_adapter_source0_data),                //                .data
		.cp_startofpacket        (ogpu_raster_unit_clip_rect0_s1_burst_adapter_source0_startofpacket),       //                .startofpacket
		.cp_endofpacket          (ogpu_raster_unit_clip_rect0_s1_burst_adapter_source0_endofpacket),         //                .endofpacket
		.cp_channel              (ogpu_raster_unit_clip_rect0_s1_burst_adapter_source0_channel),             //                .channel
		.rf_sink_ready           (ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (ogpu_raster_unit_clip_rect0_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (ogpu_raster_unit_clip_rect0_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (ogpu_raster_unit_clip_rect0_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (ogpu_raster_unit_clip_rect0_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (ogpu_raster_unit_clip_rect0_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_clip_rect0_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (ogpu_raster_unit_clip_rect0_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (ogpu_raster_unit_clip_rect0_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (ogpu_raster_unit_clip_rect0_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (ogpu_raster_unit_clip_rect0_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (ogpu_raster_unit_clip_rect0_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo_src_data),                 //        in.data
		.in_valid          (ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo_src_valid),                //          .valid
		.in_ready          (ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo_src_ready),                //          .ready
		.out_data          (ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo_out_data),                 //       out.data
		.out_valid         (ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo_out_valid),                //          .valid
		.out_ready         (ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo_out_ready),                //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_raster_unit_command_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_raster_unit_command_s1_agent_m0_address),                             //              m0.address
		.m0_burstcount           (ogpu_raster_unit_command_s1_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (ogpu_raster_unit_command_s1_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (ogpu_raster_unit_command_s1_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (ogpu_raster_unit_command_s1_agent_m0_lock),                                //                .lock
		.m0_readdata             (ogpu_raster_unit_command_s1_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (ogpu_raster_unit_command_s1_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (ogpu_raster_unit_command_s1_agent_m0_read),                                //                .read
		.m0_waitrequest          (ogpu_raster_unit_command_s1_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (ogpu_raster_unit_command_s1_agent_m0_writedata),                           //                .writedata
		.m0_write                (ogpu_raster_unit_command_s1_agent_m0_write),                               //                .write
		.rp_endofpacket          (ogpu_raster_unit_command_s1_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (ogpu_raster_unit_command_s1_agent_rp_ready),                               //                .ready
		.rp_valid                (ogpu_raster_unit_command_s1_agent_rp_valid),                               //                .valid
		.rp_data                 (ogpu_raster_unit_command_s1_agent_rp_data),                                //                .data
		.rp_startofpacket        (ogpu_raster_unit_command_s1_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (ogpu_raster_unit_command_s1_burst_adapter_source0_ready),                  //              cp.ready
		.cp_valid                (ogpu_raster_unit_command_s1_burst_adapter_source0_valid),                  //                .valid
		.cp_data                 (ogpu_raster_unit_command_s1_burst_adapter_source0_data),                   //                .data
		.cp_startofpacket        (ogpu_raster_unit_command_s1_burst_adapter_source0_startofpacket),          //                .startofpacket
		.cp_endofpacket          (ogpu_raster_unit_command_s1_burst_adapter_source0_endofpacket),            //                .endofpacket
		.cp_channel              (ogpu_raster_unit_command_s1_burst_adapter_source0_channel),                //                .channel
		.rf_sink_ready           (ogpu_raster_unit_command_s1_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (ogpu_raster_unit_command_s1_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (ogpu_raster_unit_command_s1_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (ogpu_raster_unit_command_s1_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (ogpu_raster_unit_command_s1_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (ogpu_raster_unit_command_s1_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (ogpu_raster_unit_command_s1_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (ogpu_raster_unit_command_s1_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (ogpu_raster_unit_command_s1_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (ogpu_raster_unit_command_s1_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_raster_unit_command_s1_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_raster_unit_command_s1_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (ogpu_raster_unit_command_s1_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_command_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_command_s1_agent_rf_source_data),                         //        in.data
		.in_valid          (ogpu_raster_unit_command_s1_agent_rf_source_valid),                        //          .valid
		.in_ready          (ogpu_raster_unit_command_s1_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (ogpu_raster_unit_command_s1_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (ogpu_raster_unit_command_s1_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (ogpu_raster_unit_command_s1_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (ogpu_raster_unit_command_s1_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (ogpu_raster_unit_command_s1_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (ogpu_raster_unit_command_s1_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (ogpu_raster_unit_command_s1_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_command_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_command_s1_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (ogpu_raster_unit_command_s1_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (ogpu_raster_unit_command_s1_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (ogpu_raster_unit_command_s1_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (ogpu_raster_unit_command_s1_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (ogpu_raster_unit_command_s1_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_raster_unit_status_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_raster_unit_status_s1_agent_m0_address),                              //              m0.address
		.m0_burstcount           (ogpu_raster_unit_status_s1_agent_m0_burstcount),                           //                .burstcount
		.m0_byteenable           (ogpu_raster_unit_status_s1_agent_m0_byteenable),                           //                .byteenable
		.m0_debugaccess          (ogpu_raster_unit_status_s1_agent_m0_debugaccess),                          //                .debugaccess
		.m0_lock                 (ogpu_raster_unit_status_s1_agent_m0_lock),                                 //                .lock
		.m0_readdata             (ogpu_raster_unit_status_s1_agent_m0_readdata),                             //                .readdata
		.m0_readdatavalid        (ogpu_raster_unit_status_s1_agent_m0_readdatavalid),                        //                .readdatavalid
		.m0_read                 (ogpu_raster_unit_status_s1_agent_m0_read),                                 //                .read
		.m0_waitrequest          (ogpu_raster_unit_status_s1_agent_m0_waitrequest),                          //                .waitrequest
		.m0_writedata            (ogpu_raster_unit_status_s1_agent_m0_writedata),                            //                .writedata
		.m0_write                (ogpu_raster_unit_status_s1_agent_m0_write),                                //                .write
		.rp_endofpacket          (ogpu_raster_unit_status_s1_agent_rp_endofpacket),                          //              rp.endofpacket
		.rp_ready                (ogpu_raster_unit_status_s1_agent_rp_ready),                                //                .ready
		.rp_valid                (ogpu_raster_unit_status_s1_agent_rp_valid),                                //                .valid
		.rp_data                 (ogpu_raster_unit_status_s1_agent_rp_data),                                 //                .data
		.rp_startofpacket        (ogpu_raster_unit_status_s1_agent_rp_startofpacket),                        //                .startofpacket
		.cp_ready                (ogpu_raster_unit_status_s1_burst_adapter_source0_ready),                   //              cp.ready
		.cp_valid                (ogpu_raster_unit_status_s1_burst_adapter_source0_valid),                   //                .valid
		.cp_data                 (ogpu_raster_unit_status_s1_burst_adapter_source0_data),                    //                .data
		.cp_startofpacket        (ogpu_raster_unit_status_s1_burst_adapter_source0_startofpacket),           //                .startofpacket
		.cp_endofpacket          (ogpu_raster_unit_status_s1_burst_adapter_source0_endofpacket),             //                .endofpacket
		.cp_channel              (ogpu_raster_unit_status_s1_burst_adapter_source0_channel),                 //                .channel
		.rf_sink_ready           (ogpu_raster_unit_status_s1_agent_rsp_fifo_out_ready),                      //         rf_sink.ready
		.rf_sink_valid           (ogpu_raster_unit_status_s1_agent_rsp_fifo_out_valid),                      //                .valid
		.rf_sink_startofpacket   (ogpu_raster_unit_status_s1_agent_rsp_fifo_out_startofpacket),              //                .startofpacket
		.rf_sink_endofpacket     (ogpu_raster_unit_status_s1_agent_rsp_fifo_out_endofpacket),                //                .endofpacket
		.rf_sink_data            (ogpu_raster_unit_status_s1_agent_rsp_fifo_out_data),                       //                .data
		.rf_source_ready         (ogpu_raster_unit_status_s1_agent_rf_source_ready),                         //       rf_source.ready
		.rf_source_valid         (ogpu_raster_unit_status_s1_agent_rf_source_valid),                         //                .valid
		.rf_source_startofpacket (ogpu_raster_unit_status_s1_agent_rf_source_startofpacket),                 //                .startofpacket
		.rf_source_endofpacket   (ogpu_raster_unit_status_s1_agent_rf_source_endofpacket),                   //                .endofpacket
		.rf_source_data          (ogpu_raster_unit_status_s1_agent_rf_source_data),                          //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_raster_unit_status_s1_agent_rdata_fifo_src_ready),                    //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_raster_unit_status_s1_agent_rdata_fifo_src_valid),                    //                .valid
		.rdata_fifo_src_data     (ogpu_raster_unit_status_s1_agent_rdata_fifo_src_data),                     //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_status_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_status_s1_agent_rf_source_data),                          //        in.data
		.in_valid          (ogpu_raster_unit_status_s1_agent_rf_source_valid),                         //          .valid
		.in_ready          (ogpu_raster_unit_status_s1_agent_rf_source_ready),                         //          .ready
		.in_startofpacket  (ogpu_raster_unit_status_s1_agent_rf_source_startofpacket),                 //          .startofpacket
		.in_endofpacket    (ogpu_raster_unit_status_s1_agent_rf_source_endofpacket),                   //          .endofpacket
		.out_data          (ogpu_raster_unit_status_s1_agent_rsp_fifo_out_data),                       //       out.data
		.out_valid         (ogpu_raster_unit_status_s1_agent_rsp_fifo_out_valid),                      //          .valid
		.out_ready         (ogpu_raster_unit_status_s1_agent_rsp_fifo_out_ready),                      //          .ready
		.out_startofpacket (ogpu_raster_unit_status_s1_agent_rsp_fifo_out_startofpacket),              //          .startofpacket
		.out_endofpacket   (ogpu_raster_unit_status_s1_agent_rsp_fifo_out_endofpacket),                //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_status_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_status_s1_agent_rdata_fifo_src_data),                     //        in.data
		.in_valid          (ogpu_raster_unit_status_s1_agent_rdata_fifo_src_valid),                    //          .valid
		.in_ready          (ogpu_raster_unit_status_s1_agent_rdata_fifo_src_ready),                    //          .ready
		.out_data          (ogpu_raster_unit_status_s1_agent_rdata_fifo_out_data),                     //       out.data
		.out_valid         (ogpu_raster_unit_status_s1_agent_rdata_fifo_out_valid),                    //          .valid
		.out_ready         (ogpu_raster_unit_status_s1_agent_rdata_fifo_out_ready),                    //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_raster_unit_v2z_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_raster_unit_v2z_s1_agent_m0_address),                                 //              m0.address
		.m0_burstcount           (ogpu_raster_unit_v2z_s1_agent_m0_burstcount),                              //                .burstcount
		.m0_byteenable           (ogpu_raster_unit_v2z_s1_agent_m0_byteenable),                              //                .byteenable
		.m0_debugaccess          (ogpu_raster_unit_v2z_s1_agent_m0_debugaccess),                             //                .debugaccess
		.m0_lock                 (ogpu_raster_unit_v2z_s1_agent_m0_lock),                                    //                .lock
		.m0_readdata             (ogpu_raster_unit_v2z_s1_agent_m0_readdata),                                //                .readdata
		.m0_readdatavalid        (ogpu_raster_unit_v2z_s1_agent_m0_readdatavalid),                           //                .readdatavalid
		.m0_read                 (ogpu_raster_unit_v2z_s1_agent_m0_read),                                    //                .read
		.m0_waitrequest          (ogpu_raster_unit_v2z_s1_agent_m0_waitrequest),                             //                .waitrequest
		.m0_writedata            (ogpu_raster_unit_v2z_s1_agent_m0_writedata),                               //                .writedata
		.m0_write                (ogpu_raster_unit_v2z_s1_agent_m0_write),                                   //                .write
		.rp_endofpacket          (ogpu_raster_unit_v2z_s1_agent_rp_endofpacket),                             //              rp.endofpacket
		.rp_ready                (ogpu_raster_unit_v2z_s1_agent_rp_ready),                                   //                .ready
		.rp_valid                (ogpu_raster_unit_v2z_s1_agent_rp_valid),                                   //                .valid
		.rp_data                 (ogpu_raster_unit_v2z_s1_agent_rp_data),                                    //                .data
		.rp_startofpacket        (ogpu_raster_unit_v2z_s1_agent_rp_startofpacket),                           //                .startofpacket
		.cp_ready                (ogpu_raster_unit_v2z_s1_burst_adapter_source0_ready),                      //              cp.ready
		.cp_valid                (ogpu_raster_unit_v2z_s1_burst_adapter_source0_valid),                      //                .valid
		.cp_data                 (ogpu_raster_unit_v2z_s1_burst_adapter_source0_data),                       //                .data
		.cp_startofpacket        (ogpu_raster_unit_v2z_s1_burst_adapter_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (ogpu_raster_unit_v2z_s1_burst_adapter_source0_endofpacket),                //                .endofpacket
		.cp_channel              (ogpu_raster_unit_v2z_s1_burst_adapter_source0_channel),                    //                .channel
		.rf_sink_ready           (ogpu_raster_unit_v2z_s1_agent_rsp_fifo_out_ready),                         //         rf_sink.ready
		.rf_sink_valid           (ogpu_raster_unit_v2z_s1_agent_rsp_fifo_out_valid),                         //                .valid
		.rf_sink_startofpacket   (ogpu_raster_unit_v2z_s1_agent_rsp_fifo_out_startofpacket),                 //                .startofpacket
		.rf_sink_endofpacket     (ogpu_raster_unit_v2z_s1_agent_rsp_fifo_out_endofpacket),                   //                .endofpacket
		.rf_sink_data            (ogpu_raster_unit_v2z_s1_agent_rsp_fifo_out_data),                          //                .data
		.rf_source_ready         (ogpu_raster_unit_v2z_s1_agent_rf_source_ready),                            //       rf_source.ready
		.rf_source_valid         (ogpu_raster_unit_v2z_s1_agent_rf_source_valid),                            //                .valid
		.rf_source_startofpacket (ogpu_raster_unit_v2z_s1_agent_rf_source_startofpacket),                    //                .startofpacket
		.rf_source_endofpacket   (ogpu_raster_unit_v2z_s1_agent_rf_source_endofpacket),                      //                .endofpacket
		.rf_source_data          (ogpu_raster_unit_v2z_s1_agent_rf_source_data),                             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_raster_unit_v2z_s1_agent_rdata_fifo_src_ready),                       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_raster_unit_v2z_s1_agent_rdata_fifo_src_valid),                       //                .valid
		.rdata_fifo_src_data     (ogpu_raster_unit_v2z_s1_agent_rdata_fifo_src_data),                        //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_v2z_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_v2z_s1_agent_rf_source_data),                             //        in.data
		.in_valid          (ogpu_raster_unit_v2z_s1_agent_rf_source_valid),                            //          .valid
		.in_ready          (ogpu_raster_unit_v2z_s1_agent_rf_source_ready),                            //          .ready
		.in_startofpacket  (ogpu_raster_unit_v2z_s1_agent_rf_source_startofpacket),                    //          .startofpacket
		.in_endofpacket    (ogpu_raster_unit_v2z_s1_agent_rf_source_endofpacket),                      //          .endofpacket
		.out_data          (ogpu_raster_unit_v2z_s1_agent_rsp_fifo_out_data),                          //       out.data
		.out_valid         (ogpu_raster_unit_v2z_s1_agent_rsp_fifo_out_valid),                         //          .valid
		.out_ready         (ogpu_raster_unit_v2z_s1_agent_rsp_fifo_out_ready),                         //          .ready
		.out_startofpacket (ogpu_raster_unit_v2z_s1_agent_rsp_fifo_out_startofpacket),                 //          .startofpacket
		.out_endofpacket   (ogpu_raster_unit_v2z_s1_agent_rsp_fifo_out_endofpacket),                   //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_v2z_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_v2z_s1_agent_rdata_fifo_src_data),                        //        in.data
		.in_valid          (ogpu_raster_unit_v2z_s1_agent_rdata_fifo_src_valid),                       //          .valid
		.in_ready          (ogpu_raster_unit_v2z_s1_agent_rdata_fifo_src_ready),                       //          .ready
		.out_data          (ogpu_raster_unit_v2z_s1_agent_rdata_fifo_out_data),                        //       out.data
		.out_valid         (ogpu_raster_unit_v2z_s1_agent_rdata_fifo_out_valid),                       //          .valid
		.out_ready         (ogpu_raster_unit_v2z_s1_agent_rdata_fifo_out_ready),                       //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_raster_unit_v2y_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_raster_unit_v2y_s1_agent_m0_address),                                 //              m0.address
		.m0_burstcount           (ogpu_raster_unit_v2y_s1_agent_m0_burstcount),                              //                .burstcount
		.m0_byteenable           (ogpu_raster_unit_v2y_s1_agent_m0_byteenable),                              //                .byteenable
		.m0_debugaccess          (ogpu_raster_unit_v2y_s1_agent_m0_debugaccess),                             //                .debugaccess
		.m0_lock                 (ogpu_raster_unit_v2y_s1_agent_m0_lock),                                    //                .lock
		.m0_readdata             (ogpu_raster_unit_v2y_s1_agent_m0_readdata),                                //                .readdata
		.m0_readdatavalid        (ogpu_raster_unit_v2y_s1_agent_m0_readdatavalid),                           //                .readdatavalid
		.m0_read                 (ogpu_raster_unit_v2y_s1_agent_m0_read),                                    //                .read
		.m0_waitrequest          (ogpu_raster_unit_v2y_s1_agent_m0_waitrequest),                             //                .waitrequest
		.m0_writedata            (ogpu_raster_unit_v2y_s1_agent_m0_writedata),                               //                .writedata
		.m0_write                (ogpu_raster_unit_v2y_s1_agent_m0_write),                                   //                .write
		.rp_endofpacket          (ogpu_raster_unit_v2y_s1_agent_rp_endofpacket),                             //              rp.endofpacket
		.rp_ready                (ogpu_raster_unit_v2y_s1_agent_rp_ready),                                   //                .ready
		.rp_valid                (ogpu_raster_unit_v2y_s1_agent_rp_valid),                                   //                .valid
		.rp_data                 (ogpu_raster_unit_v2y_s1_agent_rp_data),                                    //                .data
		.rp_startofpacket        (ogpu_raster_unit_v2y_s1_agent_rp_startofpacket),                           //                .startofpacket
		.cp_ready                (ogpu_raster_unit_v2y_s1_burst_adapter_source0_ready),                      //              cp.ready
		.cp_valid                (ogpu_raster_unit_v2y_s1_burst_adapter_source0_valid),                      //                .valid
		.cp_data                 (ogpu_raster_unit_v2y_s1_burst_adapter_source0_data),                       //                .data
		.cp_startofpacket        (ogpu_raster_unit_v2y_s1_burst_adapter_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (ogpu_raster_unit_v2y_s1_burst_adapter_source0_endofpacket),                //                .endofpacket
		.cp_channel              (ogpu_raster_unit_v2y_s1_burst_adapter_source0_channel),                    //                .channel
		.rf_sink_ready           (ogpu_raster_unit_v2y_s1_agent_rsp_fifo_out_ready),                         //         rf_sink.ready
		.rf_sink_valid           (ogpu_raster_unit_v2y_s1_agent_rsp_fifo_out_valid),                         //                .valid
		.rf_sink_startofpacket   (ogpu_raster_unit_v2y_s1_agent_rsp_fifo_out_startofpacket),                 //                .startofpacket
		.rf_sink_endofpacket     (ogpu_raster_unit_v2y_s1_agent_rsp_fifo_out_endofpacket),                   //                .endofpacket
		.rf_sink_data            (ogpu_raster_unit_v2y_s1_agent_rsp_fifo_out_data),                          //                .data
		.rf_source_ready         (ogpu_raster_unit_v2y_s1_agent_rf_source_ready),                            //       rf_source.ready
		.rf_source_valid         (ogpu_raster_unit_v2y_s1_agent_rf_source_valid),                            //                .valid
		.rf_source_startofpacket (ogpu_raster_unit_v2y_s1_agent_rf_source_startofpacket),                    //                .startofpacket
		.rf_source_endofpacket   (ogpu_raster_unit_v2y_s1_agent_rf_source_endofpacket),                      //                .endofpacket
		.rf_source_data          (ogpu_raster_unit_v2y_s1_agent_rf_source_data),                             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_raster_unit_v2y_s1_agent_rdata_fifo_src_ready),                       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_raster_unit_v2y_s1_agent_rdata_fifo_src_valid),                       //                .valid
		.rdata_fifo_src_data     (ogpu_raster_unit_v2y_s1_agent_rdata_fifo_src_data),                        //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_v2y_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_v2y_s1_agent_rf_source_data),                             //        in.data
		.in_valid          (ogpu_raster_unit_v2y_s1_agent_rf_source_valid),                            //          .valid
		.in_ready          (ogpu_raster_unit_v2y_s1_agent_rf_source_ready),                            //          .ready
		.in_startofpacket  (ogpu_raster_unit_v2y_s1_agent_rf_source_startofpacket),                    //          .startofpacket
		.in_endofpacket    (ogpu_raster_unit_v2y_s1_agent_rf_source_endofpacket),                      //          .endofpacket
		.out_data          (ogpu_raster_unit_v2y_s1_agent_rsp_fifo_out_data),                          //       out.data
		.out_valid         (ogpu_raster_unit_v2y_s1_agent_rsp_fifo_out_valid),                         //          .valid
		.out_ready         (ogpu_raster_unit_v2y_s1_agent_rsp_fifo_out_ready),                         //          .ready
		.out_startofpacket (ogpu_raster_unit_v2y_s1_agent_rsp_fifo_out_startofpacket),                 //          .startofpacket
		.out_endofpacket   (ogpu_raster_unit_v2y_s1_agent_rsp_fifo_out_endofpacket),                   //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_v2y_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_v2y_s1_agent_rdata_fifo_src_data),                        //        in.data
		.in_valid          (ogpu_raster_unit_v2y_s1_agent_rdata_fifo_src_valid),                       //          .valid
		.in_ready          (ogpu_raster_unit_v2y_s1_agent_rdata_fifo_src_ready),                       //          .ready
		.out_data          (ogpu_raster_unit_v2y_s1_agent_rdata_fifo_out_data),                        //       out.data
		.out_valid         (ogpu_raster_unit_v2y_s1_agent_rdata_fifo_out_valid),                       //          .valid
		.out_ready         (ogpu_raster_unit_v2y_s1_agent_rdata_fifo_out_ready),                       //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_raster_unit_v2x_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_raster_unit_v2x_s1_agent_m0_address),                                 //              m0.address
		.m0_burstcount           (ogpu_raster_unit_v2x_s1_agent_m0_burstcount),                              //                .burstcount
		.m0_byteenable           (ogpu_raster_unit_v2x_s1_agent_m0_byteenable),                              //                .byteenable
		.m0_debugaccess          (ogpu_raster_unit_v2x_s1_agent_m0_debugaccess),                             //                .debugaccess
		.m0_lock                 (ogpu_raster_unit_v2x_s1_agent_m0_lock),                                    //                .lock
		.m0_readdata             (ogpu_raster_unit_v2x_s1_agent_m0_readdata),                                //                .readdata
		.m0_readdatavalid        (ogpu_raster_unit_v2x_s1_agent_m0_readdatavalid),                           //                .readdatavalid
		.m0_read                 (ogpu_raster_unit_v2x_s1_agent_m0_read),                                    //                .read
		.m0_waitrequest          (ogpu_raster_unit_v2x_s1_agent_m0_waitrequest),                             //                .waitrequest
		.m0_writedata            (ogpu_raster_unit_v2x_s1_agent_m0_writedata),                               //                .writedata
		.m0_write                (ogpu_raster_unit_v2x_s1_agent_m0_write),                                   //                .write
		.rp_endofpacket          (ogpu_raster_unit_v2x_s1_agent_rp_endofpacket),                             //              rp.endofpacket
		.rp_ready                (ogpu_raster_unit_v2x_s1_agent_rp_ready),                                   //                .ready
		.rp_valid                (ogpu_raster_unit_v2x_s1_agent_rp_valid),                                   //                .valid
		.rp_data                 (ogpu_raster_unit_v2x_s1_agent_rp_data),                                    //                .data
		.rp_startofpacket        (ogpu_raster_unit_v2x_s1_agent_rp_startofpacket),                           //                .startofpacket
		.cp_ready                (ogpu_raster_unit_v2x_s1_burst_adapter_source0_ready),                      //              cp.ready
		.cp_valid                (ogpu_raster_unit_v2x_s1_burst_adapter_source0_valid),                      //                .valid
		.cp_data                 (ogpu_raster_unit_v2x_s1_burst_adapter_source0_data),                       //                .data
		.cp_startofpacket        (ogpu_raster_unit_v2x_s1_burst_adapter_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (ogpu_raster_unit_v2x_s1_burst_adapter_source0_endofpacket),                //                .endofpacket
		.cp_channel              (ogpu_raster_unit_v2x_s1_burst_adapter_source0_channel),                    //                .channel
		.rf_sink_ready           (ogpu_raster_unit_v2x_s1_agent_rsp_fifo_out_ready),                         //         rf_sink.ready
		.rf_sink_valid           (ogpu_raster_unit_v2x_s1_agent_rsp_fifo_out_valid),                         //                .valid
		.rf_sink_startofpacket   (ogpu_raster_unit_v2x_s1_agent_rsp_fifo_out_startofpacket),                 //                .startofpacket
		.rf_sink_endofpacket     (ogpu_raster_unit_v2x_s1_agent_rsp_fifo_out_endofpacket),                   //                .endofpacket
		.rf_sink_data            (ogpu_raster_unit_v2x_s1_agent_rsp_fifo_out_data),                          //                .data
		.rf_source_ready         (ogpu_raster_unit_v2x_s1_agent_rf_source_ready),                            //       rf_source.ready
		.rf_source_valid         (ogpu_raster_unit_v2x_s1_agent_rf_source_valid),                            //                .valid
		.rf_source_startofpacket (ogpu_raster_unit_v2x_s1_agent_rf_source_startofpacket),                    //                .startofpacket
		.rf_source_endofpacket   (ogpu_raster_unit_v2x_s1_agent_rf_source_endofpacket),                      //                .endofpacket
		.rf_source_data          (ogpu_raster_unit_v2x_s1_agent_rf_source_data),                             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_raster_unit_v2x_s1_agent_rdata_fifo_src_ready),                       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_raster_unit_v2x_s1_agent_rdata_fifo_src_valid),                       //                .valid
		.rdata_fifo_src_data     (ogpu_raster_unit_v2x_s1_agent_rdata_fifo_src_data),                        //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_v2x_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_v2x_s1_agent_rf_source_data),                             //        in.data
		.in_valid          (ogpu_raster_unit_v2x_s1_agent_rf_source_valid),                            //          .valid
		.in_ready          (ogpu_raster_unit_v2x_s1_agent_rf_source_ready),                            //          .ready
		.in_startofpacket  (ogpu_raster_unit_v2x_s1_agent_rf_source_startofpacket),                    //          .startofpacket
		.in_endofpacket    (ogpu_raster_unit_v2x_s1_agent_rf_source_endofpacket),                      //          .endofpacket
		.out_data          (ogpu_raster_unit_v2x_s1_agent_rsp_fifo_out_data),                          //       out.data
		.out_valid         (ogpu_raster_unit_v2x_s1_agent_rsp_fifo_out_valid),                         //          .valid
		.out_ready         (ogpu_raster_unit_v2x_s1_agent_rsp_fifo_out_ready),                         //          .ready
		.out_startofpacket (ogpu_raster_unit_v2x_s1_agent_rsp_fifo_out_startofpacket),                 //          .startofpacket
		.out_endofpacket   (ogpu_raster_unit_v2x_s1_agent_rsp_fifo_out_endofpacket),                   //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_v2x_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_v2x_s1_agent_rdata_fifo_src_data),                        //        in.data
		.in_valid          (ogpu_raster_unit_v2x_s1_agent_rdata_fifo_src_valid),                       //          .valid
		.in_ready          (ogpu_raster_unit_v2x_s1_agent_rdata_fifo_src_ready),                       //          .ready
		.out_data          (ogpu_raster_unit_v2x_s1_agent_rdata_fifo_out_data),                        //       out.data
		.out_valid         (ogpu_raster_unit_v2x_s1_agent_rdata_fifo_out_valid),                       //          .valid
		.out_ready         (ogpu_raster_unit_v2x_s1_agent_rdata_fifo_out_ready),                       //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_raster_unit_v1z_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_raster_unit_v1z_s1_agent_m0_address),                                 //              m0.address
		.m0_burstcount           (ogpu_raster_unit_v1z_s1_agent_m0_burstcount),                              //                .burstcount
		.m0_byteenable           (ogpu_raster_unit_v1z_s1_agent_m0_byteenable),                              //                .byteenable
		.m0_debugaccess          (ogpu_raster_unit_v1z_s1_agent_m0_debugaccess),                             //                .debugaccess
		.m0_lock                 (ogpu_raster_unit_v1z_s1_agent_m0_lock),                                    //                .lock
		.m0_readdata             (ogpu_raster_unit_v1z_s1_agent_m0_readdata),                                //                .readdata
		.m0_readdatavalid        (ogpu_raster_unit_v1z_s1_agent_m0_readdatavalid),                           //                .readdatavalid
		.m0_read                 (ogpu_raster_unit_v1z_s1_agent_m0_read),                                    //                .read
		.m0_waitrequest          (ogpu_raster_unit_v1z_s1_agent_m0_waitrequest),                             //                .waitrequest
		.m0_writedata            (ogpu_raster_unit_v1z_s1_agent_m0_writedata),                               //                .writedata
		.m0_write                (ogpu_raster_unit_v1z_s1_agent_m0_write),                                   //                .write
		.rp_endofpacket          (ogpu_raster_unit_v1z_s1_agent_rp_endofpacket),                             //              rp.endofpacket
		.rp_ready                (ogpu_raster_unit_v1z_s1_agent_rp_ready),                                   //                .ready
		.rp_valid                (ogpu_raster_unit_v1z_s1_agent_rp_valid),                                   //                .valid
		.rp_data                 (ogpu_raster_unit_v1z_s1_agent_rp_data),                                    //                .data
		.rp_startofpacket        (ogpu_raster_unit_v1z_s1_agent_rp_startofpacket),                           //                .startofpacket
		.cp_ready                (ogpu_raster_unit_v1z_s1_burst_adapter_source0_ready),                      //              cp.ready
		.cp_valid                (ogpu_raster_unit_v1z_s1_burst_adapter_source0_valid),                      //                .valid
		.cp_data                 (ogpu_raster_unit_v1z_s1_burst_adapter_source0_data),                       //                .data
		.cp_startofpacket        (ogpu_raster_unit_v1z_s1_burst_adapter_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (ogpu_raster_unit_v1z_s1_burst_adapter_source0_endofpacket),                //                .endofpacket
		.cp_channel              (ogpu_raster_unit_v1z_s1_burst_adapter_source0_channel),                    //                .channel
		.rf_sink_ready           (ogpu_raster_unit_v1z_s1_agent_rsp_fifo_out_ready),                         //         rf_sink.ready
		.rf_sink_valid           (ogpu_raster_unit_v1z_s1_agent_rsp_fifo_out_valid),                         //                .valid
		.rf_sink_startofpacket   (ogpu_raster_unit_v1z_s1_agent_rsp_fifo_out_startofpacket),                 //                .startofpacket
		.rf_sink_endofpacket     (ogpu_raster_unit_v1z_s1_agent_rsp_fifo_out_endofpacket),                   //                .endofpacket
		.rf_sink_data            (ogpu_raster_unit_v1z_s1_agent_rsp_fifo_out_data),                          //                .data
		.rf_source_ready         (ogpu_raster_unit_v1z_s1_agent_rf_source_ready),                            //       rf_source.ready
		.rf_source_valid         (ogpu_raster_unit_v1z_s1_agent_rf_source_valid),                            //                .valid
		.rf_source_startofpacket (ogpu_raster_unit_v1z_s1_agent_rf_source_startofpacket),                    //                .startofpacket
		.rf_source_endofpacket   (ogpu_raster_unit_v1z_s1_agent_rf_source_endofpacket),                      //                .endofpacket
		.rf_source_data          (ogpu_raster_unit_v1z_s1_agent_rf_source_data),                             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_raster_unit_v1z_s1_agent_rdata_fifo_src_ready),                       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_raster_unit_v1z_s1_agent_rdata_fifo_src_valid),                       //                .valid
		.rdata_fifo_src_data     (ogpu_raster_unit_v1z_s1_agent_rdata_fifo_src_data),                        //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_v1z_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_v1z_s1_agent_rf_source_data),                             //        in.data
		.in_valid          (ogpu_raster_unit_v1z_s1_agent_rf_source_valid),                            //          .valid
		.in_ready          (ogpu_raster_unit_v1z_s1_agent_rf_source_ready),                            //          .ready
		.in_startofpacket  (ogpu_raster_unit_v1z_s1_agent_rf_source_startofpacket),                    //          .startofpacket
		.in_endofpacket    (ogpu_raster_unit_v1z_s1_agent_rf_source_endofpacket),                      //          .endofpacket
		.out_data          (ogpu_raster_unit_v1z_s1_agent_rsp_fifo_out_data),                          //       out.data
		.out_valid         (ogpu_raster_unit_v1z_s1_agent_rsp_fifo_out_valid),                         //          .valid
		.out_ready         (ogpu_raster_unit_v1z_s1_agent_rsp_fifo_out_ready),                         //          .ready
		.out_startofpacket (ogpu_raster_unit_v1z_s1_agent_rsp_fifo_out_startofpacket),                 //          .startofpacket
		.out_endofpacket   (ogpu_raster_unit_v1z_s1_agent_rsp_fifo_out_endofpacket),                   //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_v1z_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_v1z_s1_agent_rdata_fifo_src_data),                        //        in.data
		.in_valid          (ogpu_raster_unit_v1z_s1_agent_rdata_fifo_src_valid),                       //          .valid
		.in_ready          (ogpu_raster_unit_v1z_s1_agent_rdata_fifo_src_ready),                       //          .ready
		.out_data          (ogpu_raster_unit_v1z_s1_agent_rdata_fifo_out_data),                        //       out.data
		.out_valid         (ogpu_raster_unit_v1z_s1_agent_rdata_fifo_out_valid),                       //          .valid
		.out_ready         (ogpu_raster_unit_v1z_s1_agent_rdata_fifo_out_ready),                       //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_raster_unit_v1y_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_raster_unit_v1y_s1_agent_m0_address),                                 //              m0.address
		.m0_burstcount           (ogpu_raster_unit_v1y_s1_agent_m0_burstcount),                              //                .burstcount
		.m0_byteenable           (ogpu_raster_unit_v1y_s1_agent_m0_byteenable),                              //                .byteenable
		.m0_debugaccess          (ogpu_raster_unit_v1y_s1_agent_m0_debugaccess),                             //                .debugaccess
		.m0_lock                 (ogpu_raster_unit_v1y_s1_agent_m0_lock),                                    //                .lock
		.m0_readdata             (ogpu_raster_unit_v1y_s1_agent_m0_readdata),                                //                .readdata
		.m0_readdatavalid        (ogpu_raster_unit_v1y_s1_agent_m0_readdatavalid),                           //                .readdatavalid
		.m0_read                 (ogpu_raster_unit_v1y_s1_agent_m0_read),                                    //                .read
		.m0_waitrequest          (ogpu_raster_unit_v1y_s1_agent_m0_waitrequest),                             //                .waitrequest
		.m0_writedata            (ogpu_raster_unit_v1y_s1_agent_m0_writedata),                               //                .writedata
		.m0_write                (ogpu_raster_unit_v1y_s1_agent_m0_write),                                   //                .write
		.rp_endofpacket          (ogpu_raster_unit_v1y_s1_agent_rp_endofpacket),                             //              rp.endofpacket
		.rp_ready                (ogpu_raster_unit_v1y_s1_agent_rp_ready),                                   //                .ready
		.rp_valid                (ogpu_raster_unit_v1y_s1_agent_rp_valid),                                   //                .valid
		.rp_data                 (ogpu_raster_unit_v1y_s1_agent_rp_data),                                    //                .data
		.rp_startofpacket        (ogpu_raster_unit_v1y_s1_agent_rp_startofpacket),                           //                .startofpacket
		.cp_ready                (ogpu_raster_unit_v1y_s1_burst_adapter_source0_ready),                      //              cp.ready
		.cp_valid                (ogpu_raster_unit_v1y_s1_burst_adapter_source0_valid),                      //                .valid
		.cp_data                 (ogpu_raster_unit_v1y_s1_burst_adapter_source0_data),                       //                .data
		.cp_startofpacket        (ogpu_raster_unit_v1y_s1_burst_adapter_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (ogpu_raster_unit_v1y_s1_burst_adapter_source0_endofpacket),                //                .endofpacket
		.cp_channel              (ogpu_raster_unit_v1y_s1_burst_adapter_source0_channel),                    //                .channel
		.rf_sink_ready           (ogpu_raster_unit_v1y_s1_agent_rsp_fifo_out_ready),                         //         rf_sink.ready
		.rf_sink_valid           (ogpu_raster_unit_v1y_s1_agent_rsp_fifo_out_valid),                         //                .valid
		.rf_sink_startofpacket   (ogpu_raster_unit_v1y_s1_agent_rsp_fifo_out_startofpacket),                 //                .startofpacket
		.rf_sink_endofpacket     (ogpu_raster_unit_v1y_s1_agent_rsp_fifo_out_endofpacket),                   //                .endofpacket
		.rf_sink_data            (ogpu_raster_unit_v1y_s1_agent_rsp_fifo_out_data),                          //                .data
		.rf_source_ready         (ogpu_raster_unit_v1y_s1_agent_rf_source_ready),                            //       rf_source.ready
		.rf_source_valid         (ogpu_raster_unit_v1y_s1_agent_rf_source_valid),                            //                .valid
		.rf_source_startofpacket (ogpu_raster_unit_v1y_s1_agent_rf_source_startofpacket),                    //                .startofpacket
		.rf_source_endofpacket   (ogpu_raster_unit_v1y_s1_agent_rf_source_endofpacket),                      //                .endofpacket
		.rf_source_data          (ogpu_raster_unit_v1y_s1_agent_rf_source_data),                             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_raster_unit_v1y_s1_agent_rdata_fifo_src_ready),                       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_raster_unit_v1y_s1_agent_rdata_fifo_src_valid),                       //                .valid
		.rdata_fifo_src_data     (ogpu_raster_unit_v1y_s1_agent_rdata_fifo_src_data),                        //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_v1y_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_v1y_s1_agent_rf_source_data),                             //        in.data
		.in_valid          (ogpu_raster_unit_v1y_s1_agent_rf_source_valid),                            //          .valid
		.in_ready          (ogpu_raster_unit_v1y_s1_agent_rf_source_ready),                            //          .ready
		.in_startofpacket  (ogpu_raster_unit_v1y_s1_agent_rf_source_startofpacket),                    //          .startofpacket
		.in_endofpacket    (ogpu_raster_unit_v1y_s1_agent_rf_source_endofpacket),                      //          .endofpacket
		.out_data          (ogpu_raster_unit_v1y_s1_agent_rsp_fifo_out_data),                          //       out.data
		.out_valid         (ogpu_raster_unit_v1y_s1_agent_rsp_fifo_out_valid),                         //          .valid
		.out_ready         (ogpu_raster_unit_v1y_s1_agent_rsp_fifo_out_ready),                         //          .ready
		.out_startofpacket (ogpu_raster_unit_v1y_s1_agent_rsp_fifo_out_startofpacket),                 //          .startofpacket
		.out_endofpacket   (ogpu_raster_unit_v1y_s1_agent_rsp_fifo_out_endofpacket),                   //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_v1y_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_v1y_s1_agent_rdata_fifo_src_data),                        //        in.data
		.in_valid          (ogpu_raster_unit_v1y_s1_agent_rdata_fifo_src_valid),                       //          .valid
		.in_ready          (ogpu_raster_unit_v1y_s1_agent_rdata_fifo_src_ready),                       //          .ready
		.out_data          (ogpu_raster_unit_v1y_s1_agent_rdata_fifo_out_data),                        //       out.data
		.out_valid         (ogpu_raster_unit_v1y_s1_agent_rdata_fifo_out_valid),                       //          .valid
		.out_ready         (ogpu_raster_unit_v1y_s1_agent_rdata_fifo_out_ready),                       //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_raster_unit_v1x_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_raster_unit_v1x_s1_agent_m0_address),                                 //              m0.address
		.m0_burstcount           (ogpu_raster_unit_v1x_s1_agent_m0_burstcount),                              //                .burstcount
		.m0_byteenable           (ogpu_raster_unit_v1x_s1_agent_m0_byteenable),                              //                .byteenable
		.m0_debugaccess          (ogpu_raster_unit_v1x_s1_agent_m0_debugaccess),                             //                .debugaccess
		.m0_lock                 (ogpu_raster_unit_v1x_s1_agent_m0_lock),                                    //                .lock
		.m0_readdata             (ogpu_raster_unit_v1x_s1_agent_m0_readdata),                                //                .readdata
		.m0_readdatavalid        (ogpu_raster_unit_v1x_s1_agent_m0_readdatavalid),                           //                .readdatavalid
		.m0_read                 (ogpu_raster_unit_v1x_s1_agent_m0_read),                                    //                .read
		.m0_waitrequest          (ogpu_raster_unit_v1x_s1_agent_m0_waitrequest),                             //                .waitrequest
		.m0_writedata            (ogpu_raster_unit_v1x_s1_agent_m0_writedata),                               //                .writedata
		.m0_write                (ogpu_raster_unit_v1x_s1_agent_m0_write),                                   //                .write
		.rp_endofpacket          (ogpu_raster_unit_v1x_s1_agent_rp_endofpacket),                             //              rp.endofpacket
		.rp_ready                (ogpu_raster_unit_v1x_s1_agent_rp_ready),                                   //                .ready
		.rp_valid                (ogpu_raster_unit_v1x_s1_agent_rp_valid),                                   //                .valid
		.rp_data                 (ogpu_raster_unit_v1x_s1_agent_rp_data),                                    //                .data
		.rp_startofpacket        (ogpu_raster_unit_v1x_s1_agent_rp_startofpacket),                           //                .startofpacket
		.cp_ready                (ogpu_raster_unit_v1x_s1_burst_adapter_source0_ready),                      //              cp.ready
		.cp_valid                (ogpu_raster_unit_v1x_s1_burst_adapter_source0_valid),                      //                .valid
		.cp_data                 (ogpu_raster_unit_v1x_s1_burst_adapter_source0_data),                       //                .data
		.cp_startofpacket        (ogpu_raster_unit_v1x_s1_burst_adapter_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (ogpu_raster_unit_v1x_s1_burst_adapter_source0_endofpacket),                //                .endofpacket
		.cp_channel              (ogpu_raster_unit_v1x_s1_burst_adapter_source0_channel),                    //                .channel
		.rf_sink_ready           (ogpu_raster_unit_v1x_s1_agent_rsp_fifo_out_ready),                         //         rf_sink.ready
		.rf_sink_valid           (ogpu_raster_unit_v1x_s1_agent_rsp_fifo_out_valid),                         //                .valid
		.rf_sink_startofpacket   (ogpu_raster_unit_v1x_s1_agent_rsp_fifo_out_startofpacket),                 //                .startofpacket
		.rf_sink_endofpacket     (ogpu_raster_unit_v1x_s1_agent_rsp_fifo_out_endofpacket),                   //                .endofpacket
		.rf_sink_data            (ogpu_raster_unit_v1x_s1_agent_rsp_fifo_out_data),                          //                .data
		.rf_source_ready         (ogpu_raster_unit_v1x_s1_agent_rf_source_ready),                            //       rf_source.ready
		.rf_source_valid         (ogpu_raster_unit_v1x_s1_agent_rf_source_valid),                            //                .valid
		.rf_source_startofpacket (ogpu_raster_unit_v1x_s1_agent_rf_source_startofpacket),                    //                .startofpacket
		.rf_source_endofpacket   (ogpu_raster_unit_v1x_s1_agent_rf_source_endofpacket),                      //                .endofpacket
		.rf_source_data          (ogpu_raster_unit_v1x_s1_agent_rf_source_data),                             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_raster_unit_v1x_s1_agent_rdata_fifo_src_ready),                       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_raster_unit_v1x_s1_agent_rdata_fifo_src_valid),                       //                .valid
		.rdata_fifo_src_data     (ogpu_raster_unit_v1x_s1_agent_rdata_fifo_src_data),                        //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_v1x_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_v1x_s1_agent_rf_source_data),                             //        in.data
		.in_valid          (ogpu_raster_unit_v1x_s1_agent_rf_source_valid),                            //          .valid
		.in_ready          (ogpu_raster_unit_v1x_s1_agent_rf_source_ready),                            //          .ready
		.in_startofpacket  (ogpu_raster_unit_v1x_s1_agent_rf_source_startofpacket),                    //          .startofpacket
		.in_endofpacket    (ogpu_raster_unit_v1x_s1_agent_rf_source_endofpacket),                      //          .endofpacket
		.out_data          (ogpu_raster_unit_v1x_s1_agent_rsp_fifo_out_data),                          //       out.data
		.out_valid         (ogpu_raster_unit_v1x_s1_agent_rsp_fifo_out_valid),                         //          .valid
		.out_ready         (ogpu_raster_unit_v1x_s1_agent_rsp_fifo_out_ready),                         //          .ready
		.out_startofpacket (ogpu_raster_unit_v1x_s1_agent_rsp_fifo_out_startofpacket),                 //          .startofpacket
		.out_endofpacket   (ogpu_raster_unit_v1x_s1_agent_rsp_fifo_out_endofpacket),                   //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_v1x_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_v1x_s1_agent_rdata_fifo_src_data),                        //        in.data
		.in_valid          (ogpu_raster_unit_v1x_s1_agent_rdata_fifo_src_valid),                       //          .valid
		.in_ready          (ogpu_raster_unit_v1x_s1_agent_rdata_fifo_src_ready),                       //          .ready
		.out_data          (ogpu_raster_unit_v1x_s1_agent_rdata_fifo_out_data),                        //       out.data
		.out_valid         (ogpu_raster_unit_v1x_s1_agent_rdata_fifo_out_valid),                       //          .valid
		.out_ready         (ogpu_raster_unit_v1x_s1_agent_rdata_fifo_out_ready),                       //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_raster_unit_v0z_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_raster_unit_v0z_s1_agent_m0_address),                                 //              m0.address
		.m0_burstcount           (ogpu_raster_unit_v0z_s1_agent_m0_burstcount),                              //                .burstcount
		.m0_byteenable           (ogpu_raster_unit_v0z_s1_agent_m0_byteenable),                              //                .byteenable
		.m0_debugaccess          (ogpu_raster_unit_v0z_s1_agent_m0_debugaccess),                             //                .debugaccess
		.m0_lock                 (ogpu_raster_unit_v0z_s1_agent_m0_lock),                                    //                .lock
		.m0_readdata             (ogpu_raster_unit_v0z_s1_agent_m0_readdata),                                //                .readdata
		.m0_readdatavalid        (ogpu_raster_unit_v0z_s1_agent_m0_readdatavalid),                           //                .readdatavalid
		.m0_read                 (ogpu_raster_unit_v0z_s1_agent_m0_read),                                    //                .read
		.m0_waitrequest          (ogpu_raster_unit_v0z_s1_agent_m0_waitrequest),                             //                .waitrequest
		.m0_writedata            (ogpu_raster_unit_v0z_s1_agent_m0_writedata),                               //                .writedata
		.m0_write                (ogpu_raster_unit_v0z_s1_agent_m0_write),                                   //                .write
		.rp_endofpacket          (ogpu_raster_unit_v0z_s1_agent_rp_endofpacket),                             //              rp.endofpacket
		.rp_ready                (ogpu_raster_unit_v0z_s1_agent_rp_ready),                                   //                .ready
		.rp_valid                (ogpu_raster_unit_v0z_s1_agent_rp_valid),                                   //                .valid
		.rp_data                 (ogpu_raster_unit_v0z_s1_agent_rp_data),                                    //                .data
		.rp_startofpacket        (ogpu_raster_unit_v0z_s1_agent_rp_startofpacket),                           //                .startofpacket
		.cp_ready                (ogpu_raster_unit_v0z_s1_burst_adapter_source0_ready),                      //              cp.ready
		.cp_valid                (ogpu_raster_unit_v0z_s1_burst_adapter_source0_valid),                      //                .valid
		.cp_data                 (ogpu_raster_unit_v0z_s1_burst_adapter_source0_data),                       //                .data
		.cp_startofpacket        (ogpu_raster_unit_v0z_s1_burst_adapter_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (ogpu_raster_unit_v0z_s1_burst_adapter_source0_endofpacket),                //                .endofpacket
		.cp_channel              (ogpu_raster_unit_v0z_s1_burst_adapter_source0_channel),                    //                .channel
		.rf_sink_ready           (ogpu_raster_unit_v0z_s1_agent_rsp_fifo_out_ready),                         //         rf_sink.ready
		.rf_sink_valid           (ogpu_raster_unit_v0z_s1_agent_rsp_fifo_out_valid),                         //                .valid
		.rf_sink_startofpacket   (ogpu_raster_unit_v0z_s1_agent_rsp_fifo_out_startofpacket),                 //                .startofpacket
		.rf_sink_endofpacket     (ogpu_raster_unit_v0z_s1_agent_rsp_fifo_out_endofpacket),                   //                .endofpacket
		.rf_sink_data            (ogpu_raster_unit_v0z_s1_agent_rsp_fifo_out_data),                          //                .data
		.rf_source_ready         (ogpu_raster_unit_v0z_s1_agent_rf_source_ready),                            //       rf_source.ready
		.rf_source_valid         (ogpu_raster_unit_v0z_s1_agent_rf_source_valid),                            //                .valid
		.rf_source_startofpacket (ogpu_raster_unit_v0z_s1_agent_rf_source_startofpacket),                    //                .startofpacket
		.rf_source_endofpacket   (ogpu_raster_unit_v0z_s1_agent_rf_source_endofpacket),                      //                .endofpacket
		.rf_source_data          (ogpu_raster_unit_v0z_s1_agent_rf_source_data),                             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_raster_unit_v0z_s1_agent_rdata_fifo_src_ready),                       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_raster_unit_v0z_s1_agent_rdata_fifo_src_valid),                       //                .valid
		.rdata_fifo_src_data     (ogpu_raster_unit_v0z_s1_agent_rdata_fifo_src_data),                        //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_v0z_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_v0z_s1_agent_rf_source_data),                             //        in.data
		.in_valid          (ogpu_raster_unit_v0z_s1_agent_rf_source_valid),                            //          .valid
		.in_ready          (ogpu_raster_unit_v0z_s1_agent_rf_source_ready),                            //          .ready
		.in_startofpacket  (ogpu_raster_unit_v0z_s1_agent_rf_source_startofpacket),                    //          .startofpacket
		.in_endofpacket    (ogpu_raster_unit_v0z_s1_agent_rf_source_endofpacket),                      //          .endofpacket
		.out_data          (ogpu_raster_unit_v0z_s1_agent_rsp_fifo_out_data),                          //       out.data
		.out_valid         (ogpu_raster_unit_v0z_s1_agent_rsp_fifo_out_valid),                         //          .valid
		.out_ready         (ogpu_raster_unit_v0z_s1_agent_rsp_fifo_out_ready),                         //          .ready
		.out_startofpacket (ogpu_raster_unit_v0z_s1_agent_rsp_fifo_out_startofpacket),                 //          .startofpacket
		.out_endofpacket   (ogpu_raster_unit_v0z_s1_agent_rsp_fifo_out_endofpacket),                   //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_v0z_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_v0z_s1_agent_rdata_fifo_src_data),                        //        in.data
		.in_valid          (ogpu_raster_unit_v0z_s1_agent_rdata_fifo_src_valid),                       //          .valid
		.in_ready          (ogpu_raster_unit_v0z_s1_agent_rdata_fifo_src_ready),                       //          .ready
		.out_data          (ogpu_raster_unit_v0z_s1_agent_rdata_fifo_out_data),                        //       out.data
		.out_valid         (ogpu_raster_unit_v0z_s1_agent_rdata_fifo_out_valid),                       //          .valid
		.out_ready         (ogpu_raster_unit_v0z_s1_agent_rdata_fifo_out_ready),                       //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_raster_unit_v0y_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_raster_unit_v0y_s1_agent_m0_address),                                 //              m0.address
		.m0_burstcount           (ogpu_raster_unit_v0y_s1_agent_m0_burstcount),                              //                .burstcount
		.m0_byteenable           (ogpu_raster_unit_v0y_s1_agent_m0_byteenable),                              //                .byteenable
		.m0_debugaccess          (ogpu_raster_unit_v0y_s1_agent_m0_debugaccess),                             //                .debugaccess
		.m0_lock                 (ogpu_raster_unit_v0y_s1_agent_m0_lock),                                    //                .lock
		.m0_readdata             (ogpu_raster_unit_v0y_s1_agent_m0_readdata),                                //                .readdata
		.m0_readdatavalid        (ogpu_raster_unit_v0y_s1_agent_m0_readdatavalid),                           //                .readdatavalid
		.m0_read                 (ogpu_raster_unit_v0y_s1_agent_m0_read),                                    //                .read
		.m0_waitrequest          (ogpu_raster_unit_v0y_s1_agent_m0_waitrequest),                             //                .waitrequest
		.m0_writedata            (ogpu_raster_unit_v0y_s1_agent_m0_writedata),                               //                .writedata
		.m0_write                (ogpu_raster_unit_v0y_s1_agent_m0_write),                                   //                .write
		.rp_endofpacket          (ogpu_raster_unit_v0y_s1_agent_rp_endofpacket),                             //              rp.endofpacket
		.rp_ready                (ogpu_raster_unit_v0y_s1_agent_rp_ready),                                   //                .ready
		.rp_valid                (ogpu_raster_unit_v0y_s1_agent_rp_valid),                                   //                .valid
		.rp_data                 (ogpu_raster_unit_v0y_s1_agent_rp_data),                                    //                .data
		.rp_startofpacket        (ogpu_raster_unit_v0y_s1_agent_rp_startofpacket),                           //                .startofpacket
		.cp_ready                (ogpu_raster_unit_v0y_s1_burst_adapter_source0_ready),                      //              cp.ready
		.cp_valid                (ogpu_raster_unit_v0y_s1_burst_adapter_source0_valid),                      //                .valid
		.cp_data                 (ogpu_raster_unit_v0y_s1_burst_adapter_source0_data),                       //                .data
		.cp_startofpacket        (ogpu_raster_unit_v0y_s1_burst_adapter_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (ogpu_raster_unit_v0y_s1_burst_adapter_source0_endofpacket),                //                .endofpacket
		.cp_channel              (ogpu_raster_unit_v0y_s1_burst_adapter_source0_channel),                    //                .channel
		.rf_sink_ready           (ogpu_raster_unit_v0y_s1_agent_rsp_fifo_out_ready),                         //         rf_sink.ready
		.rf_sink_valid           (ogpu_raster_unit_v0y_s1_agent_rsp_fifo_out_valid),                         //                .valid
		.rf_sink_startofpacket   (ogpu_raster_unit_v0y_s1_agent_rsp_fifo_out_startofpacket),                 //                .startofpacket
		.rf_sink_endofpacket     (ogpu_raster_unit_v0y_s1_agent_rsp_fifo_out_endofpacket),                   //                .endofpacket
		.rf_sink_data            (ogpu_raster_unit_v0y_s1_agent_rsp_fifo_out_data),                          //                .data
		.rf_source_ready         (ogpu_raster_unit_v0y_s1_agent_rf_source_ready),                            //       rf_source.ready
		.rf_source_valid         (ogpu_raster_unit_v0y_s1_agent_rf_source_valid),                            //                .valid
		.rf_source_startofpacket (ogpu_raster_unit_v0y_s1_agent_rf_source_startofpacket),                    //                .startofpacket
		.rf_source_endofpacket   (ogpu_raster_unit_v0y_s1_agent_rf_source_endofpacket),                      //                .endofpacket
		.rf_source_data          (ogpu_raster_unit_v0y_s1_agent_rf_source_data),                             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_raster_unit_v0y_s1_agent_rdata_fifo_src_ready),                       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_raster_unit_v0y_s1_agent_rdata_fifo_src_valid),                       //                .valid
		.rdata_fifo_src_data     (ogpu_raster_unit_v0y_s1_agent_rdata_fifo_src_data),                        //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_v0y_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_v0y_s1_agent_rf_source_data),                             //        in.data
		.in_valid          (ogpu_raster_unit_v0y_s1_agent_rf_source_valid),                            //          .valid
		.in_ready          (ogpu_raster_unit_v0y_s1_agent_rf_source_ready),                            //          .ready
		.in_startofpacket  (ogpu_raster_unit_v0y_s1_agent_rf_source_startofpacket),                    //          .startofpacket
		.in_endofpacket    (ogpu_raster_unit_v0y_s1_agent_rf_source_endofpacket),                      //          .endofpacket
		.out_data          (ogpu_raster_unit_v0y_s1_agent_rsp_fifo_out_data),                          //       out.data
		.out_valid         (ogpu_raster_unit_v0y_s1_agent_rsp_fifo_out_valid),                         //          .valid
		.out_ready         (ogpu_raster_unit_v0y_s1_agent_rsp_fifo_out_ready),                         //          .ready
		.out_startofpacket (ogpu_raster_unit_v0y_s1_agent_rsp_fifo_out_startofpacket),                 //          .startofpacket
		.out_endofpacket   (ogpu_raster_unit_v0y_s1_agent_rsp_fifo_out_endofpacket),                   //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_v0y_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_v0y_s1_agent_rdata_fifo_src_data),                        //        in.data
		.in_valid          (ogpu_raster_unit_v0y_s1_agent_rdata_fifo_src_valid),                       //          .valid
		.in_ready          (ogpu_raster_unit_v0y_s1_agent_rdata_fifo_src_ready),                       //          .ready
		.out_data          (ogpu_raster_unit_v0y_s1_agent_rdata_fifo_out_data),                        //       out.data
		.out_valid         (ogpu_raster_unit_v0y_s1_agent_rdata_fifo_out_valid),                       //          .valid
		.out_ready         (ogpu_raster_unit_v0y_s1_agent_rdata_fifo_out_ready),                       //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_raster_unit_v0x_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_raster_unit_v0x_s1_agent_m0_address),                                 //              m0.address
		.m0_burstcount           (ogpu_raster_unit_v0x_s1_agent_m0_burstcount),                              //                .burstcount
		.m0_byteenable           (ogpu_raster_unit_v0x_s1_agent_m0_byteenable),                              //                .byteenable
		.m0_debugaccess          (ogpu_raster_unit_v0x_s1_agent_m0_debugaccess),                             //                .debugaccess
		.m0_lock                 (ogpu_raster_unit_v0x_s1_agent_m0_lock),                                    //                .lock
		.m0_readdata             (ogpu_raster_unit_v0x_s1_agent_m0_readdata),                                //                .readdata
		.m0_readdatavalid        (ogpu_raster_unit_v0x_s1_agent_m0_readdatavalid),                           //                .readdatavalid
		.m0_read                 (ogpu_raster_unit_v0x_s1_agent_m0_read),                                    //                .read
		.m0_waitrequest          (ogpu_raster_unit_v0x_s1_agent_m0_waitrequest),                             //                .waitrequest
		.m0_writedata            (ogpu_raster_unit_v0x_s1_agent_m0_writedata),                               //                .writedata
		.m0_write                (ogpu_raster_unit_v0x_s1_agent_m0_write),                                   //                .write
		.rp_endofpacket          (ogpu_raster_unit_v0x_s1_agent_rp_endofpacket),                             //              rp.endofpacket
		.rp_ready                (ogpu_raster_unit_v0x_s1_agent_rp_ready),                                   //                .ready
		.rp_valid                (ogpu_raster_unit_v0x_s1_agent_rp_valid),                                   //                .valid
		.rp_data                 (ogpu_raster_unit_v0x_s1_agent_rp_data),                                    //                .data
		.rp_startofpacket        (ogpu_raster_unit_v0x_s1_agent_rp_startofpacket),                           //                .startofpacket
		.cp_ready                (ogpu_raster_unit_v0x_s1_burst_adapter_source0_ready),                      //              cp.ready
		.cp_valid                (ogpu_raster_unit_v0x_s1_burst_adapter_source0_valid),                      //                .valid
		.cp_data                 (ogpu_raster_unit_v0x_s1_burst_adapter_source0_data),                       //                .data
		.cp_startofpacket        (ogpu_raster_unit_v0x_s1_burst_adapter_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (ogpu_raster_unit_v0x_s1_burst_adapter_source0_endofpacket),                //                .endofpacket
		.cp_channel              (ogpu_raster_unit_v0x_s1_burst_adapter_source0_channel),                    //                .channel
		.rf_sink_ready           (ogpu_raster_unit_v0x_s1_agent_rsp_fifo_out_ready),                         //         rf_sink.ready
		.rf_sink_valid           (ogpu_raster_unit_v0x_s1_agent_rsp_fifo_out_valid),                         //                .valid
		.rf_sink_startofpacket   (ogpu_raster_unit_v0x_s1_agent_rsp_fifo_out_startofpacket),                 //                .startofpacket
		.rf_sink_endofpacket     (ogpu_raster_unit_v0x_s1_agent_rsp_fifo_out_endofpacket),                   //                .endofpacket
		.rf_sink_data            (ogpu_raster_unit_v0x_s1_agent_rsp_fifo_out_data),                          //                .data
		.rf_source_ready         (ogpu_raster_unit_v0x_s1_agent_rf_source_ready),                            //       rf_source.ready
		.rf_source_valid         (ogpu_raster_unit_v0x_s1_agent_rf_source_valid),                            //                .valid
		.rf_source_startofpacket (ogpu_raster_unit_v0x_s1_agent_rf_source_startofpacket),                    //                .startofpacket
		.rf_source_endofpacket   (ogpu_raster_unit_v0x_s1_agent_rf_source_endofpacket),                      //                .endofpacket
		.rf_source_data          (ogpu_raster_unit_v0x_s1_agent_rf_source_data),                             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_raster_unit_v0x_s1_agent_rdata_fifo_src_ready),                       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_raster_unit_v0x_s1_agent_rdata_fifo_src_valid),                       //                .valid
		.rdata_fifo_src_data     (ogpu_raster_unit_v0x_s1_agent_rdata_fifo_src_data),                        //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_v0x_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_v0x_s1_agent_rf_source_data),                             //        in.data
		.in_valid          (ogpu_raster_unit_v0x_s1_agent_rf_source_valid),                            //          .valid
		.in_ready          (ogpu_raster_unit_v0x_s1_agent_rf_source_ready),                            //          .ready
		.in_startofpacket  (ogpu_raster_unit_v0x_s1_agent_rf_source_startofpacket),                    //          .startofpacket
		.in_endofpacket    (ogpu_raster_unit_v0x_s1_agent_rf_source_endofpacket),                      //          .endofpacket
		.out_data          (ogpu_raster_unit_v0x_s1_agent_rsp_fifo_out_data),                          //       out.data
		.out_valid         (ogpu_raster_unit_v0x_s1_agent_rsp_fifo_out_valid),                         //          .valid
		.out_ready         (ogpu_raster_unit_v0x_s1_agent_rsp_fifo_out_ready),                         //          .ready
		.out_startofpacket (ogpu_raster_unit_v0x_s1_agent_rsp_fifo_out_startofpacket),                 //          .startofpacket
		.out_endofpacket   (ogpu_raster_unit_v0x_s1_agent_rsp_fifo_out_endofpacket),                   //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_raster_unit_v0x_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_raster_unit_v0x_s1_agent_rdata_fifo_src_data),                        //        in.data
		.in_valid          (ogpu_raster_unit_v0x_s1_agent_rdata_fifo_src_valid),                       //          .valid
		.in_ready          (ogpu_raster_unit_v0x_s1_agent_rdata_fifo_src_ready),                       //          .ready
		.out_data          (ogpu_raster_unit_v0x_s1_agent_rdata_fifo_out_data),                        //       out.data
		.out_valid         (ogpu_raster_unit_v0x_s1_agent_rdata_fifo_out_valid),                       //          .valid
		.out_ready         (ogpu_raster_unit_v0x_s1_agent_rdata_fifo_out_ready),                       //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_quad_store_req_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_quad_store_req_s1_agent_m0_address),                                  //              m0.address
		.m0_burstcount           (ogpu_quad_store_req_s1_agent_m0_burstcount),                               //                .burstcount
		.m0_byteenable           (ogpu_quad_store_req_s1_agent_m0_byteenable),                               //                .byteenable
		.m0_debugaccess          (ogpu_quad_store_req_s1_agent_m0_debugaccess),                              //                .debugaccess
		.m0_lock                 (ogpu_quad_store_req_s1_agent_m0_lock),                                     //                .lock
		.m0_readdata             (ogpu_quad_store_req_s1_agent_m0_readdata),                                 //                .readdata
		.m0_readdatavalid        (ogpu_quad_store_req_s1_agent_m0_readdatavalid),                            //                .readdatavalid
		.m0_read                 (ogpu_quad_store_req_s1_agent_m0_read),                                     //                .read
		.m0_waitrequest          (ogpu_quad_store_req_s1_agent_m0_waitrequest),                              //                .waitrequest
		.m0_writedata            (ogpu_quad_store_req_s1_agent_m0_writedata),                                //                .writedata
		.m0_write                (ogpu_quad_store_req_s1_agent_m0_write),                                    //                .write
		.rp_endofpacket          (ogpu_quad_store_req_s1_agent_rp_endofpacket),                              //              rp.endofpacket
		.rp_ready                (ogpu_quad_store_req_s1_agent_rp_ready),                                    //                .ready
		.rp_valid                (ogpu_quad_store_req_s1_agent_rp_valid),                                    //                .valid
		.rp_data                 (ogpu_quad_store_req_s1_agent_rp_data),                                     //                .data
		.rp_startofpacket        (ogpu_quad_store_req_s1_agent_rp_startofpacket),                            //                .startofpacket
		.cp_ready                (ogpu_quad_store_req_s1_burst_adapter_source0_ready),                       //              cp.ready
		.cp_valid                (ogpu_quad_store_req_s1_burst_adapter_source0_valid),                       //                .valid
		.cp_data                 (ogpu_quad_store_req_s1_burst_adapter_source0_data),                        //                .data
		.cp_startofpacket        (ogpu_quad_store_req_s1_burst_adapter_source0_startofpacket),               //                .startofpacket
		.cp_endofpacket          (ogpu_quad_store_req_s1_burst_adapter_source0_endofpacket),                 //                .endofpacket
		.cp_channel              (ogpu_quad_store_req_s1_burst_adapter_source0_channel),                     //                .channel
		.rf_sink_ready           (ogpu_quad_store_req_s1_agent_rsp_fifo_out_ready),                          //         rf_sink.ready
		.rf_sink_valid           (ogpu_quad_store_req_s1_agent_rsp_fifo_out_valid),                          //                .valid
		.rf_sink_startofpacket   (ogpu_quad_store_req_s1_agent_rsp_fifo_out_startofpacket),                  //                .startofpacket
		.rf_sink_endofpacket     (ogpu_quad_store_req_s1_agent_rsp_fifo_out_endofpacket),                    //                .endofpacket
		.rf_sink_data            (ogpu_quad_store_req_s1_agent_rsp_fifo_out_data),                           //                .data
		.rf_source_ready         (ogpu_quad_store_req_s1_agent_rf_source_ready),                             //       rf_source.ready
		.rf_source_valid         (ogpu_quad_store_req_s1_agent_rf_source_valid),                             //                .valid
		.rf_source_startofpacket (ogpu_quad_store_req_s1_agent_rf_source_startofpacket),                     //                .startofpacket
		.rf_source_endofpacket   (ogpu_quad_store_req_s1_agent_rf_source_endofpacket),                       //                .endofpacket
		.rf_source_data          (ogpu_quad_store_req_s1_agent_rf_source_data),                              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_quad_store_req_s1_agent_rdata_fifo_src_ready),                        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_quad_store_req_s1_agent_rdata_fifo_src_valid),                        //                .valid
		.rdata_fifo_src_data     (ogpu_quad_store_req_s1_agent_rdata_fifo_src_data),                         //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_quad_store_req_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_quad_store_req_s1_agent_rf_source_data),                              //        in.data
		.in_valid          (ogpu_quad_store_req_s1_agent_rf_source_valid),                             //          .valid
		.in_ready          (ogpu_quad_store_req_s1_agent_rf_source_ready),                             //          .ready
		.in_startofpacket  (ogpu_quad_store_req_s1_agent_rf_source_startofpacket),                     //          .startofpacket
		.in_endofpacket    (ogpu_quad_store_req_s1_agent_rf_source_endofpacket),                       //          .endofpacket
		.out_data          (ogpu_quad_store_req_s1_agent_rsp_fifo_out_data),                           //       out.data
		.out_valid         (ogpu_quad_store_req_s1_agent_rsp_fifo_out_valid),                          //          .valid
		.out_ready         (ogpu_quad_store_req_s1_agent_rsp_fifo_out_ready),                          //          .ready
		.out_startofpacket (ogpu_quad_store_req_s1_agent_rsp_fifo_out_startofpacket),                  //          .startofpacket
		.out_endofpacket   (ogpu_quad_store_req_s1_agent_rsp_fifo_out_endofpacket),                    //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_quad_store_req_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_quad_store_req_s1_agent_rdata_fifo_src_data),                         //        in.data
		.in_valid          (ogpu_quad_store_req_s1_agent_rdata_fifo_src_valid),                        //          .valid
		.in_ready          (ogpu_quad_store_req_s1_agent_rdata_fifo_src_ready),                        //          .ready
		.out_data          (ogpu_quad_store_req_s1_agent_rdata_fifo_out_data),                         //       out.data
		.out_valid         (ogpu_quad_store_req_s1_agent_rdata_fifo_out_valid),                        //          .valid
		.out_ready         (ogpu_quad_store_req_s1_agent_rdata_fifo_out_ready),                        //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_quad_store_data_high_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_quad_store_data_high_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (ogpu_quad_store_data_high_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (ogpu_quad_store_data_high_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (ogpu_quad_store_data_high_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (ogpu_quad_store_data_high_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (ogpu_quad_store_data_high_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (ogpu_quad_store_data_high_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (ogpu_quad_store_data_high_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (ogpu_quad_store_data_high_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (ogpu_quad_store_data_high_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (ogpu_quad_store_data_high_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (ogpu_quad_store_data_high_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (ogpu_quad_store_data_high_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (ogpu_quad_store_data_high_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (ogpu_quad_store_data_high_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (ogpu_quad_store_data_high_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (ogpu_quad_store_data_high_s1_burst_adapter_source0_ready),                 //              cp.ready
		.cp_valid                (ogpu_quad_store_data_high_s1_burst_adapter_source0_valid),                 //                .valid
		.cp_data                 (ogpu_quad_store_data_high_s1_burst_adapter_source0_data),                  //                .data
		.cp_startofpacket        (ogpu_quad_store_data_high_s1_burst_adapter_source0_startofpacket),         //                .startofpacket
		.cp_endofpacket          (ogpu_quad_store_data_high_s1_burst_adapter_source0_endofpacket),           //                .endofpacket
		.cp_channel              (ogpu_quad_store_data_high_s1_burst_adapter_source0_channel),               //                .channel
		.rf_sink_ready           (ogpu_quad_store_data_high_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (ogpu_quad_store_data_high_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (ogpu_quad_store_data_high_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (ogpu_quad_store_data_high_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (ogpu_quad_store_data_high_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (ogpu_quad_store_data_high_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (ogpu_quad_store_data_high_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (ogpu_quad_store_data_high_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (ogpu_quad_store_data_high_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (ogpu_quad_store_data_high_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_021_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_021_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_021_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_021_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_quad_store_data_high_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_quad_store_data_high_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (ogpu_quad_store_data_high_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_quad_store_data_high_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_quad_store_data_high_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (ogpu_quad_store_data_high_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (ogpu_quad_store_data_high_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (ogpu_quad_store_data_high_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (ogpu_quad_store_data_high_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (ogpu_quad_store_data_high_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (ogpu_quad_store_data_high_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (ogpu_quad_store_data_high_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (ogpu_quad_store_data_high_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (ogpu_quad_store_data_high_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_quad_store_data_high_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_quad_store_data_high_s1_agent_rdata_fifo_src_data),                   //        in.data
		.in_valid          (ogpu_quad_store_data_high_s1_agent_rdata_fifo_src_valid),                  //          .valid
		.in_ready          (ogpu_quad_store_data_high_s1_agent_rdata_fifo_src_ready),                  //          .ready
		.out_data          (ogpu_quad_store_data_high_s1_agent_rdata_fifo_out_data),                   //       out.data
		.out_valid         (ogpu_quad_store_data_high_s1_agent_rdata_fifo_out_valid),                  //          .valid
		.out_ready         (ogpu_quad_store_data_high_s1_agent_rdata_fifo_out_ready),                  //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_quad_store_data_low_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_quad_store_data_low_s1_agent_m0_address),                             //              m0.address
		.m0_burstcount           (ogpu_quad_store_data_low_s1_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (ogpu_quad_store_data_low_s1_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (ogpu_quad_store_data_low_s1_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (ogpu_quad_store_data_low_s1_agent_m0_lock),                                //                .lock
		.m0_readdata             (ogpu_quad_store_data_low_s1_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (ogpu_quad_store_data_low_s1_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (ogpu_quad_store_data_low_s1_agent_m0_read),                                //                .read
		.m0_waitrequest          (ogpu_quad_store_data_low_s1_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (ogpu_quad_store_data_low_s1_agent_m0_writedata),                           //                .writedata
		.m0_write                (ogpu_quad_store_data_low_s1_agent_m0_write),                               //                .write
		.rp_endofpacket          (ogpu_quad_store_data_low_s1_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (ogpu_quad_store_data_low_s1_agent_rp_ready),                               //                .ready
		.rp_valid                (ogpu_quad_store_data_low_s1_agent_rp_valid),                               //                .valid
		.rp_data                 (ogpu_quad_store_data_low_s1_agent_rp_data),                                //                .data
		.rp_startofpacket        (ogpu_quad_store_data_low_s1_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (ogpu_quad_store_data_low_s1_burst_adapter_source0_ready),                  //              cp.ready
		.cp_valid                (ogpu_quad_store_data_low_s1_burst_adapter_source0_valid),                  //                .valid
		.cp_data                 (ogpu_quad_store_data_low_s1_burst_adapter_source0_data),                   //                .data
		.cp_startofpacket        (ogpu_quad_store_data_low_s1_burst_adapter_source0_startofpacket),          //                .startofpacket
		.cp_endofpacket          (ogpu_quad_store_data_low_s1_burst_adapter_source0_endofpacket),            //                .endofpacket
		.cp_channel              (ogpu_quad_store_data_low_s1_burst_adapter_source0_channel),                //                .channel
		.rf_sink_ready           (ogpu_quad_store_data_low_s1_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (ogpu_quad_store_data_low_s1_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (ogpu_quad_store_data_low_s1_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (ogpu_quad_store_data_low_s1_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (ogpu_quad_store_data_low_s1_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (ogpu_quad_store_data_low_s1_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (ogpu_quad_store_data_low_s1_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (ogpu_quad_store_data_low_s1_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (ogpu_quad_store_data_low_s1_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (ogpu_quad_store_data_low_s1_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_022_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_022_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_022_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_022_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_quad_store_data_low_s1_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_quad_store_data_low_s1_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (ogpu_quad_store_data_low_s1_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_quad_store_data_low_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_quad_store_data_low_s1_agent_rf_source_data),                         //        in.data
		.in_valid          (ogpu_quad_store_data_low_s1_agent_rf_source_valid),                        //          .valid
		.in_ready          (ogpu_quad_store_data_low_s1_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (ogpu_quad_store_data_low_s1_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (ogpu_quad_store_data_low_s1_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (ogpu_quad_store_data_low_s1_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (ogpu_quad_store_data_low_s1_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (ogpu_quad_store_data_low_s1_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (ogpu_quad_store_data_low_s1_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (ogpu_quad_store_data_low_s1_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_quad_store_data_low_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_quad_store_data_low_s1_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (ogpu_quad_store_data_low_s1_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (ogpu_quad_store_data_low_s1_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (ogpu_quad_store_data_low_s1_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (ogpu_quad_store_data_low_s1_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (ogpu_quad_store_data_low_s1_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_quad_store_ack_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_quad_store_ack_s1_agent_m0_address),                                  //              m0.address
		.m0_burstcount           (ogpu_quad_store_ack_s1_agent_m0_burstcount),                               //                .burstcount
		.m0_byteenable           (ogpu_quad_store_ack_s1_agent_m0_byteenable),                               //                .byteenable
		.m0_debugaccess          (ogpu_quad_store_ack_s1_agent_m0_debugaccess),                              //                .debugaccess
		.m0_lock                 (ogpu_quad_store_ack_s1_agent_m0_lock),                                     //                .lock
		.m0_readdata             (ogpu_quad_store_ack_s1_agent_m0_readdata),                                 //                .readdata
		.m0_readdatavalid        (ogpu_quad_store_ack_s1_agent_m0_readdatavalid),                            //                .readdatavalid
		.m0_read                 (ogpu_quad_store_ack_s1_agent_m0_read),                                     //                .read
		.m0_waitrequest          (ogpu_quad_store_ack_s1_agent_m0_waitrequest),                              //                .waitrequest
		.m0_writedata            (ogpu_quad_store_ack_s1_agent_m0_writedata),                                //                .writedata
		.m0_write                (ogpu_quad_store_ack_s1_agent_m0_write),                                    //                .write
		.rp_endofpacket          (ogpu_quad_store_ack_s1_agent_rp_endofpacket),                              //              rp.endofpacket
		.rp_ready                (ogpu_quad_store_ack_s1_agent_rp_ready),                                    //                .ready
		.rp_valid                (ogpu_quad_store_ack_s1_agent_rp_valid),                                    //                .valid
		.rp_data                 (ogpu_quad_store_ack_s1_agent_rp_data),                                     //                .data
		.rp_startofpacket        (ogpu_quad_store_ack_s1_agent_rp_startofpacket),                            //                .startofpacket
		.cp_ready                (ogpu_quad_store_ack_s1_burst_adapter_source0_ready),                       //              cp.ready
		.cp_valid                (ogpu_quad_store_ack_s1_burst_adapter_source0_valid),                       //                .valid
		.cp_data                 (ogpu_quad_store_ack_s1_burst_adapter_source0_data),                        //                .data
		.cp_startofpacket        (ogpu_quad_store_ack_s1_burst_adapter_source0_startofpacket),               //                .startofpacket
		.cp_endofpacket          (ogpu_quad_store_ack_s1_burst_adapter_source0_endofpacket),                 //                .endofpacket
		.cp_channel              (ogpu_quad_store_ack_s1_burst_adapter_source0_channel),                     //                .channel
		.rf_sink_ready           (ogpu_quad_store_ack_s1_agent_rsp_fifo_out_ready),                          //         rf_sink.ready
		.rf_sink_valid           (ogpu_quad_store_ack_s1_agent_rsp_fifo_out_valid),                          //                .valid
		.rf_sink_startofpacket   (ogpu_quad_store_ack_s1_agent_rsp_fifo_out_startofpacket),                  //                .startofpacket
		.rf_sink_endofpacket     (ogpu_quad_store_ack_s1_agent_rsp_fifo_out_endofpacket),                    //                .endofpacket
		.rf_sink_data            (ogpu_quad_store_ack_s1_agent_rsp_fifo_out_data),                           //                .data
		.rf_source_ready         (ogpu_quad_store_ack_s1_agent_rf_source_ready),                             //       rf_source.ready
		.rf_source_valid         (ogpu_quad_store_ack_s1_agent_rf_source_valid),                             //                .valid
		.rf_source_startofpacket (ogpu_quad_store_ack_s1_agent_rf_source_startofpacket),                     //                .startofpacket
		.rf_source_endofpacket   (ogpu_quad_store_ack_s1_agent_rf_source_endofpacket),                       //                .endofpacket
		.rf_source_data          (ogpu_quad_store_ack_s1_agent_rf_source_data),                              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_023_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_023_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_023_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_023_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_quad_store_ack_s1_agent_rdata_fifo_src_ready),                        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_quad_store_ack_s1_agent_rdata_fifo_src_valid),                        //                .valid
		.rdata_fifo_src_data     (ogpu_quad_store_ack_s1_agent_rdata_fifo_src_data),                         //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_quad_store_ack_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_quad_store_ack_s1_agent_rf_source_data),                              //        in.data
		.in_valid          (ogpu_quad_store_ack_s1_agent_rf_source_valid),                             //          .valid
		.in_ready          (ogpu_quad_store_ack_s1_agent_rf_source_ready),                             //          .ready
		.in_startofpacket  (ogpu_quad_store_ack_s1_agent_rf_source_startofpacket),                     //          .startofpacket
		.in_endofpacket    (ogpu_quad_store_ack_s1_agent_rf_source_endofpacket),                       //          .endofpacket
		.out_data          (ogpu_quad_store_ack_s1_agent_rsp_fifo_out_data),                           //       out.data
		.out_valid         (ogpu_quad_store_ack_s1_agent_rsp_fifo_out_valid),                          //          .valid
		.out_ready         (ogpu_quad_store_ack_s1_agent_rsp_fifo_out_ready),                          //          .ready
		.out_startofpacket (ogpu_quad_store_ack_s1_agent_rsp_fifo_out_startofpacket),                  //          .startofpacket
		.out_endofpacket   (ogpu_quad_store_ack_s1_agent_rsp_fifo_out_endofpacket),                    //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_quad_store_ack_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_quad_store_ack_s1_agent_rdata_fifo_src_data),                         //        in.data
		.in_valid          (ogpu_quad_store_ack_s1_agent_rdata_fifo_src_valid),                        //          .valid
		.in_ready          (ogpu_quad_store_ack_s1_agent_rdata_fifo_src_ready),                        //          .ready
		.out_data          (ogpu_quad_store_ack_s1_agent_rdata_fifo_out_data),                         //       out.data
		.out_valid         (ogpu_quad_store_ack_s1_agent_rdata_fifo_out_valid),                        //          .valid
		.out_ready         (ogpu_quad_store_ack_s1_agent_rdata_fifo_out_ready),                        //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ogpu_reset_s1_agent (
		.clk                     (clk_0_clk_clk),                                                            //             clk.clk
		.reset                   (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ogpu_reset_s1_agent_m0_address),                                           //              m0.address
		.m0_burstcount           (ogpu_reset_s1_agent_m0_burstcount),                                        //                .burstcount
		.m0_byteenable           (ogpu_reset_s1_agent_m0_byteenable),                                        //                .byteenable
		.m0_debugaccess          (ogpu_reset_s1_agent_m0_debugaccess),                                       //                .debugaccess
		.m0_lock                 (ogpu_reset_s1_agent_m0_lock),                                              //                .lock
		.m0_readdata             (ogpu_reset_s1_agent_m0_readdata),                                          //                .readdata
		.m0_readdatavalid        (ogpu_reset_s1_agent_m0_readdatavalid),                                     //                .readdatavalid
		.m0_read                 (ogpu_reset_s1_agent_m0_read),                                              //                .read
		.m0_waitrequest          (ogpu_reset_s1_agent_m0_waitrequest),                                       //                .waitrequest
		.m0_writedata            (ogpu_reset_s1_agent_m0_writedata),                                         //                .writedata
		.m0_write                (ogpu_reset_s1_agent_m0_write),                                             //                .write
		.rp_endofpacket          (ogpu_reset_s1_agent_rp_endofpacket),                                       //              rp.endofpacket
		.rp_ready                (ogpu_reset_s1_agent_rp_ready),                                             //                .ready
		.rp_valid                (ogpu_reset_s1_agent_rp_valid),                                             //                .valid
		.rp_data                 (ogpu_reset_s1_agent_rp_data),                                              //                .data
		.rp_startofpacket        (ogpu_reset_s1_agent_rp_startofpacket),                                     //                .startofpacket
		.cp_ready                (ogpu_reset_s1_burst_adapter_source0_ready),                                //              cp.ready
		.cp_valid                (ogpu_reset_s1_burst_adapter_source0_valid),                                //                .valid
		.cp_data                 (ogpu_reset_s1_burst_adapter_source0_data),                                 //                .data
		.cp_startofpacket        (ogpu_reset_s1_burst_adapter_source0_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (ogpu_reset_s1_burst_adapter_source0_endofpacket),                          //                .endofpacket
		.cp_channel              (ogpu_reset_s1_burst_adapter_source0_channel),                              //                .channel
		.rf_sink_ready           (ogpu_reset_s1_agent_rsp_fifo_out_ready),                                   //         rf_sink.ready
		.rf_sink_valid           (ogpu_reset_s1_agent_rsp_fifo_out_valid),                                   //                .valid
		.rf_sink_startofpacket   (ogpu_reset_s1_agent_rsp_fifo_out_startofpacket),                           //                .startofpacket
		.rf_sink_endofpacket     (ogpu_reset_s1_agent_rsp_fifo_out_endofpacket),                             //                .endofpacket
		.rf_sink_data            (ogpu_reset_s1_agent_rsp_fifo_out_data),                                    //                .data
		.rf_source_ready         (ogpu_reset_s1_agent_rf_source_ready),                                      //       rf_source.ready
		.rf_source_valid         (ogpu_reset_s1_agent_rf_source_valid),                                      //                .valid
		.rf_source_startofpacket (ogpu_reset_s1_agent_rf_source_startofpacket),                              //                .startofpacket
		.rf_source_endofpacket   (ogpu_reset_s1_agent_rf_source_endofpacket),                                //                .endofpacket
		.rf_source_data          (ogpu_reset_s1_agent_rf_source_data),                                       //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_024_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_024_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_024_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_024_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (ogpu_reset_s1_agent_rdata_fifo_src_ready),                                 //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ogpu_reset_s1_agent_rdata_fifo_src_valid),                                 //                .valid
		.rdata_fifo_src_data     (ogpu_reset_s1_agent_rdata_fifo_src_data),                                  //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_reset_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_reset_s1_agent_rf_source_data),                                       //        in.data
		.in_valid          (ogpu_reset_s1_agent_rf_source_valid),                                      //          .valid
		.in_ready          (ogpu_reset_s1_agent_rf_source_ready),                                      //          .ready
		.in_startofpacket  (ogpu_reset_s1_agent_rf_source_startofpacket),                              //          .startofpacket
		.in_endofpacket    (ogpu_reset_s1_agent_rf_source_endofpacket),                                //          .endofpacket
		.out_data          (ogpu_reset_s1_agent_rsp_fifo_out_data),                                    //       out.data
		.out_valid         (ogpu_reset_s1_agent_rsp_fifo_out_valid),                                   //          .valid
		.out_ready         (ogpu_reset_s1_agent_rsp_fifo_out_ready),                                   //          .ready
		.out_startofpacket (ogpu_reset_s1_agent_rsp_fifo_out_startofpacket),                           //          .startofpacket
		.out_endofpacket   (ogpu_reset_s1_agent_rsp_fifo_out_endofpacket),                             //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ogpu_reset_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ogpu_reset_s1_agent_rdata_fifo_src_data),                                  //        in.data
		.in_valid          (ogpu_reset_s1_agent_rdata_fifo_src_valid),                                 //          .valid
		.in_ready          (ogpu_reset_s1_agent_rdata_fifo_src_ready),                                 //          .ready
		.out_data          (ogpu_reset_s1_agent_rdata_fifo_out_data),                                  //       out.data
		.out_valid         (ogpu_reset_s1_agent_rdata_fifo_out_valid),                                 //          .valid
		.out_ready         (ogpu_reset_s1_agent_rdata_fifo_out_ready),                                 //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	soc_system_mm_interconnect_1_router router (
		.sink_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                 //       src.ready
		.src_valid          (router_src_valid),                                                 //          .valid
		.src_data           (router_src_data),                                                  //          .data
		.src_channel        (router_src_channel),                                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_router router_001 (
		.sink_ready         (hps_0_h2f_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                             //       src.ready
		.src_valid          (router_001_src_valid),                                             //          .valid
		.src_data           (router_001_src_data),                                              //          .data
		.src_channel        (router_001_src_channel),                                           //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_002 (
		.sink_ready         (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rp_valid),                 //          .valid
		.sink_data          (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                                     //       src.ready
		.src_valid          (router_002_src_valid),                                                     //          .valid
		.src_data           (router_002_src_data),                                                      //          .data
		.src_channel        (router_002_src_channel),                                                   //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_003 (
		.sink_ready         (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rp_valid),                  //          .valid
		.sink_data          (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                                     //       src.ready
		.src_valid          (router_003_src_valid),                                                     //          .valid
		.src_data           (router_003_src_data),                                                      //          .data
		.src_channel        (router_003_src_channel),                                                   //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_004 (
		.sink_ready         (ogpu_raster_unit_depth_coef_c_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (ogpu_raster_unit_depth_coef_c_s1_agent_rp_valid),                          //          .valid
		.sink_data          (ogpu_raster_unit_depth_coef_c_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (ogpu_raster_unit_depth_coef_c_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_depth_coef_c_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                                     //       src.ready
		.src_valid          (router_004_src_valid),                                                     //          .valid
		.src_data           (router_004_src_data),                                                      //          .data
		.src_channel        (router_004_src_channel),                                                   //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_005 (
		.sink_ready         (ogpu_raster_unit_depth_coef_b_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (ogpu_raster_unit_depth_coef_b_s1_agent_rp_valid),                          //          .valid
		.sink_data          (ogpu_raster_unit_depth_coef_b_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (ogpu_raster_unit_depth_coef_b_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_depth_coef_b_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                                     //       src.ready
		.src_valid          (router_005_src_valid),                                                     //          .valid
		.src_data           (router_005_src_data),                                                      //          .data
		.src_channel        (router_005_src_channel),                                                   //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_006 (
		.sink_ready         (ogpu_raster_unit_depth_coef_a_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (ogpu_raster_unit_depth_coef_a_s1_agent_rp_valid),                          //          .valid
		.sink_data          (ogpu_raster_unit_depth_coef_a_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (ogpu_raster_unit_depth_coef_a_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_depth_coef_a_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                                     //       src.ready
		.src_valid          (router_006_src_valid),                                                     //          .valid
		.src_data           (router_006_src_data),                                                      //          .data
		.src_channel        (router_006_src_channel),                                                   //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_007 (
		.sink_ready         (ogpu_raster_unit_tile1_s1_agent_rp_ready),                                 //      sink.ready
		.sink_valid         (ogpu_raster_unit_tile1_s1_agent_rp_valid),                                 //          .valid
		.sink_data          (ogpu_raster_unit_tile1_s1_agent_rp_data),                                  //          .data
		.sink_startofpacket (ogpu_raster_unit_tile1_s1_agent_rp_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_tile1_s1_agent_rp_endofpacket),                           //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                                     //       src.ready
		.src_valid          (router_007_src_valid),                                                     //          .valid
		.src_data           (router_007_src_data),                                                      //          .data
		.src_channel        (router_007_src_channel),                                                   //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_008 (
		.sink_ready         (ogpu_raster_unit_tile0_s1_agent_rp_ready),                                 //      sink.ready
		.sink_valid         (ogpu_raster_unit_tile0_s1_agent_rp_valid),                                 //          .valid
		.sink_data          (ogpu_raster_unit_tile0_s1_agent_rp_data),                                  //          .data
		.sink_startofpacket (ogpu_raster_unit_tile0_s1_agent_rp_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_tile0_s1_agent_rp_endofpacket),                           //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                                     //       src.ready
		.src_valid          (router_008_src_valid),                                                     //          .valid
		.src_data           (router_008_src_data),                                                      //          .data
		.src_channel        (router_008_src_channel),                                                   //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_009 (
		.sink_ready         (ogpu_raster_unit_clip_rect1_s1_agent_rp_ready),                            //      sink.ready
		.sink_valid         (ogpu_raster_unit_clip_rect1_s1_agent_rp_valid),                            //          .valid
		.sink_data          (ogpu_raster_unit_clip_rect1_s1_agent_rp_data),                             //          .data
		.sink_startofpacket (ogpu_raster_unit_clip_rect1_s1_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_clip_rect1_s1_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                                     //       src.ready
		.src_valid          (router_009_src_valid),                                                     //          .valid
		.src_data           (router_009_src_data),                                                      //          .data
		.src_channel        (router_009_src_channel),                                                   //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_010 (
		.sink_ready         (ogpu_raster_unit_clip_rect0_s1_agent_rp_ready),                            //      sink.ready
		.sink_valid         (ogpu_raster_unit_clip_rect0_s1_agent_rp_valid),                            //          .valid
		.sink_data          (ogpu_raster_unit_clip_rect0_s1_agent_rp_data),                             //          .data
		.sink_startofpacket (ogpu_raster_unit_clip_rect0_s1_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_clip_rect0_s1_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                                     //       src.ready
		.src_valid          (router_010_src_valid),                                                     //          .valid
		.src_data           (router_010_src_data),                                                      //          .data
		.src_channel        (router_010_src_channel),                                                   //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_011 (
		.sink_ready         (ogpu_raster_unit_command_s1_agent_rp_ready),                               //      sink.ready
		.sink_valid         (ogpu_raster_unit_command_s1_agent_rp_valid),                               //          .valid
		.sink_data          (ogpu_raster_unit_command_s1_agent_rp_data),                                //          .data
		.sink_startofpacket (ogpu_raster_unit_command_s1_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_command_s1_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                                                     //       src.ready
		.src_valid          (router_011_src_valid),                                                     //          .valid
		.src_data           (router_011_src_data),                                                      //          .data
		.src_channel        (router_011_src_channel),                                                   //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_012 (
		.sink_ready         (ogpu_raster_unit_status_s1_agent_rp_ready),                                //      sink.ready
		.sink_valid         (ogpu_raster_unit_status_s1_agent_rp_valid),                                //          .valid
		.sink_data          (ogpu_raster_unit_status_s1_agent_rp_data),                                 //          .data
		.sink_startofpacket (ogpu_raster_unit_status_s1_agent_rp_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_status_s1_agent_rp_endofpacket),                          //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                                                     //       src.ready
		.src_valid          (router_012_src_valid),                                                     //          .valid
		.src_data           (router_012_src_data),                                                      //          .data
		.src_channel        (router_012_src_channel),                                                   //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_013 (
		.sink_ready         (ogpu_raster_unit_v2z_s1_agent_rp_ready),                                   //      sink.ready
		.sink_valid         (ogpu_raster_unit_v2z_s1_agent_rp_valid),                                   //          .valid
		.sink_data          (ogpu_raster_unit_v2z_s1_agent_rp_data),                                    //          .data
		.sink_startofpacket (ogpu_raster_unit_v2z_s1_agent_rp_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_v2z_s1_agent_rp_endofpacket),                             //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                                                     //       src.ready
		.src_valid          (router_013_src_valid),                                                     //          .valid
		.src_data           (router_013_src_data),                                                      //          .data
		.src_channel        (router_013_src_channel),                                                   //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_014 (
		.sink_ready         (ogpu_raster_unit_v2y_s1_agent_rp_ready),                                   //      sink.ready
		.sink_valid         (ogpu_raster_unit_v2y_s1_agent_rp_valid),                                   //          .valid
		.sink_data          (ogpu_raster_unit_v2y_s1_agent_rp_data),                                    //          .data
		.sink_startofpacket (ogpu_raster_unit_v2y_s1_agent_rp_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_v2y_s1_agent_rp_endofpacket),                             //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                                                     //       src.ready
		.src_valid          (router_014_src_valid),                                                     //          .valid
		.src_data           (router_014_src_data),                                                      //          .data
		.src_channel        (router_014_src_channel),                                                   //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_015 (
		.sink_ready         (ogpu_raster_unit_v2x_s1_agent_rp_ready),                                   //      sink.ready
		.sink_valid         (ogpu_raster_unit_v2x_s1_agent_rp_valid),                                   //          .valid
		.sink_data          (ogpu_raster_unit_v2x_s1_agent_rp_data),                                    //          .data
		.sink_startofpacket (ogpu_raster_unit_v2x_s1_agent_rp_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_v2x_s1_agent_rp_endofpacket),                             //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                                                     //       src.ready
		.src_valid          (router_015_src_valid),                                                     //          .valid
		.src_data           (router_015_src_data),                                                      //          .data
		.src_channel        (router_015_src_channel),                                                   //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_016 (
		.sink_ready         (ogpu_raster_unit_v1z_s1_agent_rp_ready),                                   //      sink.ready
		.sink_valid         (ogpu_raster_unit_v1z_s1_agent_rp_valid),                                   //          .valid
		.sink_data          (ogpu_raster_unit_v1z_s1_agent_rp_data),                                    //          .data
		.sink_startofpacket (ogpu_raster_unit_v1z_s1_agent_rp_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_v1z_s1_agent_rp_endofpacket),                             //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                                                     //       src.ready
		.src_valid          (router_016_src_valid),                                                     //          .valid
		.src_data           (router_016_src_data),                                                      //          .data
		.src_channel        (router_016_src_channel),                                                   //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_017 (
		.sink_ready         (ogpu_raster_unit_v1y_s1_agent_rp_ready),                                   //      sink.ready
		.sink_valid         (ogpu_raster_unit_v1y_s1_agent_rp_valid),                                   //          .valid
		.sink_data          (ogpu_raster_unit_v1y_s1_agent_rp_data),                                    //          .data
		.sink_startofpacket (ogpu_raster_unit_v1y_s1_agent_rp_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_v1y_s1_agent_rp_endofpacket),                             //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                                                     //       src.ready
		.src_valid          (router_017_src_valid),                                                     //          .valid
		.src_data           (router_017_src_data),                                                      //          .data
		.src_channel        (router_017_src_channel),                                                   //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_018 (
		.sink_ready         (ogpu_raster_unit_v1x_s1_agent_rp_ready),                                   //      sink.ready
		.sink_valid         (ogpu_raster_unit_v1x_s1_agent_rp_valid),                                   //          .valid
		.sink_data          (ogpu_raster_unit_v1x_s1_agent_rp_data),                                    //          .data
		.sink_startofpacket (ogpu_raster_unit_v1x_s1_agent_rp_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_v1x_s1_agent_rp_endofpacket),                             //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                                                     //       src.ready
		.src_valid          (router_018_src_valid),                                                     //          .valid
		.src_data           (router_018_src_data),                                                      //          .data
		.src_channel        (router_018_src_channel),                                                   //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_019 (
		.sink_ready         (ogpu_raster_unit_v0z_s1_agent_rp_ready),                                   //      sink.ready
		.sink_valid         (ogpu_raster_unit_v0z_s1_agent_rp_valid),                                   //          .valid
		.sink_data          (ogpu_raster_unit_v0z_s1_agent_rp_data),                                    //          .data
		.sink_startofpacket (ogpu_raster_unit_v0z_s1_agent_rp_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_v0z_s1_agent_rp_endofpacket),                             //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                                                     //       src.ready
		.src_valid          (router_019_src_valid),                                                     //          .valid
		.src_data           (router_019_src_data),                                                      //          .data
		.src_channel        (router_019_src_channel),                                                   //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_020 (
		.sink_ready         (ogpu_raster_unit_v0y_s1_agent_rp_ready),                                   //      sink.ready
		.sink_valid         (ogpu_raster_unit_v0y_s1_agent_rp_valid),                                   //          .valid
		.sink_data          (ogpu_raster_unit_v0y_s1_agent_rp_data),                                    //          .data
		.sink_startofpacket (ogpu_raster_unit_v0y_s1_agent_rp_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_v0y_s1_agent_rp_endofpacket),                             //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                                                     //       src.ready
		.src_valid          (router_020_src_valid),                                                     //          .valid
		.src_data           (router_020_src_data),                                                      //          .data
		.src_channel        (router_020_src_channel),                                                   //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_021 (
		.sink_ready         (ogpu_raster_unit_v0x_s1_agent_rp_ready),                                   //      sink.ready
		.sink_valid         (ogpu_raster_unit_v0x_s1_agent_rp_valid),                                   //          .valid
		.sink_data          (ogpu_raster_unit_v0x_s1_agent_rp_data),                                    //          .data
		.sink_startofpacket (ogpu_raster_unit_v0x_s1_agent_rp_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_v0x_s1_agent_rp_endofpacket),                             //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                                                     //       src.ready
		.src_valid          (router_021_src_valid),                                                     //          .valid
		.src_data           (router_021_src_data),                                                      //          .data
		.src_channel        (router_021_src_channel),                                                   //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_022 (
		.sink_ready         (ogpu_quad_store_req_s1_agent_rp_ready),                                    //      sink.ready
		.sink_valid         (ogpu_quad_store_req_s1_agent_rp_valid),                                    //          .valid
		.sink_data          (ogpu_quad_store_req_s1_agent_rp_data),                                     //          .data
		.sink_startofpacket (ogpu_quad_store_req_s1_agent_rp_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (ogpu_quad_store_req_s1_agent_rp_endofpacket),                              //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                                                     //       src.ready
		.src_valid          (router_022_src_valid),                                                     //          .valid
		.src_data           (router_022_src_data),                                                      //          .data
		.src_channel        (router_022_src_channel),                                                   //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_023 (
		.sink_ready         (ogpu_quad_store_data_high_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (ogpu_quad_store_data_high_s1_agent_rp_valid),                              //          .valid
		.sink_data          (ogpu_quad_store_data_high_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (ogpu_quad_store_data_high_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (ogpu_quad_store_data_high_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                                                     //       src.ready
		.src_valid          (router_023_src_valid),                                                     //          .valid
		.src_data           (router_023_src_data),                                                      //          .data
		.src_channel        (router_023_src_channel),                                                   //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_024 (
		.sink_ready         (ogpu_quad_store_data_low_s1_agent_rp_ready),                               //      sink.ready
		.sink_valid         (ogpu_quad_store_data_low_s1_agent_rp_valid),                               //          .valid
		.sink_data          (ogpu_quad_store_data_low_s1_agent_rp_data),                                //          .data
		.sink_startofpacket (ogpu_quad_store_data_low_s1_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (ogpu_quad_store_data_low_s1_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                                                     //       src.ready
		.src_valid          (router_024_src_valid),                                                     //          .valid
		.src_data           (router_024_src_data),                                                      //          .data
		.src_channel        (router_024_src_channel),                                                   //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_025 (
		.sink_ready         (ogpu_quad_store_ack_s1_agent_rp_ready),                                    //      sink.ready
		.sink_valid         (ogpu_quad_store_ack_s1_agent_rp_valid),                                    //          .valid
		.sink_data          (ogpu_quad_store_ack_s1_agent_rp_data),                                     //          .data
		.sink_startofpacket (ogpu_quad_store_ack_s1_agent_rp_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (ogpu_quad_store_ack_s1_agent_rp_endofpacket),                              //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                                                     //       src.ready
		.src_valid          (router_025_src_valid),                                                     //          .valid
		.src_data           (router_025_src_data),                                                      //          .data
		.src_channel        (router_025_src_channel),                                                   //          .channel
		.src_startofpacket  (router_025_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_026 (
		.sink_ready         (ogpu_reset_s1_agent_rp_ready),                                             //      sink.ready
		.sink_valid         (ogpu_reset_s1_agent_rp_valid),                                             //          .valid
		.sink_data          (ogpu_reset_s1_agent_rp_data),                                              //          .data
		.sink_startofpacket (ogpu_reset_s1_agent_rp_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (ogpu_reset_s1_agent_rp_endofpacket),                                       //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_026_src_ready),                                                     //       src.ready
		.src_valid          (router_026_src_valid),                                                     //          .valid
		.src_data           (router_026_src_data),                                                      //          .data
		.src_channel        (router_026_src_channel),                                                   //          .channel
		.src_startofpacket  (router_026_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                                                //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (142),
		.PKT_DEST_ID_L             (138),
		.PKT_SRC_ID_H              (137),
		.PKT_SRC_ID_L              (133),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (108),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (103),
		.PKT_TRANS_WRITE           (104),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (167),
		.ST_CHANNEL_W              (25),
		.VALID_WIDTH               (25),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_axi_master_wr_limiter (
		.clk                    (clk_0_clk_clk),                                                    //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                 //          .valid
		.cmd_sink_data          (router_src_data),                                                  //          .data
		.cmd_sink_channel       (router_src_channel),                                               //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                         //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                           //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                              //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                 //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (142),
		.PKT_DEST_ID_L             (138),
		.PKT_SRC_ID_H              (137),
		.PKT_SRC_ID_L              (133),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (108),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (103),
		.PKT_TRANS_WRITE           (104),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (167),
		.ST_CHANNEL_W              (25),
		.VALID_WIDTH               (25),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_axi_master_rd_limiter (
		.clk                    (clk_0_clk_clk),                                                    //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                             //          .valid
		.cmd_sink_data          (router_001_src_data),                                              //          .data
		.cmd_sink_channel       (router_001_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                                 //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ogpu_raster_unit_quad_buffer_addr_high_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                                //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ogpu_raster_unit_quad_buffer_addr_low_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_raster_unit_depth_coef_c_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter_src_valid),             //     sink0.valid
		.sink0_data            (ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter_src_data),              //          .data
		.sink0_channel         (ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter_src_channel),           //          .channel
		.sink0_startofpacket   (ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter_src_startofpacket),     //          .startofpacket
		.sink0_endofpacket     (ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter_src_endofpacket),       //          .endofpacket
		.sink0_ready           (ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter_src_ready),             //          .ready
		.source0_valid         (ogpu_raster_unit_depth_coef_c_s1_burst_adapter_source0_valid),             //   source0.valid
		.source0_data          (ogpu_raster_unit_depth_coef_c_s1_burst_adapter_source0_data),              //          .data
		.source0_channel       (ogpu_raster_unit_depth_coef_c_s1_burst_adapter_source0_channel),           //          .channel
		.source0_startofpacket (ogpu_raster_unit_depth_coef_c_s1_burst_adapter_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (ogpu_raster_unit_depth_coef_c_s1_burst_adapter_source0_endofpacket),       //          .endofpacket
		.source0_ready         (ogpu_raster_unit_depth_coef_c_s1_burst_adapter_source0_ready)              //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_raster_unit_depth_coef_b_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter_src_valid),             //     sink0.valid
		.sink0_data            (ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter_src_data),              //          .data
		.sink0_channel         (ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter_src_channel),           //          .channel
		.sink0_startofpacket   (ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter_src_startofpacket),     //          .startofpacket
		.sink0_endofpacket     (ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter_src_endofpacket),       //          .endofpacket
		.sink0_ready           (ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter_src_ready),             //          .ready
		.source0_valid         (ogpu_raster_unit_depth_coef_b_s1_burst_adapter_source0_valid),             //   source0.valid
		.source0_data          (ogpu_raster_unit_depth_coef_b_s1_burst_adapter_source0_data),              //          .data
		.source0_channel       (ogpu_raster_unit_depth_coef_b_s1_burst_adapter_source0_channel),           //          .channel
		.source0_startofpacket (ogpu_raster_unit_depth_coef_b_s1_burst_adapter_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (ogpu_raster_unit_depth_coef_b_s1_burst_adapter_source0_endofpacket),       //          .endofpacket
		.source0_ready         (ogpu_raster_unit_depth_coef_b_s1_burst_adapter_source0_ready)              //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_raster_unit_depth_coef_a_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter_src_valid),             //     sink0.valid
		.sink0_data            (ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter_src_data),              //          .data
		.sink0_channel         (ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter_src_channel),           //          .channel
		.sink0_startofpacket   (ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter_src_startofpacket),     //          .startofpacket
		.sink0_endofpacket     (ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter_src_endofpacket),       //          .endofpacket
		.sink0_ready           (ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter_src_ready),             //          .ready
		.source0_valid         (ogpu_raster_unit_depth_coef_a_s1_burst_adapter_source0_valid),             //   source0.valid
		.source0_data          (ogpu_raster_unit_depth_coef_a_s1_burst_adapter_source0_data),              //          .data
		.source0_channel       (ogpu_raster_unit_depth_coef_a_s1_burst_adapter_source0_channel),           //          .channel
		.source0_startofpacket (ogpu_raster_unit_depth_coef_a_s1_burst_adapter_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (ogpu_raster_unit_depth_coef_a_s1_burst_adapter_source0_endofpacket),       //          .endofpacket
		.source0_ready         (ogpu_raster_unit_depth_coef_a_s1_burst_adapter_source0_ready)              //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_raster_unit_tile1_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_raster_unit_tile1_s1_cmd_width_adapter_src_valid),                    //     sink0.valid
		.sink0_data            (ogpu_raster_unit_tile1_s1_cmd_width_adapter_src_data),                     //          .data
		.sink0_channel         (ogpu_raster_unit_tile1_s1_cmd_width_adapter_src_channel),                  //          .channel
		.sink0_startofpacket   (ogpu_raster_unit_tile1_s1_cmd_width_adapter_src_startofpacket),            //          .startofpacket
		.sink0_endofpacket     (ogpu_raster_unit_tile1_s1_cmd_width_adapter_src_endofpacket),              //          .endofpacket
		.sink0_ready           (ogpu_raster_unit_tile1_s1_cmd_width_adapter_src_ready),                    //          .ready
		.source0_valid         (ogpu_raster_unit_tile1_s1_burst_adapter_source0_valid),                    //   source0.valid
		.source0_data          (ogpu_raster_unit_tile1_s1_burst_adapter_source0_data),                     //          .data
		.source0_channel       (ogpu_raster_unit_tile1_s1_burst_adapter_source0_channel),                  //          .channel
		.source0_startofpacket (ogpu_raster_unit_tile1_s1_burst_adapter_source0_startofpacket),            //          .startofpacket
		.source0_endofpacket   (ogpu_raster_unit_tile1_s1_burst_adapter_source0_endofpacket),              //          .endofpacket
		.source0_ready         (ogpu_raster_unit_tile1_s1_burst_adapter_source0_ready)                     //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_raster_unit_tile0_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_raster_unit_tile0_s1_cmd_width_adapter_src_valid),                    //     sink0.valid
		.sink0_data            (ogpu_raster_unit_tile0_s1_cmd_width_adapter_src_data),                     //          .data
		.sink0_channel         (ogpu_raster_unit_tile0_s1_cmd_width_adapter_src_channel),                  //          .channel
		.sink0_startofpacket   (ogpu_raster_unit_tile0_s1_cmd_width_adapter_src_startofpacket),            //          .startofpacket
		.sink0_endofpacket     (ogpu_raster_unit_tile0_s1_cmd_width_adapter_src_endofpacket),              //          .endofpacket
		.sink0_ready           (ogpu_raster_unit_tile0_s1_cmd_width_adapter_src_ready),                    //          .ready
		.source0_valid         (ogpu_raster_unit_tile0_s1_burst_adapter_source0_valid),                    //   source0.valid
		.source0_data          (ogpu_raster_unit_tile0_s1_burst_adapter_source0_data),                     //          .data
		.source0_channel       (ogpu_raster_unit_tile0_s1_burst_adapter_source0_channel),                  //          .channel
		.source0_startofpacket (ogpu_raster_unit_tile0_s1_burst_adapter_source0_startofpacket),            //          .startofpacket
		.source0_endofpacket   (ogpu_raster_unit_tile0_s1_burst_adapter_source0_endofpacket),              //          .endofpacket
		.source0_ready         (ogpu_raster_unit_tile0_s1_burst_adapter_source0_ready)                     //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_raster_unit_clip_rect1_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter_src_valid),               //     sink0.valid
		.sink0_data            (ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter_src_data),                //          .data
		.sink0_channel         (ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter_src_channel),             //          .channel
		.sink0_startofpacket   (ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter_src_startofpacket),       //          .startofpacket
		.sink0_endofpacket     (ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter_src_endofpacket),         //          .endofpacket
		.sink0_ready           (ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter_src_ready),               //          .ready
		.source0_valid         (ogpu_raster_unit_clip_rect1_s1_burst_adapter_source0_valid),               //   source0.valid
		.source0_data          (ogpu_raster_unit_clip_rect1_s1_burst_adapter_source0_data),                //          .data
		.source0_channel       (ogpu_raster_unit_clip_rect1_s1_burst_adapter_source0_channel),             //          .channel
		.source0_startofpacket (ogpu_raster_unit_clip_rect1_s1_burst_adapter_source0_startofpacket),       //          .startofpacket
		.source0_endofpacket   (ogpu_raster_unit_clip_rect1_s1_burst_adapter_source0_endofpacket),         //          .endofpacket
		.source0_ready         (ogpu_raster_unit_clip_rect1_s1_burst_adapter_source0_ready)                //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_raster_unit_clip_rect0_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter_src_valid),               //     sink0.valid
		.sink0_data            (ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter_src_data),                //          .data
		.sink0_channel         (ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter_src_channel),             //          .channel
		.sink0_startofpacket   (ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter_src_startofpacket),       //          .startofpacket
		.sink0_endofpacket     (ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter_src_endofpacket),         //          .endofpacket
		.sink0_ready           (ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter_src_ready),               //          .ready
		.source0_valid         (ogpu_raster_unit_clip_rect0_s1_burst_adapter_source0_valid),               //   source0.valid
		.source0_data          (ogpu_raster_unit_clip_rect0_s1_burst_adapter_source0_data),                //          .data
		.source0_channel       (ogpu_raster_unit_clip_rect0_s1_burst_adapter_source0_channel),             //          .channel
		.source0_startofpacket (ogpu_raster_unit_clip_rect0_s1_burst_adapter_source0_startofpacket),       //          .startofpacket
		.source0_endofpacket   (ogpu_raster_unit_clip_rect0_s1_burst_adapter_source0_endofpacket),         //          .endofpacket
		.source0_ready         (ogpu_raster_unit_clip_rect0_s1_burst_adapter_source0_ready)                //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_raster_unit_command_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_raster_unit_command_s1_cmd_width_adapter_src_valid),                  //     sink0.valid
		.sink0_data            (ogpu_raster_unit_command_s1_cmd_width_adapter_src_data),                   //          .data
		.sink0_channel         (ogpu_raster_unit_command_s1_cmd_width_adapter_src_channel),                //          .channel
		.sink0_startofpacket   (ogpu_raster_unit_command_s1_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.sink0_endofpacket     (ogpu_raster_unit_command_s1_cmd_width_adapter_src_endofpacket),            //          .endofpacket
		.sink0_ready           (ogpu_raster_unit_command_s1_cmd_width_adapter_src_ready),                  //          .ready
		.source0_valid         (ogpu_raster_unit_command_s1_burst_adapter_source0_valid),                  //   source0.valid
		.source0_data          (ogpu_raster_unit_command_s1_burst_adapter_source0_data),                   //          .data
		.source0_channel       (ogpu_raster_unit_command_s1_burst_adapter_source0_channel),                //          .channel
		.source0_startofpacket (ogpu_raster_unit_command_s1_burst_adapter_source0_startofpacket),          //          .startofpacket
		.source0_endofpacket   (ogpu_raster_unit_command_s1_burst_adapter_source0_endofpacket),            //          .endofpacket
		.source0_ready         (ogpu_raster_unit_command_s1_burst_adapter_source0_ready)                   //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_raster_unit_status_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_raster_unit_status_s1_cmd_width_adapter_src_valid),                   //     sink0.valid
		.sink0_data            (ogpu_raster_unit_status_s1_cmd_width_adapter_src_data),                    //          .data
		.sink0_channel         (ogpu_raster_unit_status_s1_cmd_width_adapter_src_channel),                 //          .channel
		.sink0_startofpacket   (ogpu_raster_unit_status_s1_cmd_width_adapter_src_startofpacket),           //          .startofpacket
		.sink0_endofpacket     (ogpu_raster_unit_status_s1_cmd_width_adapter_src_endofpacket),             //          .endofpacket
		.sink0_ready           (ogpu_raster_unit_status_s1_cmd_width_adapter_src_ready),                   //          .ready
		.source0_valid         (ogpu_raster_unit_status_s1_burst_adapter_source0_valid),                   //   source0.valid
		.source0_data          (ogpu_raster_unit_status_s1_burst_adapter_source0_data),                    //          .data
		.source0_channel       (ogpu_raster_unit_status_s1_burst_adapter_source0_channel),                 //          .channel
		.source0_startofpacket (ogpu_raster_unit_status_s1_burst_adapter_source0_startofpacket),           //          .startofpacket
		.source0_endofpacket   (ogpu_raster_unit_status_s1_burst_adapter_source0_endofpacket),             //          .endofpacket
		.source0_ready         (ogpu_raster_unit_status_s1_burst_adapter_source0_ready)                    //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_raster_unit_v2z_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_raster_unit_v2z_s1_cmd_width_adapter_src_valid),                      //     sink0.valid
		.sink0_data            (ogpu_raster_unit_v2z_s1_cmd_width_adapter_src_data),                       //          .data
		.sink0_channel         (ogpu_raster_unit_v2z_s1_cmd_width_adapter_src_channel),                    //          .channel
		.sink0_startofpacket   (ogpu_raster_unit_v2z_s1_cmd_width_adapter_src_startofpacket),              //          .startofpacket
		.sink0_endofpacket     (ogpu_raster_unit_v2z_s1_cmd_width_adapter_src_endofpacket),                //          .endofpacket
		.sink0_ready           (ogpu_raster_unit_v2z_s1_cmd_width_adapter_src_ready),                      //          .ready
		.source0_valid         (ogpu_raster_unit_v2z_s1_burst_adapter_source0_valid),                      //   source0.valid
		.source0_data          (ogpu_raster_unit_v2z_s1_burst_adapter_source0_data),                       //          .data
		.source0_channel       (ogpu_raster_unit_v2z_s1_burst_adapter_source0_channel),                    //          .channel
		.source0_startofpacket (ogpu_raster_unit_v2z_s1_burst_adapter_source0_startofpacket),              //          .startofpacket
		.source0_endofpacket   (ogpu_raster_unit_v2z_s1_burst_adapter_source0_endofpacket),                //          .endofpacket
		.source0_ready         (ogpu_raster_unit_v2z_s1_burst_adapter_source0_ready)                       //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_raster_unit_v2y_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_raster_unit_v2y_s1_cmd_width_adapter_src_valid),                      //     sink0.valid
		.sink0_data            (ogpu_raster_unit_v2y_s1_cmd_width_adapter_src_data),                       //          .data
		.sink0_channel         (ogpu_raster_unit_v2y_s1_cmd_width_adapter_src_channel),                    //          .channel
		.sink0_startofpacket   (ogpu_raster_unit_v2y_s1_cmd_width_adapter_src_startofpacket),              //          .startofpacket
		.sink0_endofpacket     (ogpu_raster_unit_v2y_s1_cmd_width_adapter_src_endofpacket),                //          .endofpacket
		.sink0_ready           (ogpu_raster_unit_v2y_s1_cmd_width_adapter_src_ready),                      //          .ready
		.source0_valid         (ogpu_raster_unit_v2y_s1_burst_adapter_source0_valid),                      //   source0.valid
		.source0_data          (ogpu_raster_unit_v2y_s1_burst_adapter_source0_data),                       //          .data
		.source0_channel       (ogpu_raster_unit_v2y_s1_burst_adapter_source0_channel),                    //          .channel
		.source0_startofpacket (ogpu_raster_unit_v2y_s1_burst_adapter_source0_startofpacket),              //          .startofpacket
		.source0_endofpacket   (ogpu_raster_unit_v2y_s1_burst_adapter_source0_endofpacket),                //          .endofpacket
		.source0_ready         (ogpu_raster_unit_v2y_s1_burst_adapter_source0_ready)                       //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_raster_unit_v2x_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_raster_unit_v2x_s1_cmd_width_adapter_src_valid),                      //     sink0.valid
		.sink0_data            (ogpu_raster_unit_v2x_s1_cmd_width_adapter_src_data),                       //          .data
		.sink0_channel         (ogpu_raster_unit_v2x_s1_cmd_width_adapter_src_channel),                    //          .channel
		.sink0_startofpacket   (ogpu_raster_unit_v2x_s1_cmd_width_adapter_src_startofpacket),              //          .startofpacket
		.sink0_endofpacket     (ogpu_raster_unit_v2x_s1_cmd_width_adapter_src_endofpacket),                //          .endofpacket
		.sink0_ready           (ogpu_raster_unit_v2x_s1_cmd_width_adapter_src_ready),                      //          .ready
		.source0_valid         (ogpu_raster_unit_v2x_s1_burst_adapter_source0_valid),                      //   source0.valid
		.source0_data          (ogpu_raster_unit_v2x_s1_burst_adapter_source0_data),                       //          .data
		.source0_channel       (ogpu_raster_unit_v2x_s1_burst_adapter_source0_channel),                    //          .channel
		.source0_startofpacket (ogpu_raster_unit_v2x_s1_burst_adapter_source0_startofpacket),              //          .startofpacket
		.source0_endofpacket   (ogpu_raster_unit_v2x_s1_burst_adapter_source0_endofpacket),                //          .endofpacket
		.source0_ready         (ogpu_raster_unit_v2x_s1_burst_adapter_source0_ready)                       //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_raster_unit_v1z_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_raster_unit_v1z_s1_cmd_width_adapter_src_valid),                      //     sink0.valid
		.sink0_data            (ogpu_raster_unit_v1z_s1_cmd_width_adapter_src_data),                       //          .data
		.sink0_channel         (ogpu_raster_unit_v1z_s1_cmd_width_adapter_src_channel),                    //          .channel
		.sink0_startofpacket   (ogpu_raster_unit_v1z_s1_cmd_width_adapter_src_startofpacket),              //          .startofpacket
		.sink0_endofpacket     (ogpu_raster_unit_v1z_s1_cmd_width_adapter_src_endofpacket),                //          .endofpacket
		.sink0_ready           (ogpu_raster_unit_v1z_s1_cmd_width_adapter_src_ready),                      //          .ready
		.source0_valid         (ogpu_raster_unit_v1z_s1_burst_adapter_source0_valid),                      //   source0.valid
		.source0_data          (ogpu_raster_unit_v1z_s1_burst_adapter_source0_data),                       //          .data
		.source0_channel       (ogpu_raster_unit_v1z_s1_burst_adapter_source0_channel),                    //          .channel
		.source0_startofpacket (ogpu_raster_unit_v1z_s1_burst_adapter_source0_startofpacket),              //          .startofpacket
		.source0_endofpacket   (ogpu_raster_unit_v1z_s1_burst_adapter_source0_endofpacket),                //          .endofpacket
		.source0_ready         (ogpu_raster_unit_v1z_s1_burst_adapter_source0_ready)                       //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_raster_unit_v1y_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_raster_unit_v1y_s1_cmd_width_adapter_src_valid),                      //     sink0.valid
		.sink0_data            (ogpu_raster_unit_v1y_s1_cmd_width_adapter_src_data),                       //          .data
		.sink0_channel         (ogpu_raster_unit_v1y_s1_cmd_width_adapter_src_channel),                    //          .channel
		.sink0_startofpacket   (ogpu_raster_unit_v1y_s1_cmd_width_adapter_src_startofpacket),              //          .startofpacket
		.sink0_endofpacket     (ogpu_raster_unit_v1y_s1_cmd_width_adapter_src_endofpacket),                //          .endofpacket
		.sink0_ready           (ogpu_raster_unit_v1y_s1_cmd_width_adapter_src_ready),                      //          .ready
		.source0_valid         (ogpu_raster_unit_v1y_s1_burst_adapter_source0_valid),                      //   source0.valid
		.source0_data          (ogpu_raster_unit_v1y_s1_burst_adapter_source0_data),                       //          .data
		.source0_channel       (ogpu_raster_unit_v1y_s1_burst_adapter_source0_channel),                    //          .channel
		.source0_startofpacket (ogpu_raster_unit_v1y_s1_burst_adapter_source0_startofpacket),              //          .startofpacket
		.source0_endofpacket   (ogpu_raster_unit_v1y_s1_burst_adapter_source0_endofpacket),                //          .endofpacket
		.source0_ready         (ogpu_raster_unit_v1y_s1_burst_adapter_source0_ready)                       //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_raster_unit_v1x_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_raster_unit_v1x_s1_cmd_width_adapter_src_valid),                      //     sink0.valid
		.sink0_data            (ogpu_raster_unit_v1x_s1_cmd_width_adapter_src_data),                       //          .data
		.sink0_channel         (ogpu_raster_unit_v1x_s1_cmd_width_adapter_src_channel),                    //          .channel
		.sink0_startofpacket   (ogpu_raster_unit_v1x_s1_cmd_width_adapter_src_startofpacket),              //          .startofpacket
		.sink0_endofpacket     (ogpu_raster_unit_v1x_s1_cmd_width_adapter_src_endofpacket),                //          .endofpacket
		.sink0_ready           (ogpu_raster_unit_v1x_s1_cmd_width_adapter_src_ready),                      //          .ready
		.source0_valid         (ogpu_raster_unit_v1x_s1_burst_adapter_source0_valid),                      //   source0.valid
		.source0_data          (ogpu_raster_unit_v1x_s1_burst_adapter_source0_data),                       //          .data
		.source0_channel       (ogpu_raster_unit_v1x_s1_burst_adapter_source0_channel),                    //          .channel
		.source0_startofpacket (ogpu_raster_unit_v1x_s1_burst_adapter_source0_startofpacket),              //          .startofpacket
		.source0_endofpacket   (ogpu_raster_unit_v1x_s1_burst_adapter_source0_endofpacket),                //          .endofpacket
		.source0_ready         (ogpu_raster_unit_v1x_s1_burst_adapter_source0_ready)                       //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_raster_unit_v0z_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_raster_unit_v0z_s1_cmd_width_adapter_src_valid),                      //     sink0.valid
		.sink0_data            (ogpu_raster_unit_v0z_s1_cmd_width_adapter_src_data),                       //          .data
		.sink0_channel         (ogpu_raster_unit_v0z_s1_cmd_width_adapter_src_channel),                    //          .channel
		.sink0_startofpacket   (ogpu_raster_unit_v0z_s1_cmd_width_adapter_src_startofpacket),              //          .startofpacket
		.sink0_endofpacket     (ogpu_raster_unit_v0z_s1_cmd_width_adapter_src_endofpacket),                //          .endofpacket
		.sink0_ready           (ogpu_raster_unit_v0z_s1_cmd_width_adapter_src_ready),                      //          .ready
		.source0_valid         (ogpu_raster_unit_v0z_s1_burst_adapter_source0_valid),                      //   source0.valid
		.source0_data          (ogpu_raster_unit_v0z_s1_burst_adapter_source0_data),                       //          .data
		.source0_channel       (ogpu_raster_unit_v0z_s1_burst_adapter_source0_channel),                    //          .channel
		.source0_startofpacket (ogpu_raster_unit_v0z_s1_burst_adapter_source0_startofpacket),              //          .startofpacket
		.source0_endofpacket   (ogpu_raster_unit_v0z_s1_burst_adapter_source0_endofpacket),                //          .endofpacket
		.source0_ready         (ogpu_raster_unit_v0z_s1_burst_adapter_source0_ready)                       //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_raster_unit_v0y_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_raster_unit_v0y_s1_cmd_width_adapter_src_valid),                      //     sink0.valid
		.sink0_data            (ogpu_raster_unit_v0y_s1_cmd_width_adapter_src_data),                       //          .data
		.sink0_channel         (ogpu_raster_unit_v0y_s1_cmd_width_adapter_src_channel),                    //          .channel
		.sink0_startofpacket   (ogpu_raster_unit_v0y_s1_cmd_width_adapter_src_startofpacket),              //          .startofpacket
		.sink0_endofpacket     (ogpu_raster_unit_v0y_s1_cmd_width_adapter_src_endofpacket),                //          .endofpacket
		.sink0_ready           (ogpu_raster_unit_v0y_s1_cmd_width_adapter_src_ready),                      //          .ready
		.source0_valid         (ogpu_raster_unit_v0y_s1_burst_adapter_source0_valid),                      //   source0.valid
		.source0_data          (ogpu_raster_unit_v0y_s1_burst_adapter_source0_data),                       //          .data
		.source0_channel       (ogpu_raster_unit_v0y_s1_burst_adapter_source0_channel),                    //          .channel
		.source0_startofpacket (ogpu_raster_unit_v0y_s1_burst_adapter_source0_startofpacket),              //          .startofpacket
		.source0_endofpacket   (ogpu_raster_unit_v0y_s1_burst_adapter_source0_endofpacket),                //          .endofpacket
		.source0_ready         (ogpu_raster_unit_v0y_s1_burst_adapter_source0_ready)                       //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_raster_unit_v0x_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_raster_unit_v0x_s1_cmd_width_adapter_src_valid),                      //     sink0.valid
		.sink0_data            (ogpu_raster_unit_v0x_s1_cmd_width_adapter_src_data),                       //          .data
		.sink0_channel         (ogpu_raster_unit_v0x_s1_cmd_width_adapter_src_channel),                    //          .channel
		.sink0_startofpacket   (ogpu_raster_unit_v0x_s1_cmd_width_adapter_src_startofpacket),              //          .startofpacket
		.sink0_endofpacket     (ogpu_raster_unit_v0x_s1_cmd_width_adapter_src_endofpacket),                //          .endofpacket
		.sink0_ready           (ogpu_raster_unit_v0x_s1_cmd_width_adapter_src_ready),                      //          .ready
		.source0_valid         (ogpu_raster_unit_v0x_s1_burst_adapter_source0_valid),                      //   source0.valid
		.source0_data          (ogpu_raster_unit_v0x_s1_burst_adapter_source0_data),                       //          .data
		.source0_channel       (ogpu_raster_unit_v0x_s1_burst_adapter_source0_channel),                    //          .channel
		.source0_startofpacket (ogpu_raster_unit_v0x_s1_burst_adapter_source0_startofpacket),              //          .startofpacket
		.source0_endofpacket   (ogpu_raster_unit_v0x_s1_burst_adapter_source0_endofpacket),                //          .endofpacket
		.source0_ready         (ogpu_raster_unit_v0x_s1_burst_adapter_source0_ready)                       //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_quad_store_req_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_quad_store_req_s1_cmd_width_adapter_src_valid),                       //     sink0.valid
		.sink0_data            (ogpu_quad_store_req_s1_cmd_width_adapter_src_data),                        //          .data
		.sink0_channel         (ogpu_quad_store_req_s1_cmd_width_adapter_src_channel),                     //          .channel
		.sink0_startofpacket   (ogpu_quad_store_req_s1_cmd_width_adapter_src_startofpacket),               //          .startofpacket
		.sink0_endofpacket     (ogpu_quad_store_req_s1_cmd_width_adapter_src_endofpacket),                 //          .endofpacket
		.sink0_ready           (ogpu_quad_store_req_s1_cmd_width_adapter_src_ready),                       //          .ready
		.source0_valid         (ogpu_quad_store_req_s1_burst_adapter_source0_valid),                       //   source0.valid
		.source0_data          (ogpu_quad_store_req_s1_burst_adapter_source0_data),                        //          .data
		.source0_channel       (ogpu_quad_store_req_s1_burst_adapter_source0_channel),                     //          .channel
		.source0_startofpacket (ogpu_quad_store_req_s1_burst_adapter_source0_startofpacket),               //          .startofpacket
		.source0_endofpacket   (ogpu_quad_store_req_s1_burst_adapter_source0_endofpacket),                 //          .endofpacket
		.source0_ready         (ogpu_quad_store_req_s1_burst_adapter_source0_ready)                        //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_quad_store_data_high_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_quad_store_data_high_s1_cmd_width_adapter_src_valid),                 //     sink0.valid
		.sink0_data            (ogpu_quad_store_data_high_s1_cmd_width_adapter_src_data),                  //          .data
		.sink0_channel         (ogpu_quad_store_data_high_s1_cmd_width_adapter_src_channel),               //          .channel
		.sink0_startofpacket   (ogpu_quad_store_data_high_s1_cmd_width_adapter_src_startofpacket),         //          .startofpacket
		.sink0_endofpacket     (ogpu_quad_store_data_high_s1_cmd_width_adapter_src_endofpacket),           //          .endofpacket
		.sink0_ready           (ogpu_quad_store_data_high_s1_cmd_width_adapter_src_ready),                 //          .ready
		.source0_valid         (ogpu_quad_store_data_high_s1_burst_adapter_source0_valid),                 //   source0.valid
		.source0_data          (ogpu_quad_store_data_high_s1_burst_adapter_source0_data),                  //          .data
		.source0_channel       (ogpu_quad_store_data_high_s1_burst_adapter_source0_channel),               //          .channel
		.source0_startofpacket (ogpu_quad_store_data_high_s1_burst_adapter_source0_startofpacket),         //          .startofpacket
		.source0_endofpacket   (ogpu_quad_store_data_high_s1_burst_adapter_source0_endofpacket),           //          .endofpacket
		.source0_ready         (ogpu_quad_store_data_high_s1_burst_adapter_source0_ready)                  //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_quad_store_data_low_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_quad_store_data_low_s1_cmd_width_adapter_src_valid),                  //     sink0.valid
		.sink0_data            (ogpu_quad_store_data_low_s1_cmd_width_adapter_src_data),                   //          .data
		.sink0_channel         (ogpu_quad_store_data_low_s1_cmd_width_adapter_src_channel),                //          .channel
		.sink0_startofpacket   (ogpu_quad_store_data_low_s1_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.sink0_endofpacket     (ogpu_quad_store_data_low_s1_cmd_width_adapter_src_endofpacket),            //          .endofpacket
		.sink0_ready           (ogpu_quad_store_data_low_s1_cmd_width_adapter_src_ready),                  //          .ready
		.source0_valid         (ogpu_quad_store_data_low_s1_burst_adapter_source0_valid),                  //   source0.valid
		.source0_data          (ogpu_quad_store_data_low_s1_burst_adapter_source0_data),                   //          .data
		.source0_channel       (ogpu_quad_store_data_low_s1_burst_adapter_source0_channel),                //          .channel
		.source0_startofpacket (ogpu_quad_store_data_low_s1_burst_adapter_source0_startofpacket),          //          .startofpacket
		.source0_endofpacket   (ogpu_quad_store_data_low_s1_burst_adapter_source0_endofpacket),            //          .endofpacket
		.source0_ready         (ogpu_quad_store_data_low_s1_burst_adapter_source0_ready)                   //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_quad_store_ack_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_quad_store_ack_s1_cmd_width_adapter_src_valid),                       //     sink0.valid
		.sink0_data            (ogpu_quad_store_ack_s1_cmd_width_adapter_src_data),                        //          .data
		.sink0_channel         (ogpu_quad_store_ack_s1_cmd_width_adapter_src_channel),                     //          .channel
		.sink0_startofpacket   (ogpu_quad_store_ack_s1_cmd_width_adapter_src_startofpacket),               //          .startofpacket
		.sink0_endofpacket     (ogpu_quad_store_ack_s1_cmd_width_adapter_src_endofpacket),                 //          .endofpacket
		.sink0_ready           (ogpu_quad_store_ack_s1_cmd_width_adapter_src_ready),                       //          .ready
		.source0_valid         (ogpu_quad_store_ack_s1_burst_adapter_source0_valid),                       //   source0.valid
		.source0_data          (ogpu_quad_store_ack_s1_burst_adapter_source0_data),                        //          .data
		.source0_channel       (ogpu_quad_store_ack_s1_burst_adapter_source0_channel),                     //          .channel
		.source0_startofpacket (ogpu_quad_store_ack_s1_burst_adapter_source0_startofpacket),               //          .startofpacket
		.source0_endofpacket   (ogpu_quad_store_ack_s1_burst_adapter_source0_endofpacket),                 //          .endofpacket
		.source0_ready         (ogpu_quad_store_ack_s1_burst_adapter_source0_ready)                        //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (25),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ogpu_reset_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ogpu_reset_s1_cmd_width_adapter_src_valid),                                //     sink0.valid
		.sink0_data            (ogpu_reset_s1_cmd_width_adapter_src_data),                                 //          .data
		.sink0_channel         (ogpu_reset_s1_cmd_width_adapter_src_channel),                              //          .channel
		.sink0_startofpacket   (ogpu_reset_s1_cmd_width_adapter_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (ogpu_reset_s1_cmd_width_adapter_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (ogpu_reset_s1_cmd_width_adapter_src_ready),                                //          .ready
		.source0_valid         (ogpu_reset_s1_burst_adapter_source0_valid),                                //   source0.valid
		.source0_data          (ogpu_reset_s1_burst_adapter_source0_data),                                 //          .data
		.source0_channel       (ogpu_reset_s1_burst_adapter_source0_channel),                              //          .channel
		.source0_startofpacket (ogpu_reset_s1_burst_adapter_source0_startofpacket),                        //          .startofpacket
		.source0_endofpacket   (ogpu_reset_s1_burst_adapter_source0_endofpacket),                          //          .endofpacket
		.source0_ready         (ogpu_reset_s1_burst_adapter_source0_ready)                                 //          .ready
	);

	soc_system_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                 (clk_0_clk_clk),                                                    //        clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_0_h2f_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (hps_0_h2f_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (hps_0_h2f_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (hps_0_h2f_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                             //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                             //           .valid
		.src0_data           (cmd_demux_src0_data),                                              //           .data
		.src0_channel        (cmd_demux_src0_channel),                                           //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                                     //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                                       //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                             //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                             //           .valid
		.src1_data           (cmd_demux_src1_data),                                              //           .data
		.src1_channel        (cmd_demux_src1_channel),                                           //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                                     //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                                       //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                             //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                             //           .valid
		.src2_data           (cmd_demux_src2_data),                                              //           .data
		.src2_channel        (cmd_demux_src2_channel),                                           //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                                     //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                                       //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                             //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                             //           .valid
		.src3_data           (cmd_demux_src3_data),                                              //           .data
		.src3_channel        (cmd_demux_src3_channel),                                           //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                                     //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                                       //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                             //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                             //           .valid
		.src4_data           (cmd_demux_src4_data),                                              //           .data
		.src4_channel        (cmd_demux_src4_channel),                                           //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                                     //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                                       //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                             //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                             //           .valid
		.src5_data           (cmd_demux_src5_data),                                              //           .data
		.src5_channel        (cmd_demux_src5_channel),                                           //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                                     //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                                       //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                             //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                             //           .valid
		.src6_data           (cmd_demux_src6_data),                                              //           .data
		.src6_channel        (cmd_demux_src6_channel),                                           //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                                     //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                                       //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                             //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                             //           .valid
		.src7_data           (cmd_demux_src7_data),                                              //           .data
		.src7_channel        (cmd_demux_src7_channel),                                           //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                                     //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                                       //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                             //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                             //           .valid
		.src8_data           (cmd_demux_src8_data),                                              //           .data
		.src8_channel        (cmd_demux_src8_channel),                                           //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                                     //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                                       //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                             //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                             //           .valid
		.src9_data           (cmd_demux_src9_data),                                              //           .data
		.src9_channel        (cmd_demux_src9_channel),                                           //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                                     //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                                       //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                            //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                            //           .valid
		.src10_data          (cmd_demux_src10_data),                                             //           .data
		.src10_channel       (cmd_demux_src10_channel),                                          //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                                    //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                                      //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                            //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                            //           .valid
		.src11_data          (cmd_demux_src11_data),                                             //           .data
		.src11_channel       (cmd_demux_src11_channel),                                          //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                                    //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                                      //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                                            //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                                            //           .valid
		.src12_data          (cmd_demux_src12_data),                                             //           .data
		.src12_channel       (cmd_demux_src12_channel),                                          //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                                    //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                                      //           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                                            //      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                                            //           .valid
		.src13_data          (cmd_demux_src13_data),                                             //           .data
		.src13_channel       (cmd_demux_src13_channel),                                          //           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                                    //           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                                      //           .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                                            //      src14.ready
		.src14_valid         (cmd_demux_src14_valid),                                            //           .valid
		.src14_data          (cmd_demux_src14_data),                                             //           .data
		.src14_channel       (cmd_demux_src14_channel),                                          //           .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                                    //           .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                                      //           .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                                            //      src15.ready
		.src15_valid         (cmd_demux_src15_valid),                                            //           .valid
		.src15_data          (cmd_demux_src15_data),                                             //           .data
		.src15_channel       (cmd_demux_src15_channel),                                          //           .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                                    //           .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                                      //           .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                                            //      src16.ready
		.src16_valid         (cmd_demux_src16_valid),                                            //           .valid
		.src16_data          (cmd_demux_src16_data),                                             //           .data
		.src16_channel       (cmd_demux_src16_channel),                                          //           .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                                    //           .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                                      //           .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                                            //      src17.ready
		.src17_valid         (cmd_demux_src17_valid),                                            //           .valid
		.src17_data          (cmd_demux_src17_data),                                             //           .data
		.src17_channel       (cmd_demux_src17_channel),                                          //           .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                                    //           .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                                      //           .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                                            //      src18.ready
		.src18_valid         (cmd_demux_src18_valid),                                            //           .valid
		.src18_data          (cmd_demux_src18_data),                                             //           .data
		.src18_channel       (cmd_demux_src18_channel),                                          //           .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                                    //           .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                                      //           .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                                            //      src19.ready
		.src19_valid         (cmd_demux_src19_valid),                                            //           .valid
		.src19_data          (cmd_demux_src19_data),                                             //           .data
		.src19_channel       (cmd_demux_src19_channel),                                          //           .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),                                    //           .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),                                      //           .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                                            //      src20.ready
		.src20_valid         (cmd_demux_src20_valid),                                            //           .valid
		.src20_data          (cmd_demux_src20_data),                                             //           .data
		.src20_channel       (cmd_demux_src20_channel),                                          //           .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),                                    //           .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket),                                      //           .endofpacket
		.src21_ready         (cmd_demux_src21_ready),                                            //      src21.ready
		.src21_valid         (cmd_demux_src21_valid),                                            //           .valid
		.src21_data          (cmd_demux_src21_data),                                             //           .data
		.src21_channel       (cmd_demux_src21_channel),                                          //           .channel
		.src21_startofpacket (cmd_demux_src21_startofpacket),                                    //           .startofpacket
		.src21_endofpacket   (cmd_demux_src21_endofpacket),                                      //           .endofpacket
		.src22_ready         (cmd_demux_src22_ready),                                            //      src22.ready
		.src22_valid         (cmd_demux_src22_valid),                                            //           .valid
		.src22_data          (cmd_demux_src22_data),                                             //           .data
		.src22_channel       (cmd_demux_src22_channel),                                          //           .channel
		.src22_startofpacket (cmd_demux_src22_startofpacket),                                    //           .startofpacket
		.src22_endofpacket   (cmd_demux_src22_endofpacket),                                      //           .endofpacket
		.src23_ready         (cmd_demux_src23_ready),                                            //      src23.ready
		.src23_valid         (cmd_demux_src23_valid),                                            //           .valid
		.src23_data          (cmd_demux_src23_data),                                             //           .data
		.src23_channel       (cmd_demux_src23_channel),                                          //           .channel
		.src23_startofpacket (cmd_demux_src23_startofpacket),                                    //           .startofpacket
		.src23_endofpacket   (cmd_demux_src23_endofpacket),                                      //           .endofpacket
		.src24_ready         (cmd_demux_src24_ready),                                            //      src24.ready
		.src24_valid         (cmd_demux_src24_valid),                                            //           .valid
		.src24_data          (cmd_demux_src24_data),                                             //           .data
		.src24_channel       (cmd_demux_src24_channel),                                          //           .channel
		.src24_startofpacket (cmd_demux_src24_startofpacket),                                    //           .startofpacket
		.src24_endofpacket   (cmd_demux_src24_endofpacket)                                       //           .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux cmd_demux_001 (
		.clk                 (clk_0_clk_clk),                                                    //        clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_0_h2f_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (hps_0_h2f_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (hps_0_h2f_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (hps_0_h2f_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                                         //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                                         //           .valid
		.src0_data           (cmd_demux_001_src0_data),                                          //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                                       //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                                   //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                                         //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                                         //           .valid
		.src1_data           (cmd_demux_001_src1_data),                                          //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                                       //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                                   //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                                         //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                                         //           .valid
		.src2_data           (cmd_demux_001_src2_data),                                          //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                                       //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),                                 //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                                   //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                                         //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                                         //           .valid
		.src3_data           (cmd_demux_001_src3_data),                                          //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                                       //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),                                 //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                                   //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                                         //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                                         //           .valid
		.src4_data           (cmd_demux_001_src4_data),                                          //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                                       //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),                                 //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                                   //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                                         //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                                         //           .valid
		.src5_data           (cmd_demux_001_src5_data),                                          //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                                       //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),                                 //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                                   //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                                         //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                                         //           .valid
		.src6_data           (cmd_demux_001_src6_data),                                          //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                                       //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),                                 //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                                   //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                                         //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                                         //           .valid
		.src7_data           (cmd_demux_001_src7_data),                                          //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                                       //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),                                 //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                                   //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                                         //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                                         //           .valid
		.src8_data           (cmd_demux_001_src8_data),                                          //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                                       //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),                                 //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                                   //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                                         //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                                         //           .valid
		.src9_data           (cmd_demux_001_src9_data),                                          //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                                       //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),                                 //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                                   //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                                        //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                                        //           .valid
		.src10_data          (cmd_demux_001_src10_data),                                         //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                                      //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),                                //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),                                  //           .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                                        //      src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                                        //           .valid
		.src11_data          (cmd_demux_001_src11_data),                                         //           .data
		.src11_channel       (cmd_demux_001_src11_channel),                                      //           .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),                                //           .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),                                  //           .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                                        //      src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                                        //           .valid
		.src12_data          (cmd_demux_001_src12_data),                                         //           .data
		.src12_channel       (cmd_demux_001_src12_channel),                                      //           .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),                                //           .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),                                  //           .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),                                        //      src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),                                        //           .valid
		.src13_data          (cmd_demux_001_src13_data),                                         //           .data
		.src13_channel       (cmd_demux_001_src13_channel),                                      //           .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),                                //           .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket),                                  //           .endofpacket
		.src14_ready         (cmd_demux_001_src14_ready),                                        //      src14.ready
		.src14_valid         (cmd_demux_001_src14_valid),                                        //           .valid
		.src14_data          (cmd_demux_001_src14_data),                                         //           .data
		.src14_channel       (cmd_demux_001_src14_channel),                                      //           .channel
		.src14_startofpacket (cmd_demux_001_src14_startofpacket),                                //           .startofpacket
		.src14_endofpacket   (cmd_demux_001_src14_endofpacket),                                  //           .endofpacket
		.src15_ready         (cmd_demux_001_src15_ready),                                        //      src15.ready
		.src15_valid         (cmd_demux_001_src15_valid),                                        //           .valid
		.src15_data          (cmd_demux_001_src15_data),                                         //           .data
		.src15_channel       (cmd_demux_001_src15_channel),                                      //           .channel
		.src15_startofpacket (cmd_demux_001_src15_startofpacket),                                //           .startofpacket
		.src15_endofpacket   (cmd_demux_001_src15_endofpacket),                                  //           .endofpacket
		.src16_ready         (cmd_demux_001_src16_ready),                                        //      src16.ready
		.src16_valid         (cmd_demux_001_src16_valid),                                        //           .valid
		.src16_data          (cmd_demux_001_src16_data),                                         //           .data
		.src16_channel       (cmd_demux_001_src16_channel),                                      //           .channel
		.src16_startofpacket (cmd_demux_001_src16_startofpacket),                                //           .startofpacket
		.src16_endofpacket   (cmd_demux_001_src16_endofpacket),                                  //           .endofpacket
		.src17_ready         (cmd_demux_001_src17_ready),                                        //      src17.ready
		.src17_valid         (cmd_demux_001_src17_valid),                                        //           .valid
		.src17_data          (cmd_demux_001_src17_data),                                         //           .data
		.src17_channel       (cmd_demux_001_src17_channel),                                      //           .channel
		.src17_startofpacket (cmd_demux_001_src17_startofpacket),                                //           .startofpacket
		.src17_endofpacket   (cmd_demux_001_src17_endofpacket),                                  //           .endofpacket
		.src18_ready         (cmd_demux_001_src18_ready),                                        //      src18.ready
		.src18_valid         (cmd_demux_001_src18_valid),                                        //           .valid
		.src18_data          (cmd_demux_001_src18_data),                                         //           .data
		.src18_channel       (cmd_demux_001_src18_channel),                                      //           .channel
		.src18_startofpacket (cmd_demux_001_src18_startofpacket),                                //           .startofpacket
		.src18_endofpacket   (cmd_demux_001_src18_endofpacket),                                  //           .endofpacket
		.src19_ready         (cmd_demux_001_src19_ready),                                        //      src19.ready
		.src19_valid         (cmd_demux_001_src19_valid),                                        //           .valid
		.src19_data          (cmd_demux_001_src19_data),                                         //           .data
		.src19_channel       (cmd_demux_001_src19_channel),                                      //           .channel
		.src19_startofpacket (cmd_demux_001_src19_startofpacket),                                //           .startofpacket
		.src19_endofpacket   (cmd_demux_001_src19_endofpacket),                                  //           .endofpacket
		.src20_ready         (cmd_demux_001_src20_ready),                                        //      src20.ready
		.src20_valid         (cmd_demux_001_src20_valid),                                        //           .valid
		.src20_data          (cmd_demux_001_src20_data),                                         //           .data
		.src20_channel       (cmd_demux_001_src20_channel),                                      //           .channel
		.src20_startofpacket (cmd_demux_001_src20_startofpacket),                                //           .startofpacket
		.src20_endofpacket   (cmd_demux_001_src20_endofpacket),                                  //           .endofpacket
		.src21_ready         (cmd_demux_001_src21_ready),                                        //      src21.ready
		.src21_valid         (cmd_demux_001_src21_valid),                                        //           .valid
		.src21_data          (cmd_demux_001_src21_data),                                         //           .data
		.src21_channel       (cmd_demux_001_src21_channel),                                      //           .channel
		.src21_startofpacket (cmd_demux_001_src21_startofpacket),                                //           .startofpacket
		.src21_endofpacket   (cmd_demux_001_src21_endofpacket),                                  //           .endofpacket
		.src22_ready         (cmd_demux_001_src22_ready),                                        //      src22.ready
		.src22_valid         (cmd_demux_001_src22_valid),                                        //           .valid
		.src22_data          (cmd_demux_001_src22_data),                                         //           .data
		.src22_channel       (cmd_demux_001_src22_channel),                                      //           .channel
		.src22_startofpacket (cmd_demux_001_src22_startofpacket),                                //           .startofpacket
		.src22_endofpacket   (cmd_demux_001_src22_endofpacket),                                  //           .endofpacket
		.src23_ready         (cmd_demux_001_src23_ready),                                        //      src23.ready
		.src23_valid         (cmd_demux_001_src23_valid),                                        //           .valid
		.src23_data          (cmd_demux_001_src23_data),                                         //           .data
		.src23_channel       (cmd_demux_001_src23_channel),                                      //           .channel
		.src23_startofpacket (cmd_demux_001_src23_startofpacket),                                //           .startofpacket
		.src23_endofpacket   (cmd_demux_001_src23_endofpacket),                                  //           .endofpacket
		.src24_ready         (cmd_demux_001_src24_ready),                                        //      src24.ready
		.src24_valid         (cmd_demux_001_src24_valid),                                        //           .valid
		.src24_data          (cmd_demux_001_src24_data),                                         //           .data
		.src24_channel       (cmd_demux_001_src24_channel),                                      //           .channel
		.src24_startofpacket (cmd_demux_001_src24_startofpacket),                                //           .startofpacket
		.src24_endofpacket   (cmd_demux_001_src24_endofpacket)                                   //           .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                        //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                        //          .valid
		.src_data            (cmd_mux_src_data),                                                         //          .data
		.src_channel         (cmd_mux_src_channel),                                                      //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                  //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                                     //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                                     //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                                   //          .channel
		.sink0_data          (cmd_demux_src0_data),                                                      //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                               //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                                 //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                                 //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                               //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                                  //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_001_src_data),                                                     //          .data
		.src_channel         (cmd_mux_001_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                                     //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                                     //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                                   //          .channel
		.sink0_data          (cmd_demux_src1_data),                                                      //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                                               //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                                                 //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                                                 //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                                               //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                                                  //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_002_src_data),                                                     //          .data
		.src_channel         (cmd_mux_002_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                                     //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                                     //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                                   //          .channel
		.sink0_data          (cmd_demux_src2_data),                                                      //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                                               //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                                                 //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                                                 //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                                               //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                                                  //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_003_src_data),                                                     //          .data
		.src_channel         (cmd_mux_003_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                                     //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                                     //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                                   //          .channel
		.sink0_data          (cmd_demux_src3_data),                                                      //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                                               //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                                                 //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                                                 //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                                               //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                                                  //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_004_src_data),                                                     //          .data
		.src_channel         (cmd_mux_004_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                                     //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                                     //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                                                   //          .channel
		.sink0_data          (cmd_demux_src4_data),                                                      //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                                               //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                                                 //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                                                 //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                                               //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                                                  //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_005_src_data),                                                     //          .data
		.src_channel         (cmd_mux_005_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                                     //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                                     //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                                                   //          .channel
		.sink0_data          (cmd_demux_src5_data),                                                      //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                                               //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                                                 //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                                                 //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                                               //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                                                  //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_006_src_data),                                                     //          .data
		.src_channel         (cmd_mux_006_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                                                     //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                                                     //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                                                   //          .channel
		.sink0_data          (cmd_demux_src6_data),                                                      //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                                               //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                                                 //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                                                 //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),                                               //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                                                  //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_007_src_data),                                                     //          .data
		.src_channel         (cmd_mux_007_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                                                     //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                                                     //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                                                   //          .channel
		.sink0_data          (cmd_demux_src7_data),                                                      //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                                               //          .endofpacket
		.sink1_ready         (cmd_demux_001_src7_ready),                                                 //     sink1.ready
		.sink1_valid         (cmd_demux_001_src7_valid),                                                 //          .valid
		.sink1_channel       (cmd_demux_001_src7_channel),                                               //          .channel
		.sink1_data          (cmd_demux_001_src7_data),                                                  //          .data
		.sink1_startofpacket (cmd_demux_001_src7_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src7_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_008_src_data),                                                     //          .data
		.src_channel         (cmd_mux_008_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                                                     //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                                                     //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                                                   //          .channel
		.sink0_data          (cmd_demux_src8_data),                                                      //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                                               //          .endofpacket
		.sink1_ready         (cmd_demux_001_src8_ready),                                                 //     sink1.ready
		.sink1_valid         (cmd_demux_001_src8_valid),                                                 //          .valid
		.sink1_channel       (cmd_demux_001_src8_channel),                                               //          .channel
		.sink1_data          (cmd_demux_001_src8_data),                                                  //          .data
		.sink1_startofpacket (cmd_demux_001_src8_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src8_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_009_src_data),                                                     //          .data
		.src_channel         (cmd_mux_009_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                                                     //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                                                     //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                                                   //          .channel
		.sink0_data          (cmd_demux_src9_data),                                                      //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),                                               //          .endofpacket
		.sink1_ready         (cmd_demux_001_src9_ready),                                                 //     sink1.ready
		.sink1_valid         (cmd_demux_001_src9_valid),                                                 //          .valid
		.sink1_channel       (cmd_demux_001_src9_channel),                                               //          .channel
		.sink1_data          (cmd_demux_001_src9_data),                                                  //          .data
		.sink1_startofpacket (cmd_demux_001_src9_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src9_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_010_src_data),                                                     //          .data
		.src_channel         (cmd_mux_010_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                                                    //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                                                  //          .channel
		.sink0_data          (cmd_demux_src10_data),                                                     //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),                                              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src10_ready),                                                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src10_valid),                                                //          .valid
		.sink1_channel       (cmd_demux_001_src10_channel),                                              //          .channel
		.sink1_data          (cmd_demux_001_src10_data),                                                 //          .data
		.sink1_startofpacket (cmd_demux_001_src10_startofpacket),                                        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src10_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_011_src_data),                                                     //          .data
		.src_channel         (cmd_mux_011_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                                                    //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                                                  //          .channel
		.sink0_data          (cmd_demux_src11_data),                                                     //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket),                                              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src11_ready),                                                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src11_valid),                                                //          .valid
		.sink1_channel       (cmd_demux_001_src11_channel),                                              //          .channel
		.sink1_data          (cmd_demux_001_src11_data),                                                 //          .data
		.sink1_startofpacket (cmd_demux_001_src11_startofpacket),                                        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src11_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_012 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_012_src_data),                                                     //          .data
		.src_channel         (cmd_mux_012_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                                                    //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                                                  //          .channel
		.sink0_data          (cmd_demux_src12_data),                                                     //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket),                                              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src12_ready),                                                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src12_valid),                                                //          .valid
		.sink1_channel       (cmd_demux_001_src12_channel),                                              //          .channel
		.sink1_data          (cmd_demux_001_src12_data),                                                 //          .data
		.sink1_startofpacket (cmd_demux_001_src12_startofpacket),                                        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src12_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_013 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_013_src_data),                                                     //          .data
		.src_channel         (cmd_mux_013_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                                                    //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                                                  //          .channel
		.sink0_data          (cmd_demux_src13_data),                                                     //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket),                                              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src13_ready),                                                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src13_valid),                                                //          .valid
		.sink1_channel       (cmd_demux_001_src13_channel),                                              //          .channel
		.sink1_data          (cmd_demux_001_src13_data),                                                 //          .data
		.sink1_startofpacket (cmd_demux_001_src13_startofpacket),                                        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src13_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_014 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_014_src_data),                                                     //          .data
		.src_channel         (cmd_mux_014_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                                                    //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                                                  //          .channel
		.sink0_data          (cmd_demux_src14_data),                                                     //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket),                                              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src14_ready),                                                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src14_valid),                                                //          .valid
		.sink1_channel       (cmd_demux_001_src14_channel),                                              //          .channel
		.sink1_data          (cmd_demux_001_src14_data),                                                 //          .data
		.sink1_startofpacket (cmd_demux_001_src14_startofpacket),                                        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src14_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_015 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_015_src_data),                                                     //          .data
		.src_channel         (cmd_mux_015_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                                                    //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                                                  //          .channel
		.sink0_data          (cmd_demux_src15_data),                                                     //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket),                                              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src15_ready),                                                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src15_valid),                                                //          .valid
		.sink1_channel       (cmd_demux_001_src15_channel),                                              //          .channel
		.sink1_data          (cmd_demux_001_src15_data),                                                 //          .data
		.sink1_startofpacket (cmd_demux_001_src15_startofpacket),                                        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src15_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_016 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_016_src_data),                                                     //          .data
		.src_channel         (cmd_mux_016_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                                                    //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                                                  //          .channel
		.sink0_data          (cmd_demux_src16_data),                                                     //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket),                                              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src16_ready),                                                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src16_valid),                                                //          .valid
		.sink1_channel       (cmd_demux_001_src16_channel),                                              //          .channel
		.sink1_data          (cmd_demux_001_src16_data),                                                 //          .data
		.sink1_startofpacket (cmd_demux_001_src16_startofpacket),                                        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src16_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_017 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_017_src_data),                                                     //          .data
		.src_channel         (cmd_mux_017_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                                                    //          .valid
		.sink0_channel       (cmd_demux_src17_channel),                                                  //          .channel
		.sink0_data          (cmd_demux_src17_data),                                                     //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket),                                              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src17_ready),                                                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src17_valid),                                                //          .valid
		.sink1_channel       (cmd_demux_001_src17_channel),                                              //          .channel
		.sink1_data          (cmd_demux_001_src17_data),                                                 //          .data
		.sink1_startofpacket (cmd_demux_001_src17_startofpacket),                                        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src17_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_018 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_018_src_data),                                                     //          .data
		.src_channel         (cmd_mux_018_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                                                    //          .valid
		.sink0_channel       (cmd_demux_src18_channel),                                                  //          .channel
		.sink0_data          (cmd_demux_src18_data),                                                     //          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket),                                              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src18_ready),                                                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src18_valid),                                                //          .valid
		.sink1_channel       (cmd_demux_001_src18_channel),                                              //          .channel
		.sink1_data          (cmd_demux_001_src18_data),                                                 //          .data
		.sink1_startofpacket (cmd_demux_001_src18_startofpacket),                                        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src18_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_019 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_019_src_data),                                                     //          .data
		.src_channel         (cmd_mux_019_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                                                    //          .valid
		.sink0_channel       (cmd_demux_src19_channel),                                                  //          .channel
		.sink0_data          (cmd_demux_src19_data),                                                     //          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket),                                              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src19_ready),                                                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src19_valid),                                                //          .valid
		.sink1_channel       (cmd_demux_001_src19_channel),                                              //          .channel
		.sink1_data          (cmd_demux_001_src19_data),                                                 //          .data
		.sink1_startofpacket (cmd_demux_001_src19_startofpacket),                                        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src19_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_020 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_020_src_data),                                                     //          .data
		.src_channel         (cmd_mux_020_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src20_ready),                                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src20_valid),                                                    //          .valid
		.sink0_channel       (cmd_demux_src20_channel),                                                  //          .channel
		.sink0_data          (cmd_demux_src20_data),                                                     //          .data
		.sink0_startofpacket (cmd_demux_src20_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src20_endofpacket),                                              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src20_ready),                                                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src20_valid),                                                //          .valid
		.sink1_channel       (cmd_demux_001_src20_channel),                                              //          .channel
		.sink1_data          (cmd_demux_001_src20_data),                                                 //          .data
		.sink1_startofpacket (cmd_demux_001_src20_startofpacket),                                        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src20_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_021 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_021_src_data),                                                     //          .data
		.src_channel         (cmd_mux_021_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src21_ready),                                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src21_valid),                                                    //          .valid
		.sink0_channel       (cmd_demux_src21_channel),                                                  //          .channel
		.sink0_data          (cmd_demux_src21_data),                                                     //          .data
		.sink0_startofpacket (cmd_demux_src21_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src21_endofpacket),                                              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src21_ready),                                                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src21_valid),                                                //          .valid
		.sink1_channel       (cmd_demux_001_src21_channel),                                              //          .channel
		.sink1_data          (cmd_demux_001_src21_data),                                                 //          .data
		.sink1_startofpacket (cmd_demux_001_src21_startofpacket),                                        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src21_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_022 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_022_src_data),                                                     //          .data
		.src_channel         (cmd_mux_022_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src22_ready),                                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src22_valid),                                                    //          .valid
		.sink0_channel       (cmd_demux_src22_channel),                                                  //          .channel
		.sink0_data          (cmd_demux_src22_data),                                                     //          .data
		.sink0_startofpacket (cmd_demux_src22_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src22_endofpacket),                                              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src22_ready),                                                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src22_valid),                                                //          .valid
		.sink1_channel       (cmd_demux_001_src22_channel),                                              //          .channel
		.sink1_data          (cmd_demux_001_src22_data),                                                 //          .data
		.sink1_startofpacket (cmd_demux_001_src22_startofpacket),                                        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src22_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_023 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_023_src_data),                                                     //          .data
		.src_channel         (cmd_mux_023_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src23_ready),                                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src23_valid),                                                    //          .valid
		.sink0_channel       (cmd_demux_src23_channel),                                                  //          .channel
		.sink0_data          (cmd_demux_src23_data),                                                     //          .data
		.sink0_startofpacket (cmd_demux_src23_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src23_endofpacket),                                              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src23_ready),                                                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src23_valid),                                                //          .valid
		.sink1_channel       (cmd_demux_001_src23_channel),                                              //          .channel
		.sink1_data          (cmd_demux_001_src23_data),                                                 //          .data
		.sink1_startofpacket (cmd_demux_001_src23_startofpacket),                                        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src23_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_024 (
		.clk                 (clk_0_clk_clk),                                                            //       clk.clk
		.reset               (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                                                    //       src.ready
		.src_valid           (cmd_mux_024_src_valid),                                                    //          .valid
		.src_data            (cmd_mux_024_src_data),                                                     //          .data
		.src_channel         (cmd_mux_024_src_channel),                                                  //          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (cmd_demux_src24_ready),                                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src24_valid),                                                    //          .valid
		.sink0_channel       (cmd_demux_src24_channel),                                                  //          .channel
		.sink0_data          (cmd_demux_src24_data),                                                     //          .data
		.sink0_startofpacket (cmd_demux_src24_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src24_endofpacket),                                              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src24_ready),                                                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src24_valid),                                                //          .valid
		.sink1_channel       (cmd_demux_001_src24_channel),                                              //          .channel
		.sink1_data          (cmd_demux_001_src24_data),                                                 //          .data
		.sink1_startofpacket (cmd_demux_001_src24_startofpacket),                                        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src24_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                                                 //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.sink_ready         (ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                          //          .valid
		.src0_data          (rsp_demux_src0_data),                                                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                                                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                                    //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                                          //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                                          //          .valid
		.src1_data          (rsp_demux_src1_data),                                                           //          .data
		.src1_channel       (rsp_demux_src1_channel),                                                        //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                                                //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.sink_ready         (ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                                     //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                                     //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                                      //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                                   //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                                               //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                                     //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                                     //          .valid
		.src1_data          (rsp_demux_001_src1_data),                                                      //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                                                   //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                                             //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter_src_ready),             //      sink.ready
		.sink_channel       (ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter_src_channel),           //          .channel
		.sink_data          (ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter_src_data),              //          .data
		.sink_startofpacket (ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter_src_endofpacket),       //          .endofpacket
		.sink_valid         (ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter_src_valid),             //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_002_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter_src_ready),             //      sink.ready
		.sink_channel       (ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter_src_channel),           //          .channel
		.sink_data          (ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter_src_data),              //          .data
		.sink_startofpacket (ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter_src_endofpacket),       //          .endofpacket
		.sink_valid         (ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter_src_valid),             //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_003_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter_src_ready),             //      sink.ready
		.sink_channel       (ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter_src_channel),           //          .channel
		.sink_data          (ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter_src_data),              //          .data
		.sink_startofpacket (ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter_src_endofpacket),       //          .endofpacket
		.sink_valid         (ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter_src_valid),             //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_004_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_raster_unit_tile1_s1_rsp_width_adapter_src_ready),                    //      sink.ready
		.sink_channel       (ogpu_raster_unit_tile1_s1_rsp_width_adapter_src_channel),                  //          .channel
		.sink_data          (ogpu_raster_unit_tile1_s1_rsp_width_adapter_src_data),                     //          .data
		.sink_startofpacket (ogpu_raster_unit_tile1_s1_rsp_width_adapter_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_tile1_s1_rsp_width_adapter_src_endofpacket),              //          .endofpacket
		.sink_valid         (ogpu_raster_unit_tile1_s1_rsp_width_adapter_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_005_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_raster_unit_tile0_s1_rsp_width_adapter_src_ready),                    //      sink.ready
		.sink_channel       (ogpu_raster_unit_tile0_s1_rsp_width_adapter_src_channel),                  //          .channel
		.sink_data          (ogpu_raster_unit_tile0_s1_rsp_width_adapter_src_data),                     //          .data
		.sink_startofpacket (ogpu_raster_unit_tile0_s1_rsp_width_adapter_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_tile0_s1_rsp_width_adapter_src_endofpacket),              //          .endofpacket
		.sink_valid         (ogpu_raster_unit_tile0_s1_rsp_width_adapter_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_006_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter_src_ready),               //      sink.ready
		.sink_channel       (ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter_src_channel),             //          .channel
		.sink_data          (ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter_src_data),                //          .data
		.sink_startofpacket (ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter_src_startofpacket),       //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter_src_endofpacket),         //          .endofpacket
		.sink_valid         (ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter_src_valid),               //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_007_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_007_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter_src_ready),               //      sink.ready
		.sink_channel       (ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter_src_channel),             //          .channel
		.sink_data          (ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter_src_data),                //          .data
		.sink_startofpacket (ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter_src_startofpacket),       //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter_src_endofpacket),         //          .endofpacket
		.sink_valid         (ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter_src_valid),               //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_008_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_008_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_raster_unit_command_s1_rsp_width_adapter_src_ready),                  //      sink.ready
		.sink_channel       (ogpu_raster_unit_command_s1_rsp_width_adapter_src_channel),                //          .channel
		.sink_data          (ogpu_raster_unit_command_s1_rsp_width_adapter_src_data),                   //          .data
		.sink_startofpacket (ogpu_raster_unit_command_s1_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_command_s1_rsp_width_adapter_src_endofpacket),            //          .endofpacket
		.sink_valid         (ogpu_raster_unit_command_s1_rsp_width_adapter_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_009_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_009_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_010 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_raster_unit_status_s1_rsp_width_adapter_src_ready),                   //      sink.ready
		.sink_channel       (ogpu_raster_unit_status_s1_rsp_width_adapter_src_channel),                 //          .channel
		.sink_data          (ogpu_raster_unit_status_s1_rsp_width_adapter_src_data),                    //          .data
		.sink_startofpacket (ogpu_raster_unit_status_s1_rsp_width_adapter_src_startofpacket),           //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_status_s1_rsp_width_adapter_src_endofpacket),             //          .endofpacket
		.sink_valid         (ogpu_raster_unit_status_s1_rsp_width_adapter_src_valid),                   //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_010_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_010_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_011 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_raster_unit_v2z_s1_rsp_width_adapter_src_ready),                      //      sink.ready
		.sink_channel       (ogpu_raster_unit_v2z_s1_rsp_width_adapter_src_channel),                    //          .channel
		.sink_data          (ogpu_raster_unit_v2z_s1_rsp_width_adapter_src_data),                       //          .data
		.sink_startofpacket (ogpu_raster_unit_v2z_s1_rsp_width_adapter_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_v2z_s1_rsp_width_adapter_src_endofpacket),                //          .endofpacket
		.sink_valid         (ogpu_raster_unit_v2z_s1_rsp_width_adapter_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_011_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_011_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_012 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_raster_unit_v2y_s1_rsp_width_adapter_src_ready),                      //      sink.ready
		.sink_channel       (ogpu_raster_unit_v2y_s1_rsp_width_adapter_src_channel),                    //          .channel
		.sink_data          (ogpu_raster_unit_v2y_s1_rsp_width_adapter_src_data),                       //          .data
		.sink_startofpacket (ogpu_raster_unit_v2y_s1_rsp_width_adapter_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_v2y_s1_rsp_width_adapter_src_endofpacket),                //          .endofpacket
		.sink_valid         (ogpu_raster_unit_v2y_s1_rsp_width_adapter_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_012_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_012_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_012_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_013 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_raster_unit_v2x_s1_rsp_width_adapter_src_ready),                      //      sink.ready
		.sink_channel       (ogpu_raster_unit_v2x_s1_rsp_width_adapter_src_channel),                    //          .channel
		.sink_data          (ogpu_raster_unit_v2x_s1_rsp_width_adapter_src_data),                       //          .data
		.sink_startofpacket (ogpu_raster_unit_v2x_s1_rsp_width_adapter_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_v2x_s1_rsp_width_adapter_src_endofpacket),                //          .endofpacket
		.sink_valid         (ogpu_raster_unit_v2x_s1_rsp_width_adapter_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_013_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_013_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_013_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_013_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_013_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_013_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_013_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_014 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_raster_unit_v1z_s1_rsp_width_adapter_src_ready),                      //      sink.ready
		.sink_channel       (ogpu_raster_unit_v1z_s1_rsp_width_adapter_src_channel),                    //          .channel
		.sink_data          (ogpu_raster_unit_v1z_s1_rsp_width_adapter_src_data),                       //          .data
		.sink_startofpacket (ogpu_raster_unit_v1z_s1_rsp_width_adapter_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_v1z_s1_rsp_width_adapter_src_endofpacket),                //          .endofpacket
		.sink_valid         (ogpu_raster_unit_v1z_s1_rsp_width_adapter_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_014_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_014_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_014_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_015 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_raster_unit_v1y_s1_rsp_width_adapter_src_ready),                      //      sink.ready
		.sink_channel       (ogpu_raster_unit_v1y_s1_rsp_width_adapter_src_channel),                    //          .channel
		.sink_data          (ogpu_raster_unit_v1y_s1_rsp_width_adapter_src_data),                       //          .data
		.sink_startofpacket (ogpu_raster_unit_v1y_s1_rsp_width_adapter_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_v1y_s1_rsp_width_adapter_src_endofpacket),                //          .endofpacket
		.sink_valid         (ogpu_raster_unit_v1y_s1_rsp_width_adapter_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_015_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_015_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_015_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_015_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_015_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_015_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_015_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_016 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_raster_unit_v1x_s1_rsp_width_adapter_src_ready),                      //      sink.ready
		.sink_channel       (ogpu_raster_unit_v1x_s1_rsp_width_adapter_src_channel),                    //          .channel
		.sink_data          (ogpu_raster_unit_v1x_s1_rsp_width_adapter_src_data),                       //          .data
		.sink_startofpacket (ogpu_raster_unit_v1x_s1_rsp_width_adapter_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_v1x_s1_rsp_width_adapter_src_endofpacket),                //          .endofpacket
		.sink_valid         (ogpu_raster_unit_v1x_s1_rsp_width_adapter_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_016_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_016_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_016_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_016_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_016_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_016_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_016_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_017 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_raster_unit_v0z_s1_rsp_width_adapter_src_ready),                      //      sink.ready
		.sink_channel       (ogpu_raster_unit_v0z_s1_rsp_width_adapter_src_channel),                    //          .channel
		.sink_data          (ogpu_raster_unit_v0z_s1_rsp_width_adapter_src_data),                       //          .data
		.sink_startofpacket (ogpu_raster_unit_v0z_s1_rsp_width_adapter_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_v0z_s1_rsp_width_adapter_src_endofpacket),                //          .endofpacket
		.sink_valid         (ogpu_raster_unit_v0z_s1_rsp_width_adapter_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_017_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_017_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_017_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_017_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_017_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_017_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_017_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_018 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_raster_unit_v0y_s1_rsp_width_adapter_src_ready),                      //      sink.ready
		.sink_channel       (ogpu_raster_unit_v0y_s1_rsp_width_adapter_src_channel),                    //          .channel
		.sink_data          (ogpu_raster_unit_v0y_s1_rsp_width_adapter_src_data),                       //          .data
		.sink_startofpacket (ogpu_raster_unit_v0y_s1_rsp_width_adapter_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_v0y_s1_rsp_width_adapter_src_endofpacket),                //          .endofpacket
		.sink_valid         (ogpu_raster_unit_v0y_s1_rsp_width_adapter_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_018_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_018_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_018_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_018_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_018_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_018_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_018_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_019 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_raster_unit_v0x_s1_rsp_width_adapter_src_ready),                      //      sink.ready
		.sink_channel       (ogpu_raster_unit_v0x_s1_rsp_width_adapter_src_channel),                    //          .channel
		.sink_data          (ogpu_raster_unit_v0x_s1_rsp_width_adapter_src_data),                       //          .data
		.sink_startofpacket (ogpu_raster_unit_v0x_s1_rsp_width_adapter_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (ogpu_raster_unit_v0x_s1_rsp_width_adapter_src_endofpacket),                //          .endofpacket
		.sink_valid         (ogpu_raster_unit_v0x_s1_rsp_width_adapter_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_019_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_019_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_019_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_019_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_019_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_019_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_019_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_020 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_quad_store_req_s1_rsp_width_adapter_src_ready),                       //      sink.ready
		.sink_channel       (ogpu_quad_store_req_s1_rsp_width_adapter_src_channel),                     //          .channel
		.sink_data          (ogpu_quad_store_req_s1_rsp_width_adapter_src_data),                        //          .data
		.sink_startofpacket (ogpu_quad_store_req_s1_rsp_width_adapter_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (ogpu_quad_store_req_s1_rsp_width_adapter_src_endofpacket),                 //          .endofpacket
		.sink_valid         (ogpu_quad_store_req_s1_rsp_width_adapter_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_020_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_020_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_020_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_020_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_020_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_020_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_020_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_021 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_quad_store_data_high_s1_rsp_width_adapter_src_ready),                 //      sink.ready
		.sink_channel       (ogpu_quad_store_data_high_s1_rsp_width_adapter_src_channel),               //          .channel
		.sink_data          (ogpu_quad_store_data_high_s1_rsp_width_adapter_src_data),                  //          .data
		.sink_startofpacket (ogpu_quad_store_data_high_s1_rsp_width_adapter_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (ogpu_quad_store_data_high_s1_rsp_width_adapter_src_endofpacket),           //          .endofpacket
		.sink_valid         (ogpu_quad_store_data_high_s1_rsp_width_adapter_src_valid),                 //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_021_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_021_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_021_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_021_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_021_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_021_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_021_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_022 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_quad_store_data_low_s1_rsp_width_adapter_src_ready),                  //      sink.ready
		.sink_channel       (ogpu_quad_store_data_low_s1_rsp_width_adapter_src_channel),                //          .channel
		.sink_data          (ogpu_quad_store_data_low_s1_rsp_width_adapter_src_data),                   //          .data
		.sink_startofpacket (ogpu_quad_store_data_low_s1_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (ogpu_quad_store_data_low_s1_rsp_width_adapter_src_endofpacket),            //          .endofpacket
		.sink_valid         (ogpu_quad_store_data_low_s1_rsp_width_adapter_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_022_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_022_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_022_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_022_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_022_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_022_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_022_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_022_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_023 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_quad_store_ack_s1_rsp_width_adapter_src_ready),                       //      sink.ready
		.sink_channel       (ogpu_quad_store_ack_s1_rsp_width_adapter_src_channel),                     //          .channel
		.sink_data          (ogpu_quad_store_ack_s1_rsp_width_adapter_src_data),                        //          .data
		.sink_startofpacket (ogpu_quad_store_ack_s1_rsp_width_adapter_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (ogpu_quad_store_ack_s1_rsp_width_adapter_src_endofpacket),                 //          .endofpacket
		.sink_valid         (ogpu_quad_store_ack_s1_rsp_width_adapter_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_023_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_023_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_023_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_023_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_023_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_023_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_023_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_023_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_024 (
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ogpu_reset_s1_rsp_width_adapter_src_ready),                                //      sink.ready
		.sink_channel       (ogpu_reset_s1_rsp_width_adapter_src_channel),                              //          .channel
		.sink_data          (ogpu_reset_s1_rsp_width_adapter_src_data),                                 //          .data
		.sink_startofpacket (ogpu_reset_s1_rsp_width_adapter_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (ogpu_reset_s1_rsp_width_adapter_src_endofpacket),                          //          .endofpacket
		.sink_valid         (ogpu_reset_s1_rsp_width_adapter_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                                                 //      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                                                 //          .valid
		.src0_data          (rsp_demux_024_src0_data),                                                  //          .data
		.src0_channel       (rsp_demux_024_src0_channel),                                               //          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket),                                           //          .endofpacket
		.src1_ready         (rsp_demux_024_src1_ready),                                                 //      src1.ready
		.src1_valid         (rsp_demux_024_src1_valid),                                                 //          .valid
		.src1_data          (rsp_demux_024_src1_data),                                                  //          .data
		.src1_channel       (rsp_demux_024_src1_channel),                                               //          .channel
		.src1_startofpacket (rsp_demux_024_src1_startofpacket),                                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_024_src1_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                                //       src.ready
		.src_valid            (rsp_mux_src_valid),                                                //          .valid
		.src_data             (rsp_mux_src_data),                                                 //          .data
		.src_channel          (rsp_mux_src_channel),                                              //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                             //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                             //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                                           //          .channel
		.sink0_data           (rsp_demux_src0_data),                                              //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                                       //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                         //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                         //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                                       //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                          //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                                   //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                         //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                         //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                       //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                          //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                                 //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                   //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                         //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                         //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                       //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                          //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                                 //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                   //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                         //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                         //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                       //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                          //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                 //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                   //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                         //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                         //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                       //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                          //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                 //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                   //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                         //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                         //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                       //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                          //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                 //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                   //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                         //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                         //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                       //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                          //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                 //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                   //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                         //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                         //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                       //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                          //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                                 //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                   //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                         //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                         //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                       //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                          //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                                 //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                   //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                         //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                         //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                       //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                          //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                                 //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                                   //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                                         //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                                         //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                                       //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                                          //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                                 //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                                   //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                                         //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                                         //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                                       //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                                          //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                                 //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                                   //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                                         //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                                         //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                                       //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                                          //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),                                 //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                                   //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                                         //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                                         //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                                       //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                                          //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),                                 //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                                   //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                                         //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                                         //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                                       //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                                          //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),                                 //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),                                   //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                                         //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                                         //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                                       //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                                          //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),                                 //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),                                   //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                                         //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                                         //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                                       //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                                          //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),                                 //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),                                   //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                                         //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                                         //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                                       //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                                          //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),                                 //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),                                   //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                                         //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                                         //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),                                       //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                                          //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),                                 //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),                                   //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                                         //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                                         //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),                                       //          .channel
		.sink20_data          (rsp_demux_020_src0_data),                                          //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),                                 //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket),                                   //          .endofpacket
		.sink21_ready         (rsp_demux_021_src0_ready),                                         //    sink21.ready
		.sink21_valid         (rsp_demux_021_src0_valid),                                         //          .valid
		.sink21_channel       (rsp_demux_021_src0_channel),                                       //          .channel
		.sink21_data          (rsp_demux_021_src0_data),                                          //          .data
		.sink21_startofpacket (rsp_demux_021_src0_startofpacket),                                 //          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src0_endofpacket),                                   //          .endofpacket
		.sink22_ready         (rsp_demux_022_src0_ready),                                         //    sink22.ready
		.sink22_valid         (rsp_demux_022_src0_valid),                                         //          .valid
		.sink22_channel       (rsp_demux_022_src0_channel),                                       //          .channel
		.sink22_data          (rsp_demux_022_src0_data),                                          //          .data
		.sink22_startofpacket (rsp_demux_022_src0_startofpacket),                                 //          .startofpacket
		.sink22_endofpacket   (rsp_demux_022_src0_endofpacket),                                   //          .endofpacket
		.sink23_ready         (rsp_demux_023_src0_ready),                                         //    sink23.ready
		.sink23_valid         (rsp_demux_023_src0_valid),                                         //          .valid
		.sink23_channel       (rsp_demux_023_src0_channel),                                       //          .channel
		.sink23_data          (rsp_demux_023_src0_data),                                          //          .data
		.sink23_startofpacket (rsp_demux_023_src0_startofpacket),                                 //          .startofpacket
		.sink23_endofpacket   (rsp_demux_023_src0_endofpacket),                                   //          .endofpacket
		.sink24_ready         (rsp_demux_024_src0_ready),                                         //    sink24.ready
		.sink24_valid         (rsp_demux_024_src0_valid),                                         //          .valid
		.sink24_channel       (rsp_demux_024_src0_channel),                                       //          .channel
		.sink24_data          (rsp_demux_024_src0_data),                                          //          .data
		.sink24_startofpacket (rsp_demux_024_src0_startofpacket),                                 //          .startofpacket
		.sink24_endofpacket   (rsp_demux_024_src0_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux rsp_mux_001 (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                                            //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                                            //          .valid
		.src_data             (rsp_mux_001_src_data),                                             //          .data
		.src_channel          (rsp_mux_001_src_channel),                                          //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                                      //          .endofpacket
		.sink0_ready          (rsp_demux_src1_ready),                                             //     sink0.ready
		.sink0_valid          (rsp_demux_src1_valid),                                             //          .valid
		.sink0_channel        (rsp_demux_src1_channel),                                           //          .channel
		.sink0_data           (rsp_demux_src1_data),                                              //          .data
		.sink0_startofpacket  (rsp_demux_src1_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src1_endofpacket),                                       //          .endofpacket
		.sink1_ready          (rsp_demux_001_src1_ready),                                         //     sink1.ready
		.sink1_valid          (rsp_demux_001_src1_valid),                                         //          .valid
		.sink1_channel        (rsp_demux_001_src1_channel),                                       //          .channel
		.sink1_data           (rsp_demux_001_src1_data),                                          //          .data
		.sink1_startofpacket  (rsp_demux_001_src1_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src1_endofpacket),                                   //          .endofpacket
		.sink2_ready          (rsp_demux_002_src1_ready),                                         //     sink2.ready
		.sink2_valid          (rsp_demux_002_src1_valid),                                         //          .valid
		.sink2_channel        (rsp_demux_002_src1_channel),                                       //          .channel
		.sink2_data           (rsp_demux_002_src1_data),                                          //          .data
		.sink2_startofpacket  (rsp_demux_002_src1_startofpacket),                                 //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src1_endofpacket),                                   //          .endofpacket
		.sink3_ready          (rsp_demux_003_src1_ready),                                         //     sink3.ready
		.sink3_valid          (rsp_demux_003_src1_valid),                                         //          .valid
		.sink3_channel        (rsp_demux_003_src1_channel),                                       //          .channel
		.sink3_data           (rsp_demux_003_src1_data),                                          //          .data
		.sink3_startofpacket  (rsp_demux_003_src1_startofpacket),                                 //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src1_endofpacket),                                   //          .endofpacket
		.sink4_ready          (rsp_demux_004_src1_ready),                                         //     sink4.ready
		.sink4_valid          (rsp_demux_004_src1_valid),                                         //          .valid
		.sink4_channel        (rsp_demux_004_src1_channel),                                       //          .channel
		.sink4_data           (rsp_demux_004_src1_data),                                          //          .data
		.sink4_startofpacket  (rsp_demux_004_src1_startofpacket),                                 //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src1_endofpacket),                                   //          .endofpacket
		.sink5_ready          (rsp_demux_005_src1_ready),                                         //     sink5.ready
		.sink5_valid          (rsp_demux_005_src1_valid),                                         //          .valid
		.sink5_channel        (rsp_demux_005_src1_channel),                                       //          .channel
		.sink5_data           (rsp_demux_005_src1_data),                                          //          .data
		.sink5_startofpacket  (rsp_demux_005_src1_startofpacket),                                 //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src1_endofpacket),                                   //          .endofpacket
		.sink6_ready          (rsp_demux_006_src1_ready),                                         //     sink6.ready
		.sink6_valid          (rsp_demux_006_src1_valid),                                         //          .valid
		.sink6_channel        (rsp_demux_006_src1_channel),                                       //          .channel
		.sink6_data           (rsp_demux_006_src1_data),                                          //          .data
		.sink6_startofpacket  (rsp_demux_006_src1_startofpacket),                                 //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src1_endofpacket),                                   //          .endofpacket
		.sink7_ready          (rsp_demux_007_src1_ready),                                         //     sink7.ready
		.sink7_valid          (rsp_demux_007_src1_valid),                                         //          .valid
		.sink7_channel        (rsp_demux_007_src1_channel),                                       //          .channel
		.sink7_data           (rsp_demux_007_src1_data),                                          //          .data
		.sink7_startofpacket  (rsp_demux_007_src1_startofpacket),                                 //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src1_endofpacket),                                   //          .endofpacket
		.sink8_ready          (rsp_demux_008_src1_ready),                                         //     sink8.ready
		.sink8_valid          (rsp_demux_008_src1_valid),                                         //          .valid
		.sink8_channel        (rsp_demux_008_src1_channel),                                       //          .channel
		.sink8_data           (rsp_demux_008_src1_data),                                          //          .data
		.sink8_startofpacket  (rsp_demux_008_src1_startofpacket),                                 //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src1_endofpacket),                                   //          .endofpacket
		.sink9_ready          (rsp_demux_009_src1_ready),                                         //     sink9.ready
		.sink9_valid          (rsp_demux_009_src1_valid),                                         //          .valid
		.sink9_channel        (rsp_demux_009_src1_channel),                                       //          .channel
		.sink9_data           (rsp_demux_009_src1_data),                                          //          .data
		.sink9_startofpacket  (rsp_demux_009_src1_startofpacket),                                 //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src1_endofpacket),                                   //          .endofpacket
		.sink10_ready         (rsp_demux_010_src1_ready),                                         //    sink10.ready
		.sink10_valid         (rsp_demux_010_src1_valid),                                         //          .valid
		.sink10_channel       (rsp_demux_010_src1_channel),                                       //          .channel
		.sink10_data          (rsp_demux_010_src1_data),                                          //          .data
		.sink10_startofpacket (rsp_demux_010_src1_startofpacket),                                 //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src1_endofpacket),                                   //          .endofpacket
		.sink11_ready         (rsp_demux_011_src1_ready),                                         //    sink11.ready
		.sink11_valid         (rsp_demux_011_src1_valid),                                         //          .valid
		.sink11_channel       (rsp_demux_011_src1_channel),                                       //          .channel
		.sink11_data          (rsp_demux_011_src1_data),                                          //          .data
		.sink11_startofpacket (rsp_demux_011_src1_startofpacket),                                 //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src1_endofpacket),                                   //          .endofpacket
		.sink12_ready         (rsp_demux_012_src1_ready),                                         //    sink12.ready
		.sink12_valid         (rsp_demux_012_src1_valid),                                         //          .valid
		.sink12_channel       (rsp_demux_012_src1_channel),                                       //          .channel
		.sink12_data          (rsp_demux_012_src1_data),                                          //          .data
		.sink12_startofpacket (rsp_demux_012_src1_startofpacket),                                 //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src1_endofpacket),                                   //          .endofpacket
		.sink13_ready         (rsp_demux_013_src1_ready),                                         //    sink13.ready
		.sink13_valid         (rsp_demux_013_src1_valid),                                         //          .valid
		.sink13_channel       (rsp_demux_013_src1_channel),                                       //          .channel
		.sink13_data          (rsp_demux_013_src1_data),                                          //          .data
		.sink13_startofpacket (rsp_demux_013_src1_startofpacket),                                 //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src1_endofpacket),                                   //          .endofpacket
		.sink14_ready         (rsp_demux_014_src1_ready),                                         //    sink14.ready
		.sink14_valid         (rsp_demux_014_src1_valid),                                         //          .valid
		.sink14_channel       (rsp_demux_014_src1_channel),                                       //          .channel
		.sink14_data          (rsp_demux_014_src1_data),                                          //          .data
		.sink14_startofpacket (rsp_demux_014_src1_startofpacket),                                 //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src1_endofpacket),                                   //          .endofpacket
		.sink15_ready         (rsp_demux_015_src1_ready),                                         //    sink15.ready
		.sink15_valid         (rsp_demux_015_src1_valid),                                         //          .valid
		.sink15_channel       (rsp_demux_015_src1_channel),                                       //          .channel
		.sink15_data          (rsp_demux_015_src1_data),                                          //          .data
		.sink15_startofpacket (rsp_demux_015_src1_startofpacket),                                 //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src1_endofpacket),                                   //          .endofpacket
		.sink16_ready         (rsp_demux_016_src1_ready),                                         //    sink16.ready
		.sink16_valid         (rsp_demux_016_src1_valid),                                         //          .valid
		.sink16_channel       (rsp_demux_016_src1_channel),                                       //          .channel
		.sink16_data          (rsp_demux_016_src1_data),                                          //          .data
		.sink16_startofpacket (rsp_demux_016_src1_startofpacket),                                 //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src1_endofpacket),                                   //          .endofpacket
		.sink17_ready         (rsp_demux_017_src1_ready),                                         //    sink17.ready
		.sink17_valid         (rsp_demux_017_src1_valid),                                         //          .valid
		.sink17_channel       (rsp_demux_017_src1_channel),                                       //          .channel
		.sink17_data          (rsp_demux_017_src1_data),                                          //          .data
		.sink17_startofpacket (rsp_demux_017_src1_startofpacket),                                 //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src1_endofpacket),                                   //          .endofpacket
		.sink18_ready         (rsp_demux_018_src1_ready),                                         //    sink18.ready
		.sink18_valid         (rsp_demux_018_src1_valid),                                         //          .valid
		.sink18_channel       (rsp_demux_018_src1_channel),                                       //          .channel
		.sink18_data          (rsp_demux_018_src1_data),                                          //          .data
		.sink18_startofpacket (rsp_demux_018_src1_startofpacket),                                 //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src1_endofpacket),                                   //          .endofpacket
		.sink19_ready         (rsp_demux_019_src1_ready),                                         //    sink19.ready
		.sink19_valid         (rsp_demux_019_src1_valid),                                         //          .valid
		.sink19_channel       (rsp_demux_019_src1_channel),                                       //          .channel
		.sink19_data          (rsp_demux_019_src1_data),                                          //          .data
		.sink19_startofpacket (rsp_demux_019_src1_startofpacket),                                 //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src1_endofpacket),                                   //          .endofpacket
		.sink20_ready         (rsp_demux_020_src1_ready),                                         //    sink20.ready
		.sink20_valid         (rsp_demux_020_src1_valid),                                         //          .valid
		.sink20_channel       (rsp_demux_020_src1_channel),                                       //          .channel
		.sink20_data          (rsp_demux_020_src1_data),                                          //          .data
		.sink20_startofpacket (rsp_demux_020_src1_startofpacket),                                 //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src1_endofpacket),                                   //          .endofpacket
		.sink21_ready         (rsp_demux_021_src1_ready),                                         //    sink21.ready
		.sink21_valid         (rsp_demux_021_src1_valid),                                         //          .valid
		.sink21_channel       (rsp_demux_021_src1_channel),                                       //          .channel
		.sink21_data          (rsp_demux_021_src1_data),                                          //          .data
		.sink21_startofpacket (rsp_demux_021_src1_startofpacket),                                 //          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src1_endofpacket),                                   //          .endofpacket
		.sink22_ready         (rsp_demux_022_src1_ready),                                         //    sink22.ready
		.sink22_valid         (rsp_demux_022_src1_valid),                                         //          .valid
		.sink22_channel       (rsp_demux_022_src1_channel),                                       //          .channel
		.sink22_data          (rsp_demux_022_src1_data),                                          //          .data
		.sink22_startofpacket (rsp_demux_022_src1_startofpacket),                                 //          .startofpacket
		.sink22_endofpacket   (rsp_demux_022_src1_endofpacket),                                   //          .endofpacket
		.sink23_ready         (rsp_demux_023_src1_ready),                                         //    sink23.ready
		.sink23_valid         (rsp_demux_023_src1_valid),                                         //          .valid
		.sink23_channel       (rsp_demux_023_src1_channel),                                       //          .channel
		.sink23_data          (rsp_demux_023_src1_data),                                          //          .data
		.sink23_startofpacket (rsp_demux_023_src1_startofpacket),                                 //          .startofpacket
		.sink23_endofpacket   (rsp_demux_023_src1_endofpacket),                                   //          .endofpacket
		.sink24_ready         (rsp_demux_024_src1_ready),                                         //    sink24.ready
		.sink24_valid         (rsp_demux_024_src1_valid),                                         //          .valid
		.sink24_channel       (rsp_demux_024_src1_channel),                                       //          .channel
		.sink24_data          (rsp_demux_024_src1_data),                                          //          .data
		.sink24_startofpacket (rsp_demux_024_src1_startofpacket),                                 //          .startofpacket
		.sink24_endofpacket   (rsp_demux_024_src1_endofpacket)                                    //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                 //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (router_002_src_valid),                                                          //      sink.valid
		.in_channel           (router_002_src_channel),                                                        //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                                  //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                                    //          .endofpacket
		.in_ready             (router_002_src_ready),                                                          //          .ready
		.in_data              (router_002_src_data),                                                           //          .data
		.out_endofpacket      (ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ogpu_raster_unit_quad_buffer_addr_high_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (router_003_src_valid),                                                         //      sink.valid
		.in_channel           (router_003_src_channel),                                                       //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                                                 //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                                   //          .endofpacket
		.in_ready             (router_003_src_ready),                                                         //          .ready
		.in_data              (router_003_src_data),                                                          //          .data
		.out_endofpacket      (ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ogpu_raster_unit_quad_buffer_addr_low_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_004_src_valid),                                                     //      sink.valid
		.in_channel           (router_004_src_channel),                                                   //          .channel
		.in_startofpacket     (router_004_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_004_src_ready),                                                     //          .ready
		.in_data              (router_004_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter_src_endofpacket),       //       src.endofpacket
		.out_data             (ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter_src_data),              //          .data
		.out_channel          (ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter_src_channel),           //          .channel
		.out_valid            (ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter_src_valid),             //          .valid
		.out_ready            (ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter_src_ready),             //          .ready
		.out_startofpacket    (ogpu_raster_unit_depth_coef_c_s1_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_005_src_valid),                                                     //      sink.valid
		.in_channel           (router_005_src_channel),                                                   //          .channel
		.in_startofpacket     (router_005_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_005_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_005_src_ready),                                                     //          .ready
		.in_data              (router_005_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter_src_endofpacket),       //       src.endofpacket
		.out_data             (ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter_src_data),              //          .data
		.out_channel          (ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter_src_channel),           //          .channel
		.out_valid            (ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter_src_valid),             //          .valid
		.out_ready            (ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter_src_ready),             //          .ready
		.out_startofpacket    (ogpu_raster_unit_depth_coef_b_s1_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_006_src_valid),                                                     //      sink.valid
		.in_channel           (router_006_src_channel),                                                   //          .channel
		.in_startofpacket     (router_006_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_006_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_006_src_ready),                                                     //          .ready
		.in_data              (router_006_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter_src_endofpacket),       //       src.endofpacket
		.out_data             (ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter_src_data),              //          .data
		.out_channel          (ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter_src_channel),           //          .channel
		.out_valid            (ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter_src_valid),             //          .valid
		.out_ready            (ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter_src_ready),             //          .ready
		.out_startofpacket    (ogpu_raster_unit_depth_coef_a_s1_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_tile1_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_007_src_valid),                                                     //      sink.valid
		.in_channel           (router_007_src_channel),                                                   //          .channel
		.in_startofpacket     (router_007_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_007_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_007_src_ready),                                                     //          .ready
		.in_data              (router_007_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_raster_unit_tile1_s1_rsp_width_adapter_src_endofpacket),              //       src.endofpacket
		.out_data             (ogpu_raster_unit_tile1_s1_rsp_width_adapter_src_data),                     //          .data
		.out_channel          (ogpu_raster_unit_tile1_s1_rsp_width_adapter_src_channel),                  //          .channel
		.out_valid            (ogpu_raster_unit_tile1_s1_rsp_width_adapter_src_valid),                    //          .valid
		.out_ready            (ogpu_raster_unit_tile1_s1_rsp_width_adapter_src_ready),                    //          .ready
		.out_startofpacket    (ogpu_raster_unit_tile1_s1_rsp_width_adapter_src_startofpacket),            //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_tile0_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_008_src_valid),                                                     //      sink.valid
		.in_channel           (router_008_src_channel),                                                   //          .channel
		.in_startofpacket     (router_008_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_008_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_008_src_ready),                                                     //          .ready
		.in_data              (router_008_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_raster_unit_tile0_s1_rsp_width_adapter_src_endofpacket),              //       src.endofpacket
		.out_data             (ogpu_raster_unit_tile0_s1_rsp_width_adapter_src_data),                     //          .data
		.out_channel          (ogpu_raster_unit_tile0_s1_rsp_width_adapter_src_channel),                  //          .channel
		.out_valid            (ogpu_raster_unit_tile0_s1_rsp_width_adapter_src_valid),                    //          .valid
		.out_ready            (ogpu_raster_unit_tile0_s1_rsp_width_adapter_src_ready),                    //          .ready
		.out_startofpacket    (ogpu_raster_unit_tile0_s1_rsp_width_adapter_src_startofpacket),            //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_009_src_valid),                                                     //      sink.valid
		.in_channel           (router_009_src_channel),                                                   //          .channel
		.in_startofpacket     (router_009_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_009_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_009_src_ready),                                                     //          .ready
		.in_data              (router_009_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter_src_endofpacket),         //       src.endofpacket
		.out_data             (ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter_src_data),                //          .data
		.out_channel          (ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter_src_channel),             //          .channel
		.out_valid            (ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter_src_valid),               //          .valid
		.out_ready            (ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter_src_ready),               //          .ready
		.out_startofpacket    (ogpu_raster_unit_clip_rect1_s1_rsp_width_adapter_src_startofpacket),       //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_010_src_valid),                                                     //      sink.valid
		.in_channel           (router_010_src_channel),                                                   //          .channel
		.in_startofpacket     (router_010_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_010_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_010_src_ready),                                                     //          .ready
		.in_data              (router_010_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter_src_endofpacket),         //       src.endofpacket
		.out_data             (ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter_src_data),                //          .data
		.out_channel          (ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter_src_channel),             //          .channel
		.out_valid            (ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter_src_valid),               //          .valid
		.out_ready            (ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter_src_ready),               //          .ready
		.out_startofpacket    (ogpu_raster_unit_clip_rect0_s1_rsp_width_adapter_src_startofpacket),       //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_command_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_011_src_valid),                                                     //      sink.valid
		.in_channel           (router_011_src_channel),                                                   //          .channel
		.in_startofpacket     (router_011_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_011_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_011_src_ready),                                                     //          .ready
		.in_data              (router_011_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_raster_unit_command_s1_rsp_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (ogpu_raster_unit_command_s1_rsp_width_adapter_src_data),                   //          .data
		.out_channel          (ogpu_raster_unit_command_s1_rsp_width_adapter_src_channel),                //          .channel
		.out_valid            (ogpu_raster_unit_command_s1_rsp_width_adapter_src_valid),                  //          .valid
		.out_ready            (ogpu_raster_unit_command_s1_rsp_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (ogpu_raster_unit_command_s1_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_status_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_012_src_valid),                                                     //      sink.valid
		.in_channel           (router_012_src_channel),                                                   //          .channel
		.in_startofpacket     (router_012_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_012_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_012_src_ready),                                                     //          .ready
		.in_data              (router_012_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_raster_unit_status_s1_rsp_width_adapter_src_endofpacket),             //       src.endofpacket
		.out_data             (ogpu_raster_unit_status_s1_rsp_width_adapter_src_data),                    //          .data
		.out_channel          (ogpu_raster_unit_status_s1_rsp_width_adapter_src_channel),                 //          .channel
		.out_valid            (ogpu_raster_unit_status_s1_rsp_width_adapter_src_valid),                   //          .valid
		.out_ready            (ogpu_raster_unit_status_s1_rsp_width_adapter_src_ready),                   //          .ready
		.out_startofpacket    (ogpu_raster_unit_status_s1_rsp_width_adapter_src_startofpacket),           //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_v2z_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_013_src_valid),                                                     //      sink.valid
		.in_channel           (router_013_src_channel),                                                   //          .channel
		.in_startofpacket     (router_013_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_013_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_013_src_ready),                                                     //          .ready
		.in_data              (router_013_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_raster_unit_v2z_s1_rsp_width_adapter_src_endofpacket),                //       src.endofpacket
		.out_data             (ogpu_raster_unit_v2z_s1_rsp_width_adapter_src_data),                       //          .data
		.out_channel          (ogpu_raster_unit_v2z_s1_rsp_width_adapter_src_channel),                    //          .channel
		.out_valid            (ogpu_raster_unit_v2z_s1_rsp_width_adapter_src_valid),                      //          .valid
		.out_ready            (ogpu_raster_unit_v2z_s1_rsp_width_adapter_src_ready),                      //          .ready
		.out_startofpacket    (ogpu_raster_unit_v2z_s1_rsp_width_adapter_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_v2y_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_014_src_valid),                                                     //      sink.valid
		.in_channel           (router_014_src_channel),                                                   //          .channel
		.in_startofpacket     (router_014_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_014_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_014_src_ready),                                                     //          .ready
		.in_data              (router_014_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_raster_unit_v2y_s1_rsp_width_adapter_src_endofpacket),                //       src.endofpacket
		.out_data             (ogpu_raster_unit_v2y_s1_rsp_width_adapter_src_data),                       //          .data
		.out_channel          (ogpu_raster_unit_v2y_s1_rsp_width_adapter_src_channel),                    //          .channel
		.out_valid            (ogpu_raster_unit_v2y_s1_rsp_width_adapter_src_valid),                      //          .valid
		.out_ready            (ogpu_raster_unit_v2y_s1_rsp_width_adapter_src_ready),                      //          .ready
		.out_startofpacket    (ogpu_raster_unit_v2y_s1_rsp_width_adapter_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_v2x_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_015_src_valid),                                                     //      sink.valid
		.in_channel           (router_015_src_channel),                                                   //          .channel
		.in_startofpacket     (router_015_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_015_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_015_src_ready),                                                     //          .ready
		.in_data              (router_015_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_raster_unit_v2x_s1_rsp_width_adapter_src_endofpacket),                //       src.endofpacket
		.out_data             (ogpu_raster_unit_v2x_s1_rsp_width_adapter_src_data),                       //          .data
		.out_channel          (ogpu_raster_unit_v2x_s1_rsp_width_adapter_src_channel),                    //          .channel
		.out_valid            (ogpu_raster_unit_v2x_s1_rsp_width_adapter_src_valid),                      //          .valid
		.out_ready            (ogpu_raster_unit_v2x_s1_rsp_width_adapter_src_ready),                      //          .ready
		.out_startofpacket    (ogpu_raster_unit_v2x_s1_rsp_width_adapter_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_v1z_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_016_src_valid),                                                     //      sink.valid
		.in_channel           (router_016_src_channel),                                                   //          .channel
		.in_startofpacket     (router_016_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_016_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_016_src_ready),                                                     //          .ready
		.in_data              (router_016_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_raster_unit_v1z_s1_rsp_width_adapter_src_endofpacket),                //       src.endofpacket
		.out_data             (ogpu_raster_unit_v1z_s1_rsp_width_adapter_src_data),                       //          .data
		.out_channel          (ogpu_raster_unit_v1z_s1_rsp_width_adapter_src_channel),                    //          .channel
		.out_valid            (ogpu_raster_unit_v1z_s1_rsp_width_adapter_src_valid),                      //          .valid
		.out_ready            (ogpu_raster_unit_v1z_s1_rsp_width_adapter_src_ready),                      //          .ready
		.out_startofpacket    (ogpu_raster_unit_v1z_s1_rsp_width_adapter_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_v1y_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_017_src_valid),                                                     //      sink.valid
		.in_channel           (router_017_src_channel),                                                   //          .channel
		.in_startofpacket     (router_017_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_017_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_017_src_ready),                                                     //          .ready
		.in_data              (router_017_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_raster_unit_v1y_s1_rsp_width_adapter_src_endofpacket),                //       src.endofpacket
		.out_data             (ogpu_raster_unit_v1y_s1_rsp_width_adapter_src_data),                       //          .data
		.out_channel          (ogpu_raster_unit_v1y_s1_rsp_width_adapter_src_channel),                    //          .channel
		.out_valid            (ogpu_raster_unit_v1y_s1_rsp_width_adapter_src_valid),                      //          .valid
		.out_ready            (ogpu_raster_unit_v1y_s1_rsp_width_adapter_src_ready),                      //          .ready
		.out_startofpacket    (ogpu_raster_unit_v1y_s1_rsp_width_adapter_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_v1x_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_018_src_valid),                                                     //      sink.valid
		.in_channel           (router_018_src_channel),                                                   //          .channel
		.in_startofpacket     (router_018_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_018_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_018_src_ready),                                                     //          .ready
		.in_data              (router_018_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_raster_unit_v1x_s1_rsp_width_adapter_src_endofpacket),                //       src.endofpacket
		.out_data             (ogpu_raster_unit_v1x_s1_rsp_width_adapter_src_data),                       //          .data
		.out_channel          (ogpu_raster_unit_v1x_s1_rsp_width_adapter_src_channel),                    //          .channel
		.out_valid            (ogpu_raster_unit_v1x_s1_rsp_width_adapter_src_valid),                      //          .valid
		.out_ready            (ogpu_raster_unit_v1x_s1_rsp_width_adapter_src_ready),                      //          .ready
		.out_startofpacket    (ogpu_raster_unit_v1x_s1_rsp_width_adapter_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_v0z_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_019_src_valid),                                                     //      sink.valid
		.in_channel           (router_019_src_channel),                                                   //          .channel
		.in_startofpacket     (router_019_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_019_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_019_src_ready),                                                     //          .ready
		.in_data              (router_019_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_raster_unit_v0z_s1_rsp_width_adapter_src_endofpacket),                //       src.endofpacket
		.out_data             (ogpu_raster_unit_v0z_s1_rsp_width_adapter_src_data),                       //          .data
		.out_channel          (ogpu_raster_unit_v0z_s1_rsp_width_adapter_src_channel),                    //          .channel
		.out_valid            (ogpu_raster_unit_v0z_s1_rsp_width_adapter_src_valid),                      //          .valid
		.out_ready            (ogpu_raster_unit_v0z_s1_rsp_width_adapter_src_ready),                      //          .ready
		.out_startofpacket    (ogpu_raster_unit_v0z_s1_rsp_width_adapter_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_v0y_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_020_src_valid),                                                     //      sink.valid
		.in_channel           (router_020_src_channel),                                                   //          .channel
		.in_startofpacket     (router_020_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_020_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_020_src_ready),                                                     //          .ready
		.in_data              (router_020_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_raster_unit_v0y_s1_rsp_width_adapter_src_endofpacket),                //       src.endofpacket
		.out_data             (ogpu_raster_unit_v0y_s1_rsp_width_adapter_src_data),                       //          .data
		.out_channel          (ogpu_raster_unit_v0y_s1_rsp_width_adapter_src_channel),                    //          .channel
		.out_valid            (ogpu_raster_unit_v0y_s1_rsp_width_adapter_src_valid),                      //          .valid
		.out_ready            (ogpu_raster_unit_v0y_s1_rsp_width_adapter_src_ready),                      //          .ready
		.out_startofpacket    (ogpu_raster_unit_v0y_s1_rsp_width_adapter_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_v0x_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_021_src_valid),                                                     //      sink.valid
		.in_channel           (router_021_src_channel),                                                   //          .channel
		.in_startofpacket     (router_021_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_021_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_021_src_ready),                                                     //          .ready
		.in_data              (router_021_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_raster_unit_v0x_s1_rsp_width_adapter_src_endofpacket),                //       src.endofpacket
		.out_data             (ogpu_raster_unit_v0x_s1_rsp_width_adapter_src_data),                       //          .data
		.out_channel          (ogpu_raster_unit_v0x_s1_rsp_width_adapter_src_channel),                    //          .channel
		.out_valid            (ogpu_raster_unit_v0x_s1_rsp_width_adapter_src_valid),                      //          .valid
		.out_ready            (ogpu_raster_unit_v0x_s1_rsp_width_adapter_src_ready),                      //          .ready
		.out_startofpacket    (ogpu_raster_unit_v0x_s1_rsp_width_adapter_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_quad_store_req_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_022_src_valid),                                                     //      sink.valid
		.in_channel           (router_022_src_channel),                                                   //          .channel
		.in_startofpacket     (router_022_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_022_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_022_src_ready),                                                     //          .ready
		.in_data              (router_022_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_quad_store_req_s1_rsp_width_adapter_src_endofpacket),                 //       src.endofpacket
		.out_data             (ogpu_quad_store_req_s1_rsp_width_adapter_src_data),                        //          .data
		.out_channel          (ogpu_quad_store_req_s1_rsp_width_adapter_src_channel),                     //          .channel
		.out_valid            (ogpu_quad_store_req_s1_rsp_width_adapter_src_valid),                       //          .valid
		.out_ready            (ogpu_quad_store_req_s1_rsp_width_adapter_src_ready),                       //          .ready
		.out_startofpacket    (ogpu_quad_store_req_s1_rsp_width_adapter_src_startofpacket),               //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_quad_store_data_high_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_023_src_valid),                                                     //      sink.valid
		.in_channel           (router_023_src_channel),                                                   //          .channel
		.in_startofpacket     (router_023_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_023_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_023_src_ready),                                                     //          .ready
		.in_data              (router_023_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_quad_store_data_high_s1_rsp_width_adapter_src_endofpacket),           //       src.endofpacket
		.out_data             (ogpu_quad_store_data_high_s1_rsp_width_adapter_src_data),                  //          .data
		.out_channel          (ogpu_quad_store_data_high_s1_rsp_width_adapter_src_channel),               //          .channel
		.out_valid            (ogpu_quad_store_data_high_s1_rsp_width_adapter_src_valid),                 //          .valid
		.out_ready            (ogpu_quad_store_data_high_s1_rsp_width_adapter_src_ready),                 //          .ready
		.out_startofpacket    (ogpu_quad_store_data_high_s1_rsp_width_adapter_src_startofpacket),         //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_quad_store_data_low_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_024_src_valid),                                                     //      sink.valid
		.in_channel           (router_024_src_channel),                                                   //          .channel
		.in_startofpacket     (router_024_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_024_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_024_src_ready),                                                     //          .ready
		.in_data              (router_024_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_quad_store_data_low_s1_rsp_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (ogpu_quad_store_data_low_s1_rsp_width_adapter_src_data),                   //          .data
		.out_channel          (ogpu_quad_store_data_low_s1_rsp_width_adapter_src_channel),                //          .channel
		.out_valid            (ogpu_quad_store_data_low_s1_rsp_width_adapter_src_valid),                  //          .valid
		.out_ready            (ogpu_quad_store_data_low_s1_rsp_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (ogpu_quad_store_data_low_s1_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_quad_store_ack_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_025_src_valid),                                                     //      sink.valid
		.in_channel           (router_025_src_channel),                                                   //          .channel
		.in_startofpacket     (router_025_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_025_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_025_src_ready),                                                     //          .ready
		.in_data              (router_025_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_quad_store_ack_s1_rsp_width_adapter_src_endofpacket),                 //       src.endofpacket
		.out_data             (ogpu_quad_store_ack_s1_rsp_width_adapter_src_data),                        //          .data
		.out_channel          (ogpu_quad_store_ack_s1_rsp_width_adapter_src_channel),                     //          .channel
		.out_valid            (ogpu_quad_store_ack_s1_rsp_width_adapter_src_valid),                       //          .valid
		.out_ready            (ogpu_quad_store_ack_s1_rsp_width_adapter_src_ready),                       //          .ready
		.out_startofpacket    (ogpu_quad_store_ack_s1_rsp_width_adapter_src_startofpacket),               //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_reset_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_026_src_valid),                                                     //      sink.valid
		.in_channel           (router_026_src_channel),                                                   //          .channel
		.in_startofpacket     (router_026_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (router_026_src_endofpacket),                                               //          .endofpacket
		.in_ready             (router_026_src_ready),                                                     //          .ready
		.in_data              (router_026_src_data),                                                      //          .data
		.out_endofpacket      (ogpu_reset_s1_rsp_width_adapter_src_endofpacket),                          //       src.endofpacket
		.out_data             (ogpu_reset_s1_rsp_width_adapter_src_data),                                 //          .data
		.out_channel          (ogpu_reset_s1_rsp_width_adapter_src_channel),                              //          .channel
		.out_valid            (ogpu_reset_s1_rsp_width_adapter_src_valid),                                //          .valid
		.out_ready            (ogpu_reset_s1_rsp_width_adapter_src_ready),                                //          .ready
		.out_startofpacket    (ogpu_reset_s1_rsp_width_adapter_src_startofpacket),                        //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                 //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                             //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                           //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                                     //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                                       //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                             //          .ready
		.in_data              (cmd_mux_src_data),                                                              //          .data
		.out_endofpacket      (ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ogpu_raster_unit_quad_buffer_addr_high_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                                        //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                                      //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                                //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                                  //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                                        //          .ready
		.in_data              (cmd_mux_001_src_data),                                                         //          .data
		.out_endofpacket      (ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ogpu_raster_unit_quad_buffer_addr_low_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_002_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_002_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_002_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_002_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_002_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_002_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter_src_endofpacket),       //       src.endofpacket
		.out_data             (ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter_src_data),              //          .data
		.out_channel          (ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter_src_channel),           //          .channel
		.out_valid            (ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter_src_valid),             //          .valid
		.out_ready            (ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter_src_ready),             //          .ready
		.out_startofpacket    (ogpu_raster_unit_depth_coef_c_s1_cmd_width_adapter_src_startofpacket),     //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_003_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter_src_endofpacket),       //       src.endofpacket
		.out_data             (ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter_src_data),              //          .data
		.out_channel          (ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter_src_channel),           //          .channel
		.out_valid            (ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter_src_valid),             //          .valid
		.out_ready            (ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter_src_ready),             //          .ready
		.out_startofpacket    (ogpu_raster_unit_depth_coef_b_s1_cmd_width_adapter_src_startofpacket),     //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_004_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_004_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_004_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_004_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_004_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_004_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter_src_endofpacket),       //       src.endofpacket
		.out_data             (ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter_src_data),              //          .data
		.out_channel          (ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter_src_channel),           //          .channel
		.out_valid            (ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter_src_valid),             //          .valid
		.out_ready            (ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter_src_ready),             //          .ready
		.out_startofpacket    (ogpu_raster_unit_depth_coef_a_s1_cmd_width_adapter_src_startofpacket),     //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_tile1_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_005_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_005_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_005_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_005_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_005_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_005_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_raster_unit_tile1_s1_cmd_width_adapter_src_endofpacket),              //       src.endofpacket
		.out_data             (ogpu_raster_unit_tile1_s1_cmd_width_adapter_src_data),                     //          .data
		.out_channel          (ogpu_raster_unit_tile1_s1_cmd_width_adapter_src_channel),                  //          .channel
		.out_valid            (ogpu_raster_unit_tile1_s1_cmd_width_adapter_src_valid),                    //          .valid
		.out_ready            (ogpu_raster_unit_tile1_s1_cmd_width_adapter_src_ready),                    //          .ready
		.out_startofpacket    (ogpu_raster_unit_tile1_s1_cmd_width_adapter_src_startofpacket),            //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_tile0_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_006_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_006_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_006_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_006_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_006_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_006_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_raster_unit_tile0_s1_cmd_width_adapter_src_endofpacket),              //       src.endofpacket
		.out_data             (ogpu_raster_unit_tile0_s1_cmd_width_adapter_src_data),                     //          .data
		.out_channel          (ogpu_raster_unit_tile0_s1_cmd_width_adapter_src_channel),                  //          .channel
		.out_valid            (ogpu_raster_unit_tile0_s1_cmd_width_adapter_src_valid),                    //          .valid
		.out_ready            (ogpu_raster_unit_tile0_s1_cmd_width_adapter_src_ready),                    //          .ready
		.out_startofpacket    (ogpu_raster_unit_tile0_s1_cmd_width_adapter_src_startofpacket),            //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_007_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_007_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_007_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_007_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_007_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_007_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter_src_endofpacket),         //       src.endofpacket
		.out_data             (ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter_src_data),                //          .data
		.out_channel          (ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter_src_channel),             //          .channel
		.out_valid            (ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter_src_valid),               //          .valid
		.out_ready            (ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter_src_ready),               //          .ready
		.out_startofpacket    (ogpu_raster_unit_clip_rect1_s1_cmd_width_adapter_src_startofpacket),       //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_008_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_008_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_008_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_008_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_008_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_008_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter_src_endofpacket),         //       src.endofpacket
		.out_data             (ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter_src_data),                //          .data
		.out_channel          (ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter_src_channel),             //          .channel
		.out_valid            (ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter_src_valid),               //          .valid
		.out_ready            (ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter_src_ready),               //          .ready
		.out_startofpacket    (ogpu_raster_unit_clip_rect0_s1_cmd_width_adapter_src_startofpacket),       //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_command_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_009_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_009_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_009_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_009_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_009_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_009_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_raster_unit_command_s1_cmd_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (ogpu_raster_unit_command_s1_cmd_width_adapter_src_data),                   //          .data
		.out_channel          (ogpu_raster_unit_command_s1_cmd_width_adapter_src_channel),                //          .channel
		.out_valid            (ogpu_raster_unit_command_s1_cmd_width_adapter_src_valid),                  //          .valid
		.out_ready            (ogpu_raster_unit_command_s1_cmd_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (ogpu_raster_unit_command_s1_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_status_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_010_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_010_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_010_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_010_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_010_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_010_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_raster_unit_status_s1_cmd_width_adapter_src_endofpacket),             //       src.endofpacket
		.out_data             (ogpu_raster_unit_status_s1_cmd_width_adapter_src_data),                    //          .data
		.out_channel          (ogpu_raster_unit_status_s1_cmd_width_adapter_src_channel),                 //          .channel
		.out_valid            (ogpu_raster_unit_status_s1_cmd_width_adapter_src_valid),                   //          .valid
		.out_ready            (ogpu_raster_unit_status_s1_cmd_width_adapter_src_ready),                   //          .ready
		.out_startofpacket    (ogpu_raster_unit_status_s1_cmd_width_adapter_src_startofpacket),           //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_v2z_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_011_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_011_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_011_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_011_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_011_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_011_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_raster_unit_v2z_s1_cmd_width_adapter_src_endofpacket),                //       src.endofpacket
		.out_data             (ogpu_raster_unit_v2z_s1_cmd_width_adapter_src_data),                       //          .data
		.out_channel          (ogpu_raster_unit_v2z_s1_cmd_width_adapter_src_channel),                    //          .channel
		.out_valid            (ogpu_raster_unit_v2z_s1_cmd_width_adapter_src_valid),                      //          .valid
		.out_ready            (ogpu_raster_unit_v2z_s1_cmd_width_adapter_src_ready),                      //          .ready
		.out_startofpacket    (ogpu_raster_unit_v2z_s1_cmd_width_adapter_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_v2y_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_012_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_012_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_012_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_012_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_012_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_012_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_raster_unit_v2y_s1_cmd_width_adapter_src_endofpacket),                //       src.endofpacket
		.out_data             (ogpu_raster_unit_v2y_s1_cmd_width_adapter_src_data),                       //          .data
		.out_channel          (ogpu_raster_unit_v2y_s1_cmd_width_adapter_src_channel),                    //          .channel
		.out_valid            (ogpu_raster_unit_v2y_s1_cmd_width_adapter_src_valid),                      //          .valid
		.out_ready            (ogpu_raster_unit_v2y_s1_cmd_width_adapter_src_ready),                      //          .ready
		.out_startofpacket    (ogpu_raster_unit_v2y_s1_cmd_width_adapter_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_v2x_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_013_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_013_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_013_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_013_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_013_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_013_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_raster_unit_v2x_s1_cmd_width_adapter_src_endofpacket),                //       src.endofpacket
		.out_data             (ogpu_raster_unit_v2x_s1_cmd_width_adapter_src_data),                       //          .data
		.out_channel          (ogpu_raster_unit_v2x_s1_cmd_width_adapter_src_channel),                    //          .channel
		.out_valid            (ogpu_raster_unit_v2x_s1_cmd_width_adapter_src_valid),                      //          .valid
		.out_ready            (ogpu_raster_unit_v2x_s1_cmd_width_adapter_src_ready),                      //          .ready
		.out_startofpacket    (ogpu_raster_unit_v2x_s1_cmd_width_adapter_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_v1z_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_014_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_014_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_014_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_014_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_014_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_014_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_raster_unit_v1z_s1_cmd_width_adapter_src_endofpacket),                //       src.endofpacket
		.out_data             (ogpu_raster_unit_v1z_s1_cmd_width_adapter_src_data),                       //          .data
		.out_channel          (ogpu_raster_unit_v1z_s1_cmd_width_adapter_src_channel),                    //          .channel
		.out_valid            (ogpu_raster_unit_v1z_s1_cmd_width_adapter_src_valid),                      //          .valid
		.out_ready            (ogpu_raster_unit_v1z_s1_cmd_width_adapter_src_ready),                      //          .ready
		.out_startofpacket    (ogpu_raster_unit_v1z_s1_cmd_width_adapter_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_v1y_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_015_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_015_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_015_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_015_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_015_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_015_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_raster_unit_v1y_s1_cmd_width_adapter_src_endofpacket),                //       src.endofpacket
		.out_data             (ogpu_raster_unit_v1y_s1_cmd_width_adapter_src_data),                       //          .data
		.out_channel          (ogpu_raster_unit_v1y_s1_cmd_width_adapter_src_channel),                    //          .channel
		.out_valid            (ogpu_raster_unit_v1y_s1_cmd_width_adapter_src_valid),                      //          .valid
		.out_ready            (ogpu_raster_unit_v1y_s1_cmd_width_adapter_src_ready),                      //          .ready
		.out_startofpacket    (ogpu_raster_unit_v1y_s1_cmd_width_adapter_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_v1x_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_016_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_016_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_016_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_016_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_016_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_016_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_raster_unit_v1x_s1_cmd_width_adapter_src_endofpacket),                //       src.endofpacket
		.out_data             (ogpu_raster_unit_v1x_s1_cmd_width_adapter_src_data),                       //          .data
		.out_channel          (ogpu_raster_unit_v1x_s1_cmd_width_adapter_src_channel),                    //          .channel
		.out_valid            (ogpu_raster_unit_v1x_s1_cmd_width_adapter_src_valid),                      //          .valid
		.out_ready            (ogpu_raster_unit_v1x_s1_cmd_width_adapter_src_ready),                      //          .ready
		.out_startofpacket    (ogpu_raster_unit_v1x_s1_cmd_width_adapter_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_v0z_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_017_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_017_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_017_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_017_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_017_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_017_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_raster_unit_v0z_s1_cmd_width_adapter_src_endofpacket),                //       src.endofpacket
		.out_data             (ogpu_raster_unit_v0z_s1_cmd_width_adapter_src_data),                       //          .data
		.out_channel          (ogpu_raster_unit_v0z_s1_cmd_width_adapter_src_channel),                    //          .channel
		.out_valid            (ogpu_raster_unit_v0z_s1_cmd_width_adapter_src_valid),                      //          .valid
		.out_ready            (ogpu_raster_unit_v0z_s1_cmd_width_adapter_src_ready),                      //          .ready
		.out_startofpacket    (ogpu_raster_unit_v0z_s1_cmd_width_adapter_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_v0y_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_018_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_018_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_018_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_018_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_018_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_018_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_raster_unit_v0y_s1_cmd_width_adapter_src_endofpacket),                //       src.endofpacket
		.out_data             (ogpu_raster_unit_v0y_s1_cmd_width_adapter_src_data),                       //          .data
		.out_channel          (ogpu_raster_unit_v0y_s1_cmd_width_adapter_src_channel),                    //          .channel
		.out_valid            (ogpu_raster_unit_v0y_s1_cmd_width_adapter_src_valid),                      //          .valid
		.out_ready            (ogpu_raster_unit_v0y_s1_cmd_width_adapter_src_ready),                      //          .ready
		.out_startofpacket    (ogpu_raster_unit_v0y_s1_cmd_width_adapter_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_raster_unit_v0x_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_019_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_019_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_019_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_019_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_019_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_019_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_raster_unit_v0x_s1_cmd_width_adapter_src_endofpacket),                //       src.endofpacket
		.out_data             (ogpu_raster_unit_v0x_s1_cmd_width_adapter_src_data),                       //          .data
		.out_channel          (ogpu_raster_unit_v0x_s1_cmd_width_adapter_src_channel),                    //          .channel
		.out_valid            (ogpu_raster_unit_v0x_s1_cmd_width_adapter_src_valid),                      //          .valid
		.out_ready            (ogpu_raster_unit_v0x_s1_cmd_width_adapter_src_ready),                      //          .ready
		.out_startofpacket    (ogpu_raster_unit_v0x_s1_cmd_width_adapter_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_quad_store_req_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_020_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_020_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_020_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_020_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_020_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_020_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_quad_store_req_s1_cmd_width_adapter_src_endofpacket),                 //       src.endofpacket
		.out_data             (ogpu_quad_store_req_s1_cmd_width_adapter_src_data),                        //          .data
		.out_channel          (ogpu_quad_store_req_s1_cmd_width_adapter_src_channel),                     //          .channel
		.out_valid            (ogpu_quad_store_req_s1_cmd_width_adapter_src_valid),                       //          .valid
		.out_ready            (ogpu_quad_store_req_s1_cmd_width_adapter_src_ready),                       //          .ready
		.out_startofpacket    (ogpu_quad_store_req_s1_cmd_width_adapter_src_startofpacket),               //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_quad_store_data_high_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_021_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_021_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_021_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_021_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_021_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_021_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_quad_store_data_high_s1_cmd_width_adapter_src_endofpacket),           //       src.endofpacket
		.out_data             (ogpu_quad_store_data_high_s1_cmd_width_adapter_src_data),                  //          .data
		.out_channel          (ogpu_quad_store_data_high_s1_cmd_width_adapter_src_channel),               //          .channel
		.out_valid            (ogpu_quad_store_data_high_s1_cmd_width_adapter_src_valid),                 //          .valid
		.out_ready            (ogpu_quad_store_data_high_s1_cmd_width_adapter_src_ready),                 //          .ready
		.out_startofpacket    (ogpu_quad_store_data_high_s1_cmd_width_adapter_src_startofpacket),         //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_quad_store_data_low_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_022_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_022_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_022_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_022_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_022_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_022_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_quad_store_data_low_s1_cmd_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (ogpu_quad_store_data_low_s1_cmd_width_adapter_src_data),                   //          .data
		.out_channel          (ogpu_quad_store_data_low_s1_cmd_width_adapter_src_channel),                //          .channel
		.out_valid            (ogpu_quad_store_data_low_s1_cmd_width_adapter_src_valid),                  //          .valid
		.out_ready            (ogpu_quad_store_data_low_s1_cmd_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (ogpu_quad_store_data_low_s1_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_quad_store_ack_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_023_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_023_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_023_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_023_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_023_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_023_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_quad_store_ack_s1_cmd_width_adapter_src_endofpacket),                 //       src.endofpacket
		.out_data             (ogpu_quad_store_ack_s1_cmd_width_adapter_src_data),                        //          .data
		.out_channel          (ogpu_quad_store_ack_s1_cmd_width_adapter_src_channel),                     //          .channel
		.out_valid            (ogpu_quad_store_ack_s1_cmd_width_adapter_src_valid),                       //          .valid
		.out_ready            (ogpu_quad_store_ack_s1_cmd_width_adapter_src_ready),                       //          .ready
		.out_startofpacket    (ogpu_quad_store_ack_s1_cmd_width_adapter_src_startofpacket),               //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (25),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ogpu_reset_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                            //       clk.clk
		.reset                (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_024_src_valid),                                                    //      sink.valid
		.in_channel           (cmd_mux_024_src_channel),                                                  //          .channel
		.in_startofpacket     (cmd_mux_024_src_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_mux_024_src_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_mux_024_src_ready),                                                    //          .ready
		.in_data              (cmd_mux_024_src_data),                                                     //          .data
		.out_endofpacket      (ogpu_reset_s1_cmd_width_adapter_src_endofpacket),                          //       src.endofpacket
		.out_data             (ogpu_reset_s1_cmd_width_adapter_src_data),                                 //          .data
		.out_channel          (ogpu_reset_s1_cmd_width_adapter_src_channel),                              //          .channel
		.out_valid            (ogpu_reset_s1_cmd_width_adapter_src_valid),                                //          .valid
		.out_ready            (ogpu_reset_s1_cmd_width_adapter_src_ready),                                //          .ready
		.out_startofpacket    (ogpu_reset_s1_cmd_width_adapter_src_startofpacket),                        //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (ogpu_raster_unit_quad_buffer_addr_high_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                            //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                            //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                             //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (ogpu_raster_unit_quad_buffer_addr_low_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (ogpu_raster_unit_depth_coef_c_s1_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (ogpu_raster_unit_depth_coef_b_s1_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (ogpu_raster_unit_depth_coef_a_s1_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_raster_unit_tile1_s1_agent_rdata_fifo_out_data),                      //     in_0.data
		.in_0_valid     (ogpu_raster_unit_tile1_s1_agent_rdata_fifo_out_valid),                     //         .valid
		.in_0_ready     (ogpu_raster_unit_tile1_s1_agent_rdata_fifo_out_ready),                     //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_raster_unit_tile0_s1_agent_rdata_fifo_out_data),                      //     in_0.data
		.in_0_valid     (ogpu_raster_unit_tile0_s1_agent_rdata_fifo_out_valid),                     //         .valid
		.in_0_ready     (ogpu_raster_unit_tile0_s1_agent_rdata_fifo_out_ready),                     //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo_out_data),                 //     in_0.data
		.in_0_valid     (ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo_out_valid),                //         .valid
		.in_0_ready     (ogpu_raster_unit_clip_rect1_s1_agent_rdata_fifo_out_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo_out_data),                 //     in_0.data
		.in_0_valid     (ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo_out_valid),                //         .valid
		.in_0_ready     (ogpu_raster_unit_clip_rect0_s1_agent_rdata_fifo_out_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_raster_unit_command_s1_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (ogpu_raster_unit_command_s1_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (ogpu_raster_unit_command_s1_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_raster_unit_status_s1_agent_rdata_fifo_out_data),                     //     in_0.data
		.in_0_valid     (ogpu_raster_unit_status_s1_agent_rdata_fifo_out_valid),                    //         .valid
		.in_0_ready     (ogpu_raster_unit_status_s1_agent_rdata_fifo_out_ready),                    //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_raster_unit_v2z_s1_agent_rdata_fifo_out_data),                        //     in_0.data
		.in_0_valid     (ogpu_raster_unit_v2z_s1_agent_rdata_fifo_out_valid),                       //         .valid
		.in_0_ready     (ogpu_raster_unit_v2z_s1_agent_rdata_fifo_out_ready),                       //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_raster_unit_v2y_s1_agent_rdata_fifo_out_data),                        //     in_0.data
		.in_0_valid     (ogpu_raster_unit_v2y_s1_agent_rdata_fifo_out_valid),                       //         .valid
		.in_0_ready     (ogpu_raster_unit_v2y_s1_agent_rdata_fifo_out_ready),                       //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_raster_unit_v2x_s1_agent_rdata_fifo_out_data),                        //     in_0.data
		.in_0_valid     (ogpu_raster_unit_v2x_s1_agent_rdata_fifo_out_valid),                       //         .valid
		.in_0_ready     (ogpu_raster_unit_v2x_s1_agent_rdata_fifo_out_ready),                       //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_raster_unit_v1z_s1_agent_rdata_fifo_out_data),                        //     in_0.data
		.in_0_valid     (ogpu_raster_unit_v1z_s1_agent_rdata_fifo_out_valid),                       //         .valid
		.in_0_ready     (ogpu_raster_unit_v1z_s1_agent_rdata_fifo_out_ready),                       //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_raster_unit_v1y_s1_agent_rdata_fifo_out_data),                        //     in_0.data
		.in_0_valid     (ogpu_raster_unit_v1y_s1_agent_rdata_fifo_out_valid),                       //         .valid
		.in_0_ready     (ogpu_raster_unit_v1y_s1_agent_rdata_fifo_out_ready),                       //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_raster_unit_v1x_s1_agent_rdata_fifo_out_data),                        //     in_0.data
		.in_0_valid     (ogpu_raster_unit_v1x_s1_agent_rdata_fifo_out_valid),                       //         .valid
		.in_0_ready     (ogpu_raster_unit_v1x_s1_agent_rdata_fifo_out_ready),                       //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_raster_unit_v0z_s1_agent_rdata_fifo_out_data),                        //     in_0.data
		.in_0_valid     (ogpu_raster_unit_v0z_s1_agent_rdata_fifo_out_valid),                       //         .valid
		.in_0_ready     (ogpu_raster_unit_v0z_s1_agent_rdata_fifo_out_ready),                       //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_raster_unit_v0y_s1_agent_rdata_fifo_out_data),                        //     in_0.data
		.in_0_valid     (ogpu_raster_unit_v0y_s1_agent_rdata_fifo_out_valid),                       //         .valid
		.in_0_ready     (ogpu_raster_unit_v0y_s1_agent_rdata_fifo_out_ready),                       //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_raster_unit_v0x_s1_agent_rdata_fifo_out_data),                        //     in_0.data
		.in_0_valid     (ogpu_raster_unit_v0x_s1_agent_rdata_fifo_out_valid),                       //         .valid
		.in_0_ready     (ogpu_raster_unit_v0x_s1_agent_rdata_fifo_out_ready),                       //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_quad_store_req_s1_agent_rdata_fifo_out_data),                         //     in_0.data
		.in_0_valid     (ogpu_quad_store_req_s1_agent_rdata_fifo_out_valid),                        //         .valid
		.in_0_ready     (ogpu_quad_store_req_s1_agent_rdata_fifo_out_ready),                        //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_021 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_quad_store_data_high_s1_agent_rdata_fifo_out_data),                   //     in_0.data
		.in_0_valid     (ogpu_quad_store_data_high_s1_agent_rdata_fifo_out_valid),                  //         .valid
		.in_0_ready     (ogpu_quad_store_data_high_s1_agent_rdata_fifo_out_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_021_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_021_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_021_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_021_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_022 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_quad_store_data_low_s1_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (ogpu_quad_store_data_low_s1_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (ogpu_quad_store_data_low_s1_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_022_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_022_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_022_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_022_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_023 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_quad_store_ack_s1_agent_rdata_fifo_out_data),                         //     in_0.data
		.in_0_valid     (ogpu_quad_store_ack_s1_agent_rdata_fifo_out_valid),                        //         .valid
		.in_0_ready     (ogpu_quad_store_ack_s1_agent_rdata_fifo_out_ready),                        //         .ready
		.out_0_data     (avalon_st_adapter_023_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_023_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_023_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_023_out_0_error)                                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_024 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (ogpu_raster_unit_quad_buffer_addr_high_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ogpu_reset_s1_agent_rdata_fifo_out_data),                                  //     in_0.data
		.in_0_valid     (ogpu_reset_s1_agent_rdata_fifo_out_valid),                                 //         .valid
		.in_0_ready     (ogpu_reset_s1_agent_rdata_fifo_out_ready),                                 //         .ready
		.out_0_data     (avalon_st_adapter_024_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_024_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_024_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_024_out_0_error)                                         //         .error
	);

endmodule
